// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: navigate.proto

#ifndef PROTOBUF_navigate_2eproto__INCLUDED
#define PROTOBUF_navigate_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
namespace navigate {
class GetAccessReq;
class GetAccessReqDefaultTypeInternal;
extern GetAccessReqDefaultTypeInternal _GetAccessReq_default_instance_;
class GetAccessRsp;
class GetAccessRspDefaultTypeInternal;
extern GetAccessRspDefaultTypeInternal _GetAccessRsp_default_instance_;
class NavigateMsg;
class NavigateMsgDefaultTypeInternal;
extern NavigateMsgDefaultTypeInternal _NavigateMsg_default_instance_;
class PutLoadReq;
class PutLoadReqDefaultTypeInternal;
extern PutLoadReqDefaultTypeInternal _PutLoadReq_default_instance_;
class PutLoadRsp;
class PutLoadRspDefaultTypeInternal;
extern PutLoadRspDefaultTypeInternal _PutLoadRsp_default_instance_;
}  // namespace navigate

namespace navigate {

namespace protobuf_navigate_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_navigate_2eproto

enum ErrorCode {
  SUCCESS = 0,
  ERR_SYS_BEGIN = 102000100,
  ERR_SYS_OVERLOAD = 102000101,
  ERR_SYS_REJECT_SERVICE = 102000102,
  ERR_SYS_SERVER_INNER = 102000103,
  ERR_SYS_TIMEOUT = 102000104,
  ERR_SYS_NO_INSERVICE_LIST = 102000105,
  ERR_SYS_TASK_STATE = 102000106,
  ERR_SYS_TASK_DISCARD = 102000107,
  ERR_SYS_END = 102000199,
  ERR_PACKET_BEGIN = 102000200,
  ERR_PACKET_ENCODE = 102000201,
  ERR_PACKET_DECODE = 102000202,
  ERR_PACKET_HEADER = 102000203,
  ERR_PACKET_LEN = 102000204,
  ERR_PACKET_VERSION = 102000205,
  ERR_PACKET_FROM_SERVICE_ID = 102000206,
  ERR_PACKET_TO_SERVICE_ID = 102000207,
  ERR_PACKET_APP_ID = 102000208,
  ERR_PACKET_APP_VERSION = 102000209,
  ERR_PACKET_CONN_SEQ_ID = 102000210,
  ERR_PACKET_MSG_SEQ_ID = 102000211,
  ERR_PACKET_DATA_FORMAT = 102000212,
  ERR_PACKET_DATA_FIELD_0 = 102000213,
  ERR_PACKET_DATA_FIELD_1 = 102000214,
  ERR_PACKET_DATA_FIELD_2 = 102000215,
  ERR_PACKET_DATA_FIELD_3 = 102000216,
  ERR_PACKET_CHECK_SUM = 102000217,
  ERR_PACKET_UNKNOWN_REQUEST = 102000218,
  ERR_PACKET_END = 102000299,
  ERR_INTERFACE_BEGIN = 102000300,
  ERR_INTERFACE_PARAM = 102000301,
  ERR_INTERFACE_PERM = 102000302,
  ERR_INTERFACE_TIMEOUT = 102000303,
  ERR_INTERFACE_MASTER_TIMEOUT = 102000304,
  ERR_INTERFACE_SUB_TIMEOUT = 102000305,
  ERR_INTERFACE_END = 102000399,
  ERR_BUSINESS_BEGIN = 102001000,
  ERR_BUSINESS_END = 102009999,
  ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ErrorCode_IsValid(int value);
const ErrorCode ErrorCode_MIN = SUCCESS;
const ErrorCode ErrorCode_MAX = ERR_BUSINESS_END;
const int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor();
inline const ::std::string& ErrorCode_Name(ErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ErrorCode_descriptor(), value);
}
inline bool ErrorCode_Parse(
    const ::std::string& name, ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
// ===================================================================

class NavigateMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:navigate.NavigateMsg) */ {
 public:
  NavigateMsg();
  virtual ~NavigateMsg();

  NavigateMsg(const NavigateMsg& from);

  inline NavigateMsg& operator=(const NavigateMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NavigateMsg(NavigateMsg&& from) noexcept
    : NavigateMsg() {
    *this = ::std::move(from);
  }

  inline NavigateMsg& operator=(NavigateMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NavigateMsg& default_instance();

  enum ChoiceCase {
    kTestReq = 1,
    kTestRsp = 2,
    kGetAccessReq = 3,
    kGetAccessRsp = 4,
    kPutLoadReq = 5,
    kPutLoadRsp = 6,
    CHOICE_NOT_SET = 0,
  };

  static inline const NavigateMsg* internal_default_instance() {
    return reinterpret_cast<const NavigateMsg*>(
               &_NavigateMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(NavigateMsg* other);
  friend void swap(NavigateMsg& a, NavigateMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NavigateMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  NavigateMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NavigateMsg& from);
  void MergeFrom(const NavigateMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NavigateMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.TestReq test_req = 1;
  bool has_test_req() const;
  void clear_test_req();
  static const int kTestReqFieldNumber = 1;
  const ::common::TestReq& test_req() const;
  ::common::TestReq* mutable_test_req();
  ::common::TestReq* release_test_req();
  void set_allocated_test_req(::common::TestReq* test_req);

  // .common.TestRsp test_rsp = 2;
  bool has_test_rsp() const;
  void clear_test_rsp();
  static const int kTestRspFieldNumber = 2;
  const ::common::TestRsp& test_rsp() const;
  ::common::TestRsp* mutable_test_rsp();
  ::common::TestRsp* release_test_rsp();
  void set_allocated_test_rsp(::common::TestRsp* test_rsp);

  // .navigate.GetAccessReq get_access_req = 3;
  bool has_get_access_req() const;
  void clear_get_access_req();
  static const int kGetAccessReqFieldNumber = 3;
  const ::navigate::GetAccessReq& get_access_req() const;
  ::navigate::GetAccessReq* mutable_get_access_req();
  ::navigate::GetAccessReq* release_get_access_req();
  void set_allocated_get_access_req(::navigate::GetAccessReq* get_access_req);

  // .navigate.GetAccessRsp get_access_rsp = 4;
  bool has_get_access_rsp() const;
  void clear_get_access_rsp();
  static const int kGetAccessRspFieldNumber = 4;
  const ::navigate::GetAccessRsp& get_access_rsp() const;
  ::navigate::GetAccessRsp* mutable_get_access_rsp();
  ::navigate::GetAccessRsp* release_get_access_rsp();
  void set_allocated_get_access_rsp(::navigate::GetAccessRsp* get_access_rsp);

  // .navigate.PutLoadReq put_load_req = 5;
  bool has_put_load_req() const;
  void clear_put_load_req();
  static const int kPutLoadReqFieldNumber = 5;
  const ::navigate::PutLoadReq& put_load_req() const;
  ::navigate::PutLoadReq* mutable_put_load_req();
  ::navigate::PutLoadReq* release_put_load_req();
  void set_allocated_put_load_req(::navigate::PutLoadReq* put_load_req);

  // .navigate.PutLoadRsp put_load_rsp = 6;
  bool has_put_load_rsp() const;
  void clear_put_load_rsp();
  static const int kPutLoadRspFieldNumber = 6;
  const ::navigate::PutLoadRsp& put_load_rsp() const;
  ::navigate::PutLoadRsp* mutable_put_load_rsp();
  ::navigate::PutLoadRsp* release_put_load_rsp();
  void set_allocated_put_load_rsp(::navigate::PutLoadRsp* put_load_rsp);

  ChoiceCase choice_case() const;
  // @@protoc_insertion_point(class_scope:navigate.NavigateMsg)
 private:
  void set_has_test_req();
  void set_has_test_rsp();
  void set_has_get_access_req();
  void set_has_get_access_rsp();
  void set_has_put_load_req();
  void set_has_put_load_rsp();

  inline bool has_choice() const;
  void clear_choice();
  inline void clear_has_choice();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ChoiceUnion {
    ChoiceUnion() {}
    ::common::TestReq* test_req_;
    ::common::TestRsp* test_rsp_;
    ::navigate::GetAccessReq* get_access_req_;
    ::navigate::GetAccessRsp* get_access_rsp_;
    ::navigate::PutLoadReq* put_load_req_;
    ::navigate::PutLoadRsp* put_load_rsp_;
  } choice_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_navigate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetAccessReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:navigate.GetAccessReq) */ {
 public:
  GetAccessReq();
  virtual ~GetAccessReq();

  GetAccessReq(const GetAccessReq& from);

  inline GetAccessReq& operator=(const GetAccessReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetAccessReq(GetAccessReq&& from) noexcept
    : GetAccessReq() {
    *this = ::std::move(from);
  }

  inline GetAccessReq& operator=(GetAccessReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAccessReq& default_instance();

  static inline const GetAccessReq* internal_default_instance() {
    return reinterpret_cast<const GetAccessReq*>(
               &_GetAccessReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(GetAccessReq* other);
  friend void swap(GetAccessReq& a, GetAccessReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetAccessReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GetAccessReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetAccessReq& from);
  void MergeFrom(const GetAccessReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetAccessReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::uint64 user_id() const;
  void set_user_id(::google::protobuf::uint64 value);

  // int32 service_id = 1;
  void clear_service_id();
  static const int kServiceIdFieldNumber = 1;
  ::google::protobuf::int32 service_id() const;
  void set_service_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:navigate.GetAccessReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::int32 service_id_;
  mutable int _cached_size_;
  friend struct protobuf_navigate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetAccessRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:navigate.GetAccessRsp) */ {
 public:
  GetAccessRsp();
  virtual ~GetAccessRsp();

  GetAccessRsp(const GetAccessRsp& from);

  inline GetAccessRsp& operator=(const GetAccessRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetAccessRsp(GetAccessRsp&& from) noexcept
    : GetAccessRsp() {
    *this = ::std::move(from);
  }

  inline GetAccessRsp& operator=(GetAccessRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAccessRsp& default_instance();

  static inline const GetAccessRsp* internal_default_instance() {
    return reinterpret_cast<const GetAccessRsp*>(
               &_GetAccessRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(GetAccessRsp* other);
  friend void swap(GetAccessRsp& a, GetAccessRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetAccessRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetAccessRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetAccessRsp& from);
  void MergeFrom(const GetAccessRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetAccessRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes access_key = 1;
  void clear_access_key();
  static const int kAccessKeyFieldNumber = 1;
  const ::std::string& access_key() const;
  void set_access_key(const ::std::string& value);
  #if LANG_CXX11
  void set_access_key(::std::string&& value);
  #endif
  void set_access_key(const char* value);
  void set_access_key(const void* value, size_t size);
  ::std::string* mutable_access_key();
  ::std::string* release_access_key();
  void set_allocated_access_key(::std::string* access_key);

  // bytes out_ip = 4;
  void clear_out_ip();
  static const int kOutIpFieldNumber = 4;
  const ::std::string& out_ip() const;
  void set_out_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_out_ip(::std::string&& value);
  #endif
  void set_out_ip(const char* value);
  void set_out_ip(const void* value, size_t size);
  ::std::string* mutable_out_ip();
  ::std::string* release_out_ip();
  void set_allocated_out_ip(::std::string* out_ip);

  // int32 service_id = 2;
  void clear_service_id();
  static const int kServiceIdFieldNumber = 2;
  ::google::protobuf::int32 service_id() const;
  void set_service_id(::google::protobuf::int32 value);

  // uint32 proc_id = 3;
  void clear_proc_id();
  static const int kProcIdFieldNumber = 3;
  ::google::protobuf::uint32 proc_id() const;
  void set_proc_id(::google::protobuf::uint32 value);

  // int32 out_port = 5;
  void clear_out_port();
  static const int kOutPortFieldNumber = 5;
  ::google::protobuf::int32 out_port() const;
  void set_out_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:navigate.GetAccessRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr access_key_;
  ::google::protobuf::internal::ArenaStringPtr out_ip_;
  ::google::protobuf::int32 service_id_;
  ::google::protobuf::uint32 proc_id_;
  ::google::protobuf::int32 out_port_;
  mutable int _cached_size_;
  friend struct protobuf_navigate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PutLoadReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:navigate.PutLoadReq) */ {
 public:
  PutLoadReq();
  virtual ~PutLoadReq();

  PutLoadReq(const PutLoadReq& from);

  inline PutLoadReq& operator=(const PutLoadReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PutLoadReq(PutLoadReq&& from) noexcept
    : PutLoadReq() {
    *this = ::std::move(from);
  }

  inline PutLoadReq& operator=(PutLoadReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PutLoadReq& default_instance();

  static inline const PutLoadReq* internal_default_instance() {
    return reinterpret_cast<const PutLoadReq*>(
               &_PutLoadReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(PutLoadReq* other);
  friend void swap(PutLoadReq& a, PutLoadReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PutLoadReq* New() const PROTOBUF_FINAL { return New(NULL); }

  PutLoadReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PutLoadReq& from);
  void MergeFrom(const PutLoadReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PutLoadReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 service_id = 1;
  void clear_service_id();
  static const int kServiceIdFieldNumber = 1;
  ::google::protobuf::int32 service_id() const;
  void set_service_id(::google::protobuf::int32 value);

  // uint32 proc_id = 2;
  void clear_proc_id();
  static const int kProcIdFieldNumber = 2;
  ::google::protobuf::uint32 proc_id() const;
  void set_proc_id(::google::protobuf::uint32 value);

  // int32 load_val = 3;
  void clear_load_val();
  static const int kLoadValFieldNumber = 3;
  ::google::protobuf::int32 load_val() const;
  void set_load_val(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:navigate.PutLoadReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 service_id_;
  ::google::protobuf::uint32 proc_id_;
  ::google::protobuf::int32 load_val_;
  mutable int _cached_size_;
  friend struct protobuf_navigate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PutLoadRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:navigate.PutLoadRsp) */ {
 public:
  PutLoadRsp();
  virtual ~PutLoadRsp();

  PutLoadRsp(const PutLoadRsp& from);

  inline PutLoadRsp& operator=(const PutLoadRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PutLoadRsp(PutLoadRsp&& from) noexcept
    : PutLoadRsp() {
    *this = ::std::move(from);
  }

  inline PutLoadRsp& operator=(PutLoadRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PutLoadRsp& default_instance();

  static inline const PutLoadRsp* internal_default_instance() {
    return reinterpret_cast<const PutLoadRsp*>(
               &_PutLoadRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(PutLoadRsp* other);
  friend void swap(PutLoadRsp& a, PutLoadRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PutLoadRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  PutLoadRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PutLoadRsp& from);
  void MergeFrom(const PutLoadRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PutLoadRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:navigate.PutLoadRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_navigate_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NavigateMsg

// .common.TestReq test_req = 1;
inline bool NavigateMsg::has_test_req() const {
  return choice_case() == kTestReq;
}
inline void NavigateMsg::set_has_test_req() {
  _oneof_case_[0] = kTestReq;
}
inline void NavigateMsg::clear_test_req() {
  if (has_test_req()) {
    delete choice_.test_req_;
    clear_has_choice();
  }
}
inline  const ::common::TestReq& NavigateMsg::test_req() const {
  // @@protoc_insertion_point(field_get:navigate.NavigateMsg.test_req)
  return has_test_req()
      ? *choice_.test_req_
      : ::common::TestReq::default_instance();
}
inline ::common::TestReq* NavigateMsg::mutable_test_req() {
  if (!has_test_req()) {
    clear_choice();
    set_has_test_req();
    choice_.test_req_ = new ::common::TestReq;
  }
  // @@protoc_insertion_point(field_mutable:navigate.NavigateMsg.test_req)
  return choice_.test_req_;
}
inline ::common::TestReq* NavigateMsg::release_test_req() {
  // @@protoc_insertion_point(field_release:navigate.NavigateMsg.test_req)
  if (has_test_req()) {
    clear_has_choice();
    ::common::TestReq* temp = choice_.test_req_;
    choice_.test_req_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void NavigateMsg::set_allocated_test_req(::common::TestReq* test_req) {
  clear_choice();
  if (test_req) {
    set_has_test_req();
    choice_.test_req_ = test_req;
  }
  // @@protoc_insertion_point(field_set_allocated:navigate.NavigateMsg.test_req)
}

// .common.TestRsp test_rsp = 2;
inline bool NavigateMsg::has_test_rsp() const {
  return choice_case() == kTestRsp;
}
inline void NavigateMsg::set_has_test_rsp() {
  _oneof_case_[0] = kTestRsp;
}
inline void NavigateMsg::clear_test_rsp() {
  if (has_test_rsp()) {
    delete choice_.test_rsp_;
    clear_has_choice();
  }
}
inline  const ::common::TestRsp& NavigateMsg::test_rsp() const {
  // @@protoc_insertion_point(field_get:navigate.NavigateMsg.test_rsp)
  return has_test_rsp()
      ? *choice_.test_rsp_
      : ::common::TestRsp::default_instance();
}
inline ::common::TestRsp* NavigateMsg::mutable_test_rsp() {
  if (!has_test_rsp()) {
    clear_choice();
    set_has_test_rsp();
    choice_.test_rsp_ = new ::common::TestRsp;
  }
  // @@protoc_insertion_point(field_mutable:navigate.NavigateMsg.test_rsp)
  return choice_.test_rsp_;
}
inline ::common::TestRsp* NavigateMsg::release_test_rsp() {
  // @@protoc_insertion_point(field_release:navigate.NavigateMsg.test_rsp)
  if (has_test_rsp()) {
    clear_has_choice();
    ::common::TestRsp* temp = choice_.test_rsp_;
    choice_.test_rsp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void NavigateMsg::set_allocated_test_rsp(::common::TestRsp* test_rsp) {
  clear_choice();
  if (test_rsp) {
    set_has_test_rsp();
    choice_.test_rsp_ = test_rsp;
  }
  // @@protoc_insertion_point(field_set_allocated:navigate.NavigateMsg.test_rsp)
}

// .navigate.GetAccessReq get_access_req = 3;
inline bool NavigateMsg::has_get_access_req() const {
  return choice_case() == kGetAccessReq;
}
inline void NavigateMsg::set_has_get_access_req() {
  _oneof_case_[0] = kGetAccessReq;
}
inline void NavigateMsg::clear_get_access_req() {
  if (has_get_access_req()) {
    delete choice_.get_access_req_;
    clear_has_choice();
  }
}
inline  const ::navigate::GetAccessReq& NavigateMsg::get_access_req() const {
  // @@protoc_insertion_point(field_get:navigate.NavigateMsg.get_access_req)
  return has_get_access_req()
      ? *choice_.get_access_req_
      : ::navigate::GetAccessReq::default_instance();
}
inline ::navigate::GetAccessReq* NavigateMsg::mutable_get_access_req() {
  if (!has_get_access_req()) {
    clear_choice();
    set_has_get_access_req();
    choice_.get_access_req_ = new ::navigate::GetAccessReq;
  }
  // @@protoc_insertion_point(field_mutable:navigate.NavigateMsg.get_access_req)
  return choice_.get_access_req_;
}
inline ::navigate::GetAccessReq* NavigateMsg::release_get_access_req() {
  // @@protoc_insertion_point(field_release:navigate.NavigateMsg.get_access_req)
  if (has_get_access_req()) {
    clear_has_choice();
    ::navigate::GetAccessReq* temp = choice_.get_access_req_;
    choice_.get_access_req_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void NavigateMsg::set_allocated_get_access_req(::navigate::GetAccessReq* get_access_req) {
  clear_choice();
  if (get_access_req) {
    set_has_get_access_req();
    choice_.get_access_req_ = get_access_req;
  }
  // @@protoc_insertion_point(field_set_allocated:navigate.NavigateMsg.get_access_req)
}

// .navigate.GetAccessRsp get_access_rsp = 4;
inline bool NavigateMsg::has_get_access_rsp() const {
  return choice_case() == kGetAccessRsp;
}
inline void NavigateMsg::set_has_get_access_rsp() {
  _oneof_case_[0] = kGetAccessRsp;
}
inline void NavigateMsg::clear_get_access_rsp() {
  if (has_get_access_rsp()) {
    delete choice_.get_access_rsp_;
    clear_has_choice();
  }
}
inline  const ::navigate::GetAccessRsp& NavigateMsg::get_access_rsp() const {
  // @@protoc_insertion_point(field_get:navigate.NavigateMsg.get_access_rsp)
  return has_get_access_rsp()
      ? *choice_.get_access_rsp_
      : ::navigate::GetAccessRsp::default_instance();
}
inline ::navigate::GetAccessRsp* NavigateMsg::mutable_get_access_rsp() {
  if (!has_get_access_rsp()) {
    clear_choice();
    set_has_get_access_rsp();
    choice_.get_access_rsp_ = new ::navigate::GetAccessRsp;
  }
  // @@protoc_insertion_point(field_mutable:navigate.NavigateMsg.get_access_rsp)
  return choice_.get_access_rsp_;
}
inline ::navigate::GetAccessRsp* NavigateMsg::release_get_access_rsp() {
  // @@protoc_insertion_point(field_release:navigate.NavigateMsg.get_access_rsp)
  if (has_get_access_rsp()) {
    clear_has_choice();
    ::navigate::GetAccessRsp* temp = choice_.get_access_rsp_;
    choice_.get_access_rsp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void NavigateMsg::set_allocated_get_access_rsp(::navigate::GetAccessRsp* get_access_rsp) {
  clear_choice();
  if (get_access_rsp) {
    set_has_get_access_rsp();
    choice_.get_access_rsp_ = get_access_rsp;
  }
  // @@protoc_insertion_point(field_set_allocated:navigate.NavigateMsg.get_access_rsp)
}

// .navigate.PutLoadReq put_load_req = 5;
inline bool NavigateMsg::has_put_load_req() const {
  return choice_case() == kPutLoadReq;
}
inline void NavigateMsg::set_has_put_load_req() {
  _oneof_case_[0] = kPutLoadReq;
}
inline void NavigateMsg::clear_put_load_req() {
  if (has_put_load_req()) {
    delete choice_.put_load_req_;
    clear_has_choice();
  }
}
inline  const ::navigate::PutLoadReq& NavigateMsg::put_load_req() const {
  // @@protoc_insertion_point(field_get:navigate.NavigateMsg.put_load_req)
  return has_put_load_req()
      ? *choice_.put_load_req_
      : ::navigate::PutLoadReq::default_instance();
}
inline ::navigate::PutLoadReq* NavigateMsg::mutable_put_load_req() {
  if (!has_put_load_req()) {
    clear_choice();
    set_has_put_load_req();
    choice_.put_load_req_ = new ::navigate::PutLoadReq;
  }
  // @@protoc_insertion_point(field_mutable:navigate.NavigateMsg.put_load_req)
  return choice_.put_load_req_;
}
inline ::navigate::PutLoadReq* NavigateMsg::release_put_load_req() {
  // @@protoc_insertion_point(field_release:navigate.NavigateMsg.put_load_req)
  if (has_put_load_req()) {
    clear_has_choice();
    ::navigate::PutLoadReq* temp = choice_.put_load_req_;
    choice_.put_load_req_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void NavigateMsg::set_allocated_put_load_req(::navigate::PutLoadReq* put_load_req) {
  clear_choice();
  if (put_load_req) {
    set_has_put_load_req();
    choice_.put_load_req_ = put_load_req;
  }
  // @@protoc_insertion_point(field_set_allocated:navigate.NavigateMsg.put_load_req)
}

// .navigate.PutLoadRsp put_load_rsp = 6;
inline bool NavigateMsg::has_put_load_rsp() const {
  return choice_case() == kPutLoadRsp;
}
inline void NavigateMsg::set_has_put_load_rsp() {
  _oneof_case_[0] = kPutLoadRsp;
}
inline void NavigateMsg::clear_put_load_rsp() {
  if (has_put_load_rsp()) {
    delete choice_.put_load_rsp_;
    clear_has_choice();
  }
}
inline  const ::navigate::PutLoadRsp& NavigateMsg::put_load_rsp() const {
  // @@protoc_insertion_point(field_get:navigate.NavigateMsg.put_load_rsp)
  return has_put_load_rsp()
      ? *choice_.put_load_rsp_
      : ::navigate::PutLoadRsp::default_instance();
}
inline ::navigate::PutLoadRsp* NavigateMsg::mutable_put_load_rsp() {
  if (!has_put_load_rsp()) {
    clear_choice();
    set_has_put_load_rsp();
    choice_.put_load_rsp_ = new ::navigate::PutLoadRsp;
  }
  // @@protoc_insertion_point(field_mutable:navigate.NavigateMsg.put_load_rsp)
  return choice_.put_load_rsp_;
}
inline ::navigate::PutLoadRsp* NavigateMsg::release_put_load_rsp() {
  // @@protoc_insertion_point(field_release:navigate.NavigateMsg.put_load_rsp)
  if (has_put_load_rsp()) {
    clear_has_choice();
    ::navigate::PutLoadRsp* temp = choice_.put_load_rsp_;
    choice_.put_load_rsp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void NavigateMsg::set_allocated_put_load_rsp(::navigate::PutLoadRsp* put_load_rsp) {
  clear_choice();
  if (put_load_rsp) {
    set_has_put_load_rsp();
    choice_.put_load_rsp_ = put_load_rsp;
  }
  // @@protoc_insertion_point(field_set_allocated:navigate.NavigateMsg.put_load_rsp)
}

inline bool NavigateMsg::has_choice() const {
  return choice_case() != CHOICE_NOT_SET;
}
inline void NavigateMsg::clear_has_choice() {
  _oneof_case_[0] = CHOICE_NOT_SET;
}
inline NavigateMsg::ChoiceCase NavigateMsg::choice_case() const {
  return NavigateMsg::ChoiceCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GetAccessReq

// int32 service_id = 1;
inline void GetAccessReq::clear_service_id() {
  service_id_ = 0;
}
inline ::google::protobuf::int32 GetAccessReq::service_id() const {
  // @@protoc_insertion_point(field_get:navigate.GetAccessReq.service_id)
  return service_id_;
}
inline void GetAccessReq::set_service_id(::google::protobuf::int32 value) {
  
  service_id_ = value;
  // @@protoc_insertion_point(field_set:navigate.GetAccessReq.service_id)
}

// uint64 user_id = 2;
inline void GetAccessReq::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GetAccessReq::user_id() const {
  // @@protoc_insertion_point(field_get:navigate.GetAccessReq.user_id)
  return user_id_;
}
inline void GetAccessReq::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:navigate.GetAccessReq.user_id)
}

// -------------------------------------------------------------------

// GetAccessRsp

// bytes access_key = 1;
inline void GetAccessRsp::clear_access_key() {
  access_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetAccessRsp::access_key() const {
  // @@protoc_insertion_point(field_get:navigate.GetAccessRsp.access_key)
  return access_key_.GetNoArena();
}
inline void GetAccessRsp::set_access_key(const ::std::string& value) {
  
  access_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:navigate.GetAccessRsp.access_key)
}
#if LANG_CXX11
inline void GetAccessRsp::set_access_key(::std::string&& value) {
  
  access_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:navigate.GetAccessRsp.access_key)
}
#endif
inline void GetAccessRsp::set_access_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  access_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:navigate.GetAccessRsp.access_key)
}
inline void GetAccessRsp::set_access_key(const void* value, size_t size) {
  
  access_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:navigate.GetAccessRsp.access_key)
}
inline ::std::string* GetAccessRsp::mutable_access_key() {
  
  // @@protoc_insertion_point(field_mutable:navigate.GetAccessRsp.access_key)
  return access_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetAccessRsp::release_access_key() {
  // @@protoc_insertion_point(field_release:navigate.GetAccessRsp.access_key)
  
  return access_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetAccessRsp::set_allocated_access_key(::std::string* access_key) {
  if (access_key != NULL) {
    
  } else {
    
  }
  access_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), access_key);
  // @@protoc_insertion_point(field_set_allocated:navigate.GetAccessRsp.access_key)
}

// int32 service_id = 2;
inline void GetAccessRsp::clear_service_id() {
  service_id_ = 0;
}
inline ::google::protobuf::int32 GetAccessRsp::service_id() const {
  // @@protoc_insertion_point(field_get:navigate.GetAccessRsp.service_id)
  return service_id_;
}
inline void GetAccessRsp::set_service_id(::google::protobuf::int32 value) {
  
  service_id_ = value;
  // @@protoc_insertion_point(field_set:navigate.GetAccessRsp.service_id)
}

// uint32 proc_id = 3;
inline void GetAccessRsp::clear_proc_id() {
  proc_id_ = 0u;
}
inline ::google::protobuf::uint32 GetAccessRsp::proc_id() const {
  // @@protoc_insertion_point(field_get:navigate.GetAccessRsp.proc_id)
  return proc_id_;
}
inline void GetAccessRsp::set_proc_id(::google::protobuf::uint32 value) {
  
  proc_id_ = value;
  // @@protoc_insertion_point(field_set:navigate.GetAccessRsp.proc_id)
}

// bytes out_ip = 4;
inline void GetAccessRsp::clear_out_ip() {
  out_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetAccessRsp::out_ip() const {
  // @@protoc_insertion_point(field_get:navigate.GetAccessRsp.out_ip)
  return out_ip_.GetNoArena();
}
inline void GetAccessRsp::set_out_ip(const ::std::string& value) {
  
  out_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:navigate.GetAccessRsp.out_ip)
}
#if LANG_CXX11
inline void GetAccessRsp::set_out_ip(::std::string&& value) {
  
  out_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:navigate.GetAccessRsp.out_ip)
}
#endif
inline void GetAccessRsp::set_out_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  out_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:navigate.GetAccessRsp.out_ip)
}
inline void GetAccessRsp::set_out_ip(const void* value, size_t size) {
  
  out_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:navigate.GetAccessRsp.out_ip)
}
inline ::std::string* GetAccessRsp::mutable_out_ip() {
  
  // @@protoc_insertion_point(field_mutable:navigate.GetAccessRsp.out_ip)
  return out_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetAccessRsp::release_out_ip() {
  // @@protoc_insertion_point(field_release:navigate.GetAccessRsp.out_ip)
  
  return out_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetAccessRsp::set_allocated_out_ip(::std::string* out_ip) {
  if (out_ip != NULL) {
    
  } else {
    
  }
  out_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), out_ip);
  // @@protoc_insertion_point(field_set_allocated:navigate.GetAccessRsp.out_ip)
}

// int32 out_port = 5;
inline void GetAccessRsp::clear_out_port() {
  out_port_ = 0;
}
inline ::google::protobuf::int32 GetAccessRsp::out_port() const {
  // @@protoc_insertion_point(field_get:navigate.GetAccessRsp.out_port)
  return out_port_;
}
inline void GetAccessRsp::set_out_port(::google::protobuf::int32 value) {
  
  out_port_ = value;
  // @@protoc_insertion_point(field_set:navigate.GetAccessRsp.out_port)
}

// -------------------------------------------------------------------

// PutLoadReq

// int32 service_id = 1;
inline void PutLoadReq::clear_service_id() {
  service_id_ = 0;
}
inline ::google::protobuf::int32 PutLoadReq::service_id() const {
  // @@protoc_insertion_point(field_get:navigate.PutLoadReq.service_id)
  return service_id_;
}
inline void PutLoadReq::set_service_id(::google::protobuf::int32 value) {
  
  service_id_ = value;
  // @@protoc_insertion_point(field_set:navigate.PutLoadReq.service_id)
}

// uint32 proc_id = 2;
inline void PutLoadReq::clear_proc_id() {
  proc_id_ = 0u;
}
inline ::google::protobuf::uint32 PutLoadReq::proc_id() const {
  // @@protoc_insertion_point(field_get:navigate.PutLoadReq.proc_id)
  return proc_id_;
}
inline void PutLoadReq::set_proc_id(::google::protobuf::uint32 value) {
  
  proc_id_ = value;
  // @@protoc_insertion_point(field_set:navigate.PutLoadReq.proc_id)
}

// int32 load_val = 3;
inline void PutLoadReq::clear_load_val() {
  load_val_ = 0;
}
inline ::google::protobuf::int32 PutLoadReq::load_val() const {
  // @@protoc_insertion_point(field_get:navigate.PutLoadReq.load_val)
  return load_val_;
}
inline void PutLoadReq::set_load_val(::google::protobuf::int32 value) {
  
  load_val_ = value;
  // @@protoc_insertion_point(field_set:navigate.PutLoadReq.load_val)
}

// -------------------------------------------------------------------

// PutLoadRsp

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace navigate

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::navigate::ErrorCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::navigate::ErrorCode>() {
  return ::navigate::ErrorCode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_navigate_2eproto__INCLUDED
