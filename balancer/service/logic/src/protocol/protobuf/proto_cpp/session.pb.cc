// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: session.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "session.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace session {
class SessionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Session>
     _instance;
} _Session_default_instance_;
class SessionListDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SessionList>
     _instance;
} _SessionList_default_instance_;
class ConnKeyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ConnKey>
     _instance;
} _ConnKey_default_instance_;
class TestReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TestReq>
     _instance;
} _TestReq_default_instance_;
class TestRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TestRsp>
     _instance;
} _TestRsp_default_instance_;
class QuerySessionListReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QuerySessionListReq>
     _instance;
} _QuerySessionListReq_default_instance_;
class QuerySessionListRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QuerySessionListRsp>
     _instance;
} _QuerySessionListRsp_default_instance_;
class CreateSessionReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CreateSessionReq>
     _instance;
} _CreateSessionReq_default_instance_;
class CreateSessionRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CreateSessionRsp>
     _instance;
} _CreateSessionRsp_default_instance_;
class DelSessionReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DelSessionReq>
     _instance;
} _DelSessionReq_default_instance_;
class DelSessionRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DelSessionRsp>
     _instance;
} _DelSessionRsp_default_instance_;
class SessionMsgDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SessionMsg>
     _instance;
  const ::session::TestReq* test_req_;
  const ::session::TestRsp* test_rsp_;
  const ::session::QuerySessionListReq* query_session_list_req_;
  const ::session::QuerySessionListRsp* query_session_list_rsp_;
  const ::session::CreateSessionReq* create_session_req_;
  const ::session::CreateSessionRsp* create_session_rsp_;
  const ::session::DelSessionReq* del_session_req_;
  const ::session::DelSessionRsp* del_session_rsp_;
} _SessionMsg_default_instance_;

namespace protobuf_session_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[12];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, is_online_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, conn_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, proc_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, in_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, in_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, create_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, app_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, dev_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionList, list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnKey, in_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnKey, in_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnKey, conn_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestReq, service_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestRsp, service_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySessionListReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySessionListReq, user_id_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySessionListRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySessionListRsp, session_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionReq, session_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelSessionReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelSessionReq, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelSessionReq, conn_key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelSessionRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionMsg, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(SessionMsgDefaultTypeInternal, test_req_),
  offsetof(SessionMsgDefaultTypeInternal, test_rsp_),
  offsetof(SessionMsgDefaultTypeInternal, query_session_list_req_),
  offsetof(SessionMsgDefaultTypeInternal, query_session_list_rsp_),
  offsetof(SessionMsgDefaultTypeInternal, create_session_req_),
  offsetof(SessionMsgDefaultTypeInternal, create_session_rsp_),
  offsetof(SessionMsgDefaultTypeInternal, del_session_req_),
  offsetof(SessionMsgDefaultTypeInternal, del_session_rsp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionMsg, choice_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(Session)},
  { 16, -1, sizeof(SessionList)},
  { 22, -1, sizeof(ConnKey)},
  { 30, -1, sizeof(TestReq)},
  { 36, -1, sizeof(TestRsp)},
  { 42, -1, sizeof(QuerySessionListReq)},
  { 48, -1, sizeof(QuerySessionListRsp)},
  { 54, -1, sizeof(CreateSessionReq)},
  { 60, -1, sizeof(CreateSessionRsp)},
  { 65, -1, sizeof(DelSessionReq)},
  { 72, -1, sizeof(DelSessionRsp)},
  { 77, -1, sizeof(SessionMsg)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Session_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SessionList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConnKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TestReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TestRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QuerySessionListReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QuerySessionListRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateSessionReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateSessionRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DelSessionReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DelSessionRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SessionMsg_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "session.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 12);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::common::protobuf_common_2eproto::InitDefaults();
  _Session_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Session_default_instance_);_SessionList_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SessionList_default_instance_);_ConnKey_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ConnKey_default_instance_);_TestReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TestReq_default_instance_);_TestRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TestRsp_default_instance_);_QuerySessionListReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QuerySessionListReq_default_instance_);_QuerySessionListRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QuerySessionListRsp_default_instance_);_CreateSessionReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CreateSessionReq_default_instance_);_CreateSessionRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CreateSessionRsp_default_instance_);_DelSessionReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DelSessionReq_default_instance_);_DelSessionRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DelSessionRsp_default_instance_);_SessionMsg_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SessionMsg_default_instance_);_QuerySessionListReq_default_instance_._instance.get_mutable()->user_id_list_ = const_cast< ::common::UserIdList*>(
      ::common::UserIdList::internal_default_instance());
  _QuerySessionListRsp_default_instance_._instance.get_mutable()->session_list_ = const_cast< ::session::SessionList*>(
      ::session::SessionList::internal_default_instance());
  _CreateSessionReq_default_instance_._instance.get_mutable()->session_ = const_cast< ::session::Session*>(
      ::session::Session::internal_default_instance());
  _DelSessionReq_default_instance_._instance.get_mutable()->conn_key_ = const_cast< ::session::ConnKey*>(
      ::session::ConnKey::internal_default_instance());
  _SessionMsg_default_instance_.test_req_ = const_cast< ::session::TestReq*>(
      ::session::TestReq::internal_default_instance());
  _SessionMsg_default_instance_.test_rsp_ = const_cast< ::session::TestRsp*>(
      ::session::TestRsp::internal_default_instance());
  _SessionMsg_default_instance_.query_session_list_req_ = const_cast< ::session::QuerySessionListReq*>(
      ::session::QuerySessionListReq::internal_default_instance());
  _SessionMsg_default_instance_.query_session_list_rsp_ = const_cast< ::session::QuerySessionListRsp*>(
      ::session::QuerySessionListRsp::internal_default_instance());
  _SessionMsg_default_instance_.create_session_req_ = const_cast< ::session::CreateSessionReq*>(
      ::session::CreateSessionReq::internal_default_instance());
  _SessionMsg_default_instance_.create_session_rsp_ = const_cast< ::session::CreateSessionRsp*>(
      ::session::CreateSessionRsp::internal_default_instance());
  _SessionMsg_default_instance_.del_session_req_ = const_cast< ::session::DelSessionReq*>(
      ::session::DelSessionReq::internal_default_instance());
  _SessionMsg_default_instance_.del_session_rsp_ = const_cast< ::session::DelSessionRsp*>(
      ::session::DelSessionRsp::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rsession.proto\022\007session\032\014common.proto\"\314"
      "\001\n\007Session\022\021\n\tis_online\030\001 \001(\010\022\017\n\007user_id"
      "\030\002 \001(\004\022\017\n\007conn_id\030\003 \001(\004\022\017\n\007proc_id\030\004 \001(\r"
      "\022\r\n\005in_ip\030\005 \001(\014\022\017\n\007in_port\030\006 \001(\005\022\023\n\013crea"
      "te_time\030\007 \001(\r\022\017\n\007version\030\010 \001(\005\022\016\n\006app_id"
      "\030\t \001(\r\022\023\n\013app_version\030\n \001(\r\022\020\n\010dev_type\030"
      "\013 \001(\r\"-\n\013SessionList\022\036\n\004list\030\001 \003(\0132\020.ses"
      "sion.Session\":\n\007ConnKey\022\r\n\005in_ip\030\001 \001(\014\022\017"
      "\n\007in_port\030\002 \001(\005\022\017\n\007conn_id\030\003 \001(\004\"\035\n\007Test"
      "Req\022\022\n\nservice_id\030\001 \001(\005\"\037\n\007TestRsp\022\024\n\014se"
      "rvice_name\030\001 \001(\014\"\?\n\023QuerySessionListReq\022"
      "(\n\014user_id_list\030\001 \001(\0132\022.common.UserIdLis"
      "t\"A\n\023QuerySessionListRsp\022*\n\014session_list"
      "\030\001 \001(\0132\024.session.SessionList\"5\n\020CreateSe"
      "ssionReq\022!\n\007session\030\001 \001(\0132\020.session.Sess"
      "ion\"\022\n\020CreateSessionRsp\"D\n\rDelSessionReq"
      "\022\017\n\007user_id\030\001 \001(\004\022\"\n\010conn_key\030\002 \001(\0132\020.se"
      "ssion.ConnKey\"\017\n\rDelSessionRsp\"\272\003\n\nSessi"
      "onMsg\022$\n\010test_req\030\001 \001(\0132\020.session.TestRe"
      "qH\000\022$\n\010test_rsp\030\002 \001(\0132\020.session.TestRspH"
      "\000\022>\n\026query_session_list_req\030\003 \001(\0132\034.sess"
      "ion.QuerySessionListReqH\000\022>\n\026query_sessi"
      "on_list_rsp\030\004 \001(\0132\034.session.QuerySession"
      "ListRspH\000\0227\n\022create_session_req\030\005 \001(\0132\031."
      "session.CreateSessionReqH\000\0227\n\022create_ses"
      "sion_rsp\030\006 \001(\0132\031.session.CreateSessionRs"
      "pH\000\0221\n\017del_session_req\030\007 \001(\0132\026.session.D"
      "elSessionReqH\000\0221\n\017del_session_rsp\030\010 \001(\0132"
      "\026.session.DelSessionRspH\000B\010\n\006choiceb\006pro"
      "to3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1163);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "session.proto", &protobuf_RegisterTypes);
  ::common::protobuf_common_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_session_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Session::kIsOnlineFieldNumber;
const int Session::kUserIdFieldNumber;
const int Session::kConnIdFieldNumber;
const int Session::kProcIdFieldNumber;
const int Session::kInIpFieldNumber;
const int Session::kInPortFieldNumber;
const int Session::kCreateTimeFieldNumber;
const int Session::kVersionFieldNumber;
const int Session::kAppIdFieldNumber;
const int Session::kAppVersionFieldNumber;
const int Session::kDevTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Session::Session()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_session_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:session.Session)
}
Session::Session(const Session& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  in_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.in_ip().size() > 0) {
    in_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.in_ip_);
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dev_type_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(dev_type_));
  // @@protoc_insertion_point(copy_constructor:session.Session)
}

void Session::SharedCtor() {
  in_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dev_type_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(dev_type_));
  _cached_size_ = 0;
}

Session::~Session() {
  // @@protoc_insertion_point(destructor:session.Session)
  SharedDtor();
}

void Session::SharedDtor() {
  in_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Session::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Session::descriptor() {
  protobuf_session_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_session_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Session& Session::default_instance() {
  protobuf_session_2eproto::InitDefaults();
  return *internal_default_instance();
}

Session* Session::New(::google::protobuf::Arena* arena) const {
  Session* n = new Session;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Session::Clear() {
// @@protoc_insertion_point(message_clear_start:session.Session)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  in_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dev_type_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(dev_type_));
  _internal_metadata_.Clear();
}

bool Session::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:session.Session)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_online = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 user_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 conn_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &conn_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 proc_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proc_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes in_ip = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_in_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 in_port = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &in_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 create_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 version = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 app_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 app_version = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dev_type = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dev_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:session.Session)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:session.Session)
  return false;
#undef DO_
}

void Session::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:session.Session)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_online = 1;
  if (this->is_online() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_online(), output);
  }

  // uint64 user_id = 2;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // uint64 conn_id = 3;
  if (this->conn_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->conn_id(), output);
  }

  // uint32 proc_id = 4;
  if (this->proc_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->proc_id(), output);
  }

  // bytes in_ip = 5;
  if (this->in_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->in_ip(), output);
  }

  // int32 in_port = 6;
  if (this->in_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->in_port(), output);
  }

  // uint32 create_time = 7;
  if (this->create_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->create_time(), output);
  }

  // int32 version = 8;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->version(), output);
  }

  // uint32 app_id = 9;
  if (this->app_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->app_id(), output);
  }

  // uint32 app_version = 10;
  if (this->app_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->app_version(), output);
  }

  // uint32 dev_type = 11;
  if (this->dev_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->dev_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:session.Session)
}

::google::protobuf::uint8* Session::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:session.Session)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_online = 1;
  if (this->is_online() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_online(), target);
  }

  // uint64 user_id = 2;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // uint64 conn_id = 3;
  if (this->conn_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->conn_id(), target);
  }

  // uint32 proc_id = 4;
  if (this->proc_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->proc_id(), target);
  }

  // bytes in_ip = 5;
  if (this->in_ip().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->in_ip(), target);
  }

  // int32 in_port = 6;
  if (this->in_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->in_port(), target);
  }

  // uint32 create_time = 7;
  if (this->create_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->create_time(), target);
  }

  // int32 version = 8;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->version(), target);
  }

  // uint32 app_id = 9;
  if (this->app_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->app_id(), target);
  }

  // uint32 app_version = 10;
  if (this->app_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->app_version(), target);
  }

  // uint32 dev_type = 11;
  if (this->dev_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->dev_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:session.Session)
  return target;
}

size_t Session::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:session.Session)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes in_ip = 5;
  if (this->in_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->in_ip());
  }

  // uint64 user_id = 2;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  // bool is_online = 1;
  if (this->is_online() != 0) {
    total_size += 1 + 1;
  }

  // uint32 proc_id = 4;
  if (this->proc_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->proc_id());
  }

  // uint64 conn_id = 3;
  if (this->conn_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->conn_id());
  }

  // int32 in_port = 6;
  if (this->in_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->in_port());
  }

  // uint32 create_time = 7;
  if (this->create_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->create_time());
  }

  // int32 version = 8;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  // uint32 app_id = 9;
  if (this->app_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->app_id());
  }

  // uint32 app_version = 10;
  if (this->app_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->app_version());
  }

  // uint32 dev_type = 11;
  if (this->dev_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dev_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Session::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:session.Session)
  GOOGLE_DCHECK_NE(&from, this);
  const Session* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Session>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:session.Session)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:session.Session)
    MergeFrom(*source);
  }
}

void Session::MergeFrom(const Session& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:session.Session)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.in_ip().size() > 0) {

    in_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.in_ip_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.is_online() != 0) {
    set_is_online(from.is_online());
  }
  if (from.proc_id() != 0) {
    set_proc_id(from.proc_id());
  }
  if (from.conn_id() != 0) {
    set_conn_id(from.conn_id());
  }
  if (from.in_port() != 0) {
    set_in_port(from.in_port());
  }
  if (from.create_time() != 0) {
    set_create_time(from.create_time());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.app_id() != 0) {
    set_app_id(from.app_id());
  }
  if (from.app_version() != 0) {
    set_app_version(from.app_version());
  }
  if (from.dev_type() != 0) {
    set_dev_type(from.dev_type());
  }
}

void Session::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:session.Session)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Session::CopyFrom(const Session& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:session.Session)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Session::IsInitialized() const {
  return true;
}

void Session::Swap(Session* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Session::InternalSwap(Session* other) {
  using std::swap;
  in_ip_.Swap(&other->in_ip_);
  swap(user_id_, other->user_id_);
  swap(is_online_, other->is_online_);
  swap(proc_id_, other->proc_id_);
  swap(conn_id_, other->conn_id_);
  swap(in_port_, other->in_port_);
  swap(create_time_, other->create_time_);
  swap(version_, other->version_);
  swap(app_id_, other->app_id_);
  swap(app_version_, other->app_version_);
  swap(dev_type_, other->dev_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Session::GetMetadata() const {
  protobuf_session_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_session_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Session

// bool is_online = 1;
void Session::clear_is_online() {
  is_online_ = false;
}
bool Session::is_online() const {
  // @@protoc_insertion_point(field_get:session.Session.is_online)
  return is_online_;
}
void Session::set_is_online(bool value) {
  
  is_online_ = value;
  // @@protoc_insertion_point(field_set:session.Session.is_online)
}

// uint64 user_id = 2;
void Session::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Session::user_id() const {
  // @@protoc_insertion_point(field_get:session.Session.user_id)
  return user_id_;
}
void Session::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:session.Session.user_id)
}

// uint64 conn_id = 3;
void Session::clear_conn_id() {
  conn_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Session::conn_id() const {
  // @@protoc_insertion_point(field_get:session.Session.conn_id)
  return conn_id_;
}
void Session::set_conn_id(::google::protobuf::uint64 value) {
  
  conn_id_ = value;
  // @@protoc_insertion_point(field_set:session.Session.conn_id)
}

// uint32 proc_id = 4;
void Session::clear_proc_id() {
  proc_id_ = 0u;
}
::google::protobuf::uint32 Session::proc_id() const {
  // @@protoc_insertion_point(field_get:session.Session.proc_id)
  return proc_id_;
}
void Session::set_proc_id(::google::protobuf::uint32 value) {
  
  proc_id_ = value;
  // @@protoc_insertion_point(field_set:session.Session.proc_id)
}

// bytes in_ip = 5;
void Session::clear_in_ip() {
  in_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Session::in_ip() const {
  // @@protoc_insertion_point(field_get:session.Session.in_ip)
  return in_ip_.GetNoArena();
}
void Session::set_in_ip(const ::std::string& value) {
  
  in_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:session.Session.in_ip)
}
#if LANG_CXX11
void Session::set_in_ip(::std::string&& value) {
  
  in_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:session.Session.in_ip)
}
#endif
void Session::set_in_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  in_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:session.Session.in_ip)
}
void Session::set_in_ip(const void* value, size_t size) {
  
  in_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:session.Session.in_ip)
}
::std::string* Session::mutable_in_ip() {
  
  // @@protoc_insertion_point(field_mutable:session.Session.in_ip)
  return in_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Session::release_in_ip() {
  // @@protoc_insertion_point(field_release:session.Session.in_ip)
  
  return in_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Session::set_allocated_in_ip(::std::string* in_ip) {
  if (in_ip != NULL) {
    
  } else {
    
  }
  in_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), in_ip);
  // @@protoc_insertion_point(field_set_allocated:session.Session.in_ip)
}

// int32 in_port = 6;
void Session::clear_in_port() {
  in_port_ = 0;
}
::google::protobuf::int32 Session::in_port() const {
  // @@protoc_insertion_point(field_get:session.Session.in_port)
  return in_port_;
}
void Session::set_in_port(::google::protobuf::int32 value) {
  
  in_port_ = value;
  // @@protoc_insertion_point(field_set:session.Session.in_port)
}

// uint32 create_time = 7;
void Session::clear_create_time() {
  create_time_ = 0u;
}
::google::protobuf::uint32 Session::create_time() const {
  // @@protoc_insertion_point(field_get:session.Session.create_time)
  return create_time_;
}
void Session::set_create_time(::google::protobuf::uint32 value) {
  
  create_time_ = value;
  // @@protoc_insertion_point(field_set:session.Session.create_time)
}

// int32 version = 8;
void Session::clear_version() {
  version_ = 0;
}
::google::protobuf::int32 Session::version() const {
  // @@protoc_insertion_point(field_get:session.Session.version)
  return version_;
}
void Session::set_version(::google::protobuf::int32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:session.Session.version)
}

// uint32 app_id = 9;
void Session::clear_app_id() {
  app_id_ = 0u;
}
::google::protobuf::uint32 Session::app_id() const {
  // @@protoc_insertion_point(field_get:session.Session.app_id)
  return app_id_;
}
void Session::set_app_id(::google::protobuf::uint32 value) {
  
  app_id_ = value;
  // @@protoc_insertion_point(field_set:session.Session.app_id)
}

// uint32 app_version = 10;
void Session::clear_app_version() {
  app_version_ = 0u;
}
::google::protobuf::uint32 Session::app_version() const {
  // @@protoc_insertion_point(field_get:session.Session.app_version)
  return app_version_;
}
void Session::set_app_version(::google::protobuf::uint32 value) {
  
  app_version_ = value;
  // @@protoc_insertion_point(field_set:session.Session.app_version)
}

// uint32 dev_type = 11;
void Session::clear_dev_type() {
  dev_type_ = 0u;
}
::google::protobuf::uint32 Session::dev_type() const {
  // @@protoc_insertion_point(field_get:session.Session.dev_type)
  return dev_type_;
}
void Session::set_dev_type(::google::protobuf::uint32 value) {
  
  dev_type_ = value;
  // @@protoc_insertion_point(field_set:session.Session.dev_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionList::SessionList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_session_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:session.SessionList)
}
SessionList::SessionList(const SessionList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      list_(from.list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:session.SessionList)
}

void SessionList::SharedCtor() {
  _cached_size_ = 0;
}

SessionList::~SessionList() {
  // @@protoc_insertion_point(destructor:session.SessionList)
  SharedDtor();
}

void SessionList::SharedDtor() {
}

void SessionList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionList::descriptor() {
  protobuf_session_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_session_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SessionList& SessionList::default_instance() {
  protobuf_session_2eproto::InitDefaults();
  return *internal_default_instance();
}

SessionList* SessionList::New(::google::protobuf::Arena* arena) const {
  SessionList* n = new SessionList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SessionList::Clear() {
// @@protoc_insertion_point(message_clear_start:session.SessionList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear();
}

bool SessionList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:session.SessionList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .session.Session list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:session.SessionList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:session.SessionList)
  return false;
#undef DO_
}

void SessionList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:session.SessionList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .session.Session list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:session.SessionList)
}

::google::protobuf::uint8* SessionList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:session.SessionList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .session.Session list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:session.SessionList)
  return target;
}

size_t SessionList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:session.SessionList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .session.Session list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:session.SessionList)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SessionList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:session.SessionList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:session.SessionList)
    MergeFrom(*source);
  }
}

void SessionList::MergeFrom(const SessionList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:session.SessionList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void SessionList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:session.SessionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionList::CopyFrom(const SessionList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:session.SessionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionList::IsInitialized() const {
  return true;
}

void SessionList::Swap(SessionList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SessionList::InternalSwap(SessionList* other) {
  using std::swap;
  list_.InternalSwap(&other->list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SessionList::GetMetadata() const {
  protobuf_session_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_session_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SessionList

// repeated .session.Session list = 1;
int SessionList::list_size() const {
  return list_.size();
}
void SessionList::clear_list() {
  list_.Clear();
}
const ::session::Session& SessionList::list(int index) const {
  // @@protoc_insertion_point(field_get:session.SessionList.list)
  return list_.Get(index);
}
::session::Session* SessionList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:session.SessionList.list)
  return list_.Mutable(index);
}
::session::Session* SessionList::add_list() {
  // @@protoc_insertion_point(field_add:session.SessionList.list)
  return list_.Add();
}
::google::protobuf::RepeatedPtrField< ::session::Session >*
SessionList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:session.SessionList.list)
  return &list_;
}
const ::google::protobuf::RepeatedPtrField< ::session::Session >&
SessionList::list() const {
  // @@protoc_insertion_point(field_list:session.SessionList.list)
  return list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConnKey::kInIpFieldNumber;
const int ConnKey::kInPortFieldNumber;
const int ConnKey::kConnIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConnKey::ConnKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_session_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:session.ConnKey)
}
ConnKey::ConnKey(const ConnKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  in_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.in_ip().size() > 0) {
    in_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.in_ip_);
  }
  ::memcpy(&conn_id_, &from.conn_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&in_port_) -
    reinterpret_cast<char*>(&conn_id_)) + sizeof(in_port_));
  // @@protoc_insertion_point(copy_constructor:session.ConnKey)
}

void ConnKey::SharedCtor() {
  in_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&conn_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&in_port_) -
      reinterpret_cast<char*>(&conn_id_)) + sizeof(in_port_));
  _cached_size_ = 0;
}

ConnKey::~ConnKey() {
  // @@protoc_insertion_point(destructor:session.ConnKey)
  SharedDtor();
}

void ConnKey::SharedDtor() {
  in_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConnKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnKey::descriptor() {
  protobuf_session_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_session_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConnKey& ConnKey::default_instance() {
  protobuf_session_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConnKey* ConnKey::New(::google::protobuf::Arena* arena) const {
  ConnKey* n = new ConnKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConnKey::Clear() {
// @@protoc_insertion_point(message_clear_start:session.ConnKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  in_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&conn_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&in_port_) -
      reinterpret_cast<char*>(&conn_id_)) + sizeof(in_port_));
  _internal_metadata_.Clear();
}

bool ConnKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:session.ConnKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes in_ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_in_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 in_port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &in_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 conn_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &conn_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:session.ConnKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:session.ConnKey)
  return false;
#undef DO_
}

void ConnKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:session.ConnKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes in_ip = 1;
  if (this->in_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->in_ip(), output);
  }

  // int32 in_port = 2;
  if (this->in_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->in_port(), output);
  }

  // uint64 conn_id = 3;
  if (this->conn_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->conn_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:session.ConnKey)
}

::google::protobuf::uint8* ConnKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:session.ConnKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes in_ip = 1;
  if (this->in_ip().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->in_ip(), target);
  }

  // int32 in_port = 2;
  if (this->in_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->in_port(), target);
  }

  // uint64 conn_id = 3;
  if (this->conn_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->conn_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:session.ConnKey)
  return target;
}

size_t ConnKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:session.ConnKey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes in_ip = 1;
  if (this->in_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->in_ip());
  }

  // uint64 conn_id = 3;
  if (this->conn_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->conn_id());
  }

  // int32 in_port = 2;
  if (this->in_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->in_port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:session.ConnKey)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConnKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:session.ConnKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:session.ConnKey)
    MergeFrom(*source);
  }
}

void ConnKey::MergeFrom(const ConnKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:session.ConnKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.in_ip().size() > 0) {

    in_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.in_ip_);
  }
  if (from.conn_id() != 0) {
    set_conn_id(from.conn_id());
  }
  if (from.in_port() != 0) {
    set_in_port(from.in_port());
  }
}

void ConnKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:session.ConnKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnKey::CopyFrom(const ConnKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:session.ConnKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnKey::IsInitialized() const {
  return true;
}

void ConnKey::Swap(ConnKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConnKey::InternalSwap(ConnKey* other) {
  using std::swap;
  in_ip_.Swap(&other->in_ip_);
  swap(conn_id_, other->conn_id_);
  swap(in_port_, other->in_port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConnKey::GetMetadata() const {
  protobuf_session_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_session_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConnKey

// bytes in_ip = 1;
void ConnKey::clear_in_ip() {
  in_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ConnKey::in_ip() const {
  // @@protoc_insertion_point(field_get:session.ConnKey.in_ip)
  return in_ip_.GetNoArena();
}
void ConnKey::set_in_ip(const ::std::string& value) {
  
  in_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:session.ConnKey.in_ip)
}
#if LANG_CXX11
void ConnKey::set_in_ip(::std::string&& value) {
  
  in_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:session.ConnKey.in_ip)
}
#endif
void ConnKey::set_in_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  in_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:session.ConnKey.in_ip)
}
void ConnKey::set_in_ip(const void* value, size_t size) {
  
  in_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:session.ConnKey.in_ip)
}
::std::string* ConnKey::mutable_in_ip() {
  
  // @@protoc_insertion_point(field_mutable:session.ConnKey.in_ip)
  return in_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConnKey::release_in_ip() {
  // @@protoc_insertion_point(field_release:session.ConnKey.in_ip)
  
  return in_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConnKey::set_allocated_in_ip(::std::string* in_ip) {
  if (in_ip != NULL) {
    
  } else {
    
  }
  in_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), in_ip);
  // @@protoc_insertion_point(field_set_allocated:session.ConnKey.in_ip)
}

// int32 in_port = 2;
void ConnKey::clear_in_port() {
  in_port_ = 0;
}
::google::protobuf::int32 ConnKey::in_port() const {
  // @@protoc_insertion_point(field_get:session.ConnKey.in_port)
  return in_port_;
}
void ConnKey::set_in_port(::google::protobuf::int32 value) {
  
  in_port_ = value;
  // @@protoc_insertion_point(field_set:session.ConnKey.in_port)
}

// uint64 conn_id = 3;
void ConnKey::clear_conn_id() {
  conn_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ConnKey::conn_id() const {
  // @@protoc_insertion_point(field_get:session.ConnKey.conn_id)
  return conn_id_;
}
void ConnKey::set_conn_id(::google::protobuf::uint64 value) {
  
  conn_id_ = value;
  // @@protoc_insertion_point(field_set:session.ConnKey.conn_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestReq::kServiceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestReq::TestReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_session_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:session.TestReq)
}
TestReq::TestReq(const TestReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_id_ = from.service_id_;
  // @@protoc_insertion_point(copy_constructor:session.TestReq)
}

void TestReq::SharedCtor() {
  service_id_ = 0;
  _cached_size_ = 0;
}

TestReq::~TestReq() {
  // @@protoc_insertion_point(destructor:session.TestReq)
  SharedDtor();
}

void TestReq::SharedDtor() {
}

void TestReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestReq::descriptor() {
  protobuf_session_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_session_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TestReq& TestReq::default_instance() {
  protobuf_session_2eproto::InitDefaults();
  return *internal_default_instance();
}

TestReq* TestReq::New(::google::protobuf::Arena* arena) const {
  TestReq* n = new TestReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TestReq::Clear() {
// @@protoc_insertion_point(message_clear_start:session.TestReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_id_ = 0;
  _internal_metadata_.Clear();
}

bool TestReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:session.TestReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 service_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &service_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:session.TestReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:session.TestReq)
  return false;
#undef DO_
}

void TestReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:session.TestReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 service_id = 1;
  if (this->service_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->service_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:session.TestReq)
}

::google::protobuf::uint8* TestReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:session.TestReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 service_id = 1;
  if (this->service_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->service_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:session.TestReq)
  return target;
}

size_t TestReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:session.TestReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 service_id = 1;
  if (this->service_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->service_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:session.TestReq)
  GOOGLE_DCHECK_NE(&from, this);
  const TestReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:session.TestReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:session.TestReq)
    MergeFrom(*source);
  }
}

void TestReq::MergeFrom(const TestReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:session.TestReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.service_id() != 0) {
    set_service_id(from.service_id());
  }
}

void TestReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:session.TestReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestReq::CopyFrom(const TestReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:session.TestReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestReq::IsInitialized() const {
  return true;
}

void TestReq::Swap(TestReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestReq::InternalSwap(TestReq* other) {
  using std::swap;
  swap(service_id_, other->service_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TestReq::GetMetadata() const {
  protobuf_session_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_session_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TestReq

// int32 service_id = 1;
void TestReq::clear_service_id() {
  service_id_ = 0;
}
::google::protobuf::int32 TestReq::service_id() const {
  // @@protoc_insertion_point(field_get:session.TestReq.service_id)
  return service_id_;
}
void TestReq::set_service_id(::google::protobuf::int32 value) {
  
  service_id_ = value;
  // @@protoc_insertion_point(field_set:session.TestReq.service_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestRsp::kServiceNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestRsp::TestRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_session_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:session.TestRsp)
}
TestRsp::TestRsp(const TestRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.service_name().size() > 0) {
    service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  // @@protoc_insertion_point(copy_constructor:session.TestRsp)
}

void TestRsp::SharedCtor() {
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TestRsp::~TestRsp() {
  // @@protoc_insertion_point(destructor:session.TestRsp)
  SharedDtor();
}

void TestRsp::SharedDtor() {
  service_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TestRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestRsp::descriptor() {
  protobuf_session_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_session_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TestRsp& TestRsp::default_instance() {
  protobuf_session_2eproto::InitDefaults();
  return *internal_default_instance();
}

TestRsp* TestRsp::New(::google::protobuf::Arena* arena) const {
  TestRsp* n = new TestRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TestRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:session.TestRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool TestRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:session.TestRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes service_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_service_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:session.TestRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:session.TestRsp)
  return false;
#undef DO_
}

void TestRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:session.TestRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes service_name = 1;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->service_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:session.TestRsp)
}

::google::protobuf::uint8* TestRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:session.TestRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes service_name = 1;
  if (this->service_name().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->service_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:session.TestRsp)
  return target;
}

size_t TestRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:session.TestRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes service_name = 1;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->service_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:session.TestRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const TestRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:session.TestRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:session.TestRsp)
    MergeFrom(*source);
  }
}

void TestRsp::MergeFrom(const TestRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:session.TestRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.service_name().size() > 0) {

    service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
}

void TestRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:session.TestRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestRsp::CopyFrom(const TestRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:session.TestRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestRsp::IsInitialized() const {
  return true;
}

void TestRsp::Swap(TestRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestRsp::InternalSwap(TestRsp* other) {
  using std::swap;
  service_name_.Swap(&other->service_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TestRsp::GetMetadata() const {
  protobuf_session_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_session_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TestRsp

// bytes service_name = 1;
void TestRsp::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TestRsp::service_name() const {
  // @@protoc_insertion_point(field_get:session.TestRsp.service_name)
  return service_name_.GetNoArena();
}
void TestRsp::set_service_name(const ::std::string& value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:session.TestRsp.service_name)
}
#if LANG_CXX11
void TestRsp::set_service_name(::std::string&& value) {
  
  service_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:session.TestRsp.service_name)
}
#endif
void TestRsp::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:session.TestRsp.service_name)
}
void TestRsp::set_service_name(const void* value, size_t size) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:session.TestRsp.service_name)
}
::std::string* TestRsp::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:session.TestRsp.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TestRsp::release_service_name() {
  // @@protoc_insertion_point(field_release:session.TestRsp.service_name)
  
  return service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TestRsp::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:session.TestRsp.service_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuerySessionListReq::kUserIdListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuerySessionListReq::QuerySessionListReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_session_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:session.QuerySessionListReq)
}
QuerySessionListReq::QuerySessionListReq(const QuerySessionListReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_user_id_list()) {
    user_id_list_ = new ::common::UserIdList(*from.user_id_list_);
  } else {
    user_id_list_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:session.QuerySessionListReq)
}

void QuerySessionListReq::SharedCtor() {
  user_id_list_ = NULL;
  _cached_size_ = 0;
}

QuerySessionListReq::~QuerySessionListReq() {
  // @@protoc_insertion_point(destructor:session.QuerySessionListReq)
  SharedDtor();
}

void QuerySessionListReq::SharedDtor() {
  if (this != internal_default_instance()) delete user_id_list_;
}

void QuerySessionListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuerySessionListReq::descriptor() {
  protobuf_session_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_session_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QuerySessionListReq& QuerySessionListReq::default_instance() {
  protobuf_session_2eproto::InitDefaults();
  return *internal_default_instance();
}

QuerySessionListReq* QuerySessionListReq::New(::google::protobuf::Arena* arena) const {
  QuerySessionListReq* n = new QuerySessionListReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QuerySessionListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:session.QuerySessionListReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && user_id_list_ != NULL) {
    delete user_id_list_;
  }
  user_id_list_ = NULL;
  _internal_metadata_.Clear();
}

bool QuerySessionListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:session.QuerySessionListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common.UserIdList user_id_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_id_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:session.QuerySessionListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:session.QuerySessionListReq)
  return false;
#undef DO_
}

void QuerySessionListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:session.QuerySessionListReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.UserIdList user_id_list = 1;
  if (this->has_user_id_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->user_id_list_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:session.QuerySessionListReq)
}

::google::protobuf::uint8* QuerySessionListReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:session.QuerySessionListReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.UserIdList user_id_list = 1;
  if (this->has_user_id_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->user_id_list_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:session.QuerySessionListReq)
  return target;
}

size_t QuerySessionListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:session.QuerySessionListReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .common.UserIdList user_id_list = 1;
  if (this->has_user_id_list()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->user_id_list_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuerySessionListReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:session.QuerySessionListReq)
  GOOGLE_DCHECK_NE(&from, this);
  const QuerySessionListReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QuerySessionListReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:session.QuerySessionListReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:session.QuerySessionListReq)
    MergeFrom(*source);
  }
}

void QuerySessionListReq::MergeFrom(const QuerySessionListReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:session.QuerySessionListReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_id_list()) {
    mutable_user_id_list()->::common::UserIdList::MergeFrom(from.user_id_list());
  }
}

void QuerySessionListReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:session.QuerySessionListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuerySessionListReq::CopyFrom(const QuerySessionListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:session.QuerySessionListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySessionListReq::IsInitialized() const {
  return true;
}

void QuerySessionListReq::Swap(QuerySessionListReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuerySessionListReq::InternalSwap(QuerySessionListReq* other) {
  using std::swap;
  swap(user_id_list_, other->user_id_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuerySessionListReq::GetMetadata() const {
  protobuf_session_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_session_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QuerySessionListReq

// .common.UserIdList user_id_list = 1;
bool QuerySessionListReq::has_user_id_list() const {
  return this != internal_default_instance() && user_id_list_ != NULL;
}
void QuerySessionListReq::clear_user_id_list() {
  if (GetArenaNoVirtual() == NULL && user_id_list_ != NULL) delete user_id_list_;
  user_id_list_ = NULL;
}
const ::common::UserIdList& QuerySessionListReq::user_id_list() const {
  const ::common::UserIdList* p = user_id_list_;
  // @@protoc_insertion_point(field_get:session.QuerySessionListReq.user_id_list)
  return p != NULL ? *p : *reinterpret_cast<const ::common::UserIdList*>(
      &::common::_UserIdList_default_instance_);
}
::common::UserIdList* QuerySessionListReq::mutable_user_id_list() {
  
  if (user_id_list_ == NULL) {
    user_id_list_ = new ::common::UserIdList;
  }
  // @@protoc_insertion_point(field_mutable:session.QuerySessionListReq.user_id_list)
  return user_id_list_;
}
::common::UserIdList* QuerySessionListReq::release_user_id_list() {
  // @@protoc_insertion_point(field_release:session.QuerySessionListReq.user_id_list)
  
  ::common::UserIdList* temp = user_id_list_;
  user_id_list_ = NULL;
  return temp;
}
void QuerySessionListReq::set_allocated_user_id_list(::common::UserIdList* user_id_list) {
  delete user_id_list_;
  user_id_list_ = user_id_list;
  if (user_id_list) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:session.QuerySessionListReq.user_id_list)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuerySessionListRsp::kSessionListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuerySessionListRsp::QuerySessionListRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_session_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:session.QuerySessionListRsp)
}
QuerySessionListRsp::QuerySessionListRsp(const QuerySessionListRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_session_list()) {
    session_list_ = new ::session::SessionList(*from.session_list_);
  } else {
    session_list_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:session.QuerySessionListRsp)
}

void QuerySessionListRsp::SharedCtor() {
  session_list_ = NULL;
  _cached_size_ = 0;
}

QuerySessionListRsp::~QuerySessionListRsp() {
  // @@protoc_insertion_point(destructor:session.QuerySessionListRsp)
  SharedDtor();
}

void QuerySessionListRsp::SharedDtor() {
  if (this != internal_default_instance()) delete session_list_;
}

void QuerySessionListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuerySessionListRsp::descriptor() {
  protobuf_session_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_session_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QuerySessionListRsp& QuerySessionListRsp::default_instance() {
  protobuf_session_2eproto::InitDefaults();
  return *internal_default_instance();
}

QuerySessionListRsp* QuerySessionListRsp::New(::google::protobuf::Arena* arena) const {
  QuerySessionListRsp* n = new QuerySessionListRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QuerySessionListRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:session.QuerySessionListRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && session_list_ != NULL) {
    delete session_list_;
  }
  session_list_ = NULL;
  _internal_metadata_.Clear();
}

bool QuerySessionListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:session.QuerySessionListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .session.SessionList session_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:session.QuerySessionListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:session.QuerySessionListRsp)
  return false;
#undef DO_
}

void QuerySessionListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:session.QuerySessionListRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .session.SessionList session_list = 1;
  if (this->has_session_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->session_list_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:session.QuerySessionListRsp)
}

::google::protobuf::uint8* QuerySessionListRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:session.QuerySessionListRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .session.SessionList session_list = 1;
  if (this->has_session_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->session_list_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:session.QuerySessionListRsp)
  return target;
}

size_t QuerySessionListRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:session.QuerySessionListRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .session.SessionList session_list = 1;
  if (this->has_session_list()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->session_list_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuerySessionListRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:session.QuerySessionListRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const QuerySessionListRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QuerySessionListRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:session.QuerySessionListRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:session.QuerySessionListRsp)
    MergeFrom(*source);
  }
}

void QuerySessionListRsp::MergeFrom(const QuerySessionListRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:session.QuerySessionListRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_session_list()) {
    mutable_session_list()->::session::SessionList::MergeFrom(from.session_list());
  }
}

void QuerySessionListRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:session.QuerySessionListRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuerySessionListRsp::CopyFrom(const QuerySessionListRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:session.QuerySessionListRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySessionListRsp::IsInitialized() const {
  return true;
}

void QuerySessionListRsp::Swap(QuerySessionListRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuerySessionListRsp::InternalSwap(QuerySessionListRsp* other) {
  using std::swap;
  swap(session_list_, other->session_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuerySessionListRsp::GetMetadata() const {
  protobuf_session_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_session_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QuerySessionListRsp

// .session.SessionList session_list = 1;
bool QuerySessionListRsp::has_session_list() const {
  return this != internal_default_instance() && session_list_ != NULL;
}
void QuerySessionListRsp::clear_session_list() {
  if (GetArenaNoVirtual() == NULL && session_list_ != NULL) delete session_list_;
  session_list_ = NULL;
}
const ::session::SessionList& QuerySessionListRsp::session_list() const {
  const ::session::SessionList* p = session_list_;
  // @@protoc_insertion_point(field_get:session.QuerySessionListRsp.session_list)
  return p != NULL ? *p : *reinterpret_cast<const ::session::SessionList*>(
      &::session::_SessionList_default_instance_);
}
::session::SessionList* QuerySessionListRsp::mutable_session_list() {
  
  if (session_list_ == NULL) {
    session_list_ = new ::session::SessionList;
  }
  // @@protoc_insertion_point(field_mutable:session.QuerySessionListRsp.session_list)
  return session_list_;
}
::session::SessionList* QuerySessionListRsp::release_session_list() {
  // @@protoc_insertion_point(field_release:session.QuerySessionListRsp.session_list)
  
  ::session::SessionList* temp = session_list_;
  session_list_ = NULL;
  return temp;
}
void QuerySessionListRsp::set_allocated_session_list(::session::SessionList* session_list) {
  delete session_list_;
  session_list_ = session_list;
  if (session_list) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:session.QuerySessionListRsp.session_list)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateSessionReq::kSessionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateSessionReq::CreateSessionReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_session_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:session.CreateSessionReq)
}
CreateSessionReq::CreateSessionReq(const CreateSessionReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_session()) {
    session_ = new ::session::Session(*from.session_);
  } else {
    session_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:session.CreateSessionReq)
}

void CreateSessionReq::SharedCtor() {
  session_ = NULL;
  _cached_size_ = 0;
}

CreateSessionReq::~CreateSessionReq() {
  // @@protoc_insertion_point(destructor:session.CreateSessionReq)
  SharedDtor();
}

void CreateSessionReq::SharedDtor() {
  if (this != internal_default_instance()) delete session_;
}

void CreateSessionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateSessionReq::descriptor() {
  protobuf_session_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_session_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateSessionReq& CreateSessionReq::default_instance() {
  protobuf_session_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateSessionReq* CreateSessionReq::New(::google::protobuf::Arena* arena) const {
  CreateSessionReq* n = new CreateSessionReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateSessionReq::Clear() {
// @@protoc_insertion_point(message_clear_start:session.CreateSessionReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && session_ != NULL) {
    delete session_;
  }
  session_ = NULL;
  _internal_metadata_.Clear();
}

bool CreateSessionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:session.CreateSessionReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .session.Session session = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:session.CreateSessionReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:session.CreateSessionReq)
  return false;
#undef DO_
}

void CreateSessionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:session.CreateSessionReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .session.Session session = 1;
  if (this->has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->session_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:session.CreateSessionReq)
}

::google::protobuf::uint8* CreateSessionReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:session.CreateSessionReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .session.Session session = 1;
  if (this->has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->session_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:session.CreateSessionReq)
  return target;
}

size_t CreateSessionReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:session.CreateSessionReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .session.Session session = 1;
  if (this->has_session()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->session_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateSessionReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:session.CreateSessionReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateSessionReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateSessionReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:session.CreateSessionReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:session.CreateSessionReq)
    MergeFrom(*source);
  }
}

void CreateSessionReq::MergeFrom(const CreateSessionReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:session.CreateSessionReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_session()) {
    mutable_session()->::session::Session::MergeFrom(from.session());
  }
}

void CreateSessionReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:session.CreateSessionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateSessionReq::CopyFrom(const CreateSessionReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:session.CreateSessionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSessionReq::IsInitialized() const {
  return true;
}

void CreateSessionReq::Swap(CreateSessionReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateSessionReq::InternalSwap(CreateSessionReq* other) {
  using std::swap;
  swap(session_, other->session_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateSessionReq::GetMetadata() const {
  protobuf_session_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_session_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateSessionReq

// .session.Session session = 1;
bool CreateSessionReq::has_session() const {
  return this != internal_default_instance() && session_ != NULL;
}
void CreateSessionReq::clear_session() {
  if (GetArenaNoVirtual() == NULL && session_ != NULL) delete session_;
  session_ = NULL;
}
const ::session::Session& CreateSessionReq::session() const {
  const ::session::Session* p = session_;
  // @@protoc_insertion_point(field_get:session.CreateSessionReq.session)
  return p != NULL ? *p : *reinterpret_cast<const ::session::Session*>(
      &::session::_Session_default_instance_);
}
::session::Session* CreateSessionReq::mutable_session() {
  
  if (session_ == NULL) {
    session_ = new ::session::Session;
  }
  // @@protoc_insertion_point(field_mutable:session.CreateSessionReq.session)
  return session_;
}
::session::Session* CreateSessionReq::release_session() {
  // @@protoc_insertion_point(field_release:session.CreateSessionReq.session)
  
  ::session::Session* temp = session_;
  session_ = NULL;
  return temp;
}
void CreateSessionReq::set_allocated_session(::session::Session* session) {
  delete session_;
  session_ = session;
  if (session) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:session.CreateSessionReq.session)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateSessionRsp::CreateSessionRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_session_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:session.CreateSessionRsp)
}
CreateSessionRsp::CreateSessionRsp(const CreateSessionRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:session.CreateSessionRsp)
}

void CreateSessionRsp::SharedCtor() {
  _cached_size_ = 0;
}

CreateSessionRsp::~CreateSessionRsp() {
  // @@protoc_insertion_point(destructor:session.CreateSessionRsp)
  SharedDtor();
}

void CreateSessionRsp::SharedDtor() {
}

void CreateSessionRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateSessionRsp::descriptor() {
  protobuf_session_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_session_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateSessionRsp& CreateSessionRsp::default_instance() {
  protobuf_session_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateSessionRsp* CreateSessionRsp::New(::google::protobuf::Arena* arena) const {
  CreateSessionRsp* n = new CreateSessionRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateSessionRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:session.CreateSessionRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool CreateSessionRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:session.CreateSessionRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:session.CreateSessionRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:session.CreateSessionRsp)
  return false;
#undef DO_
}

void CreateSessionRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:session.CreateSessionRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:session.CreateSessionRsp)
}

::google::protobuf::uint8* CreateSessionRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:session.CreateSessionRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:session.CreateSessionRsp)
  return target;
}

size_t CreateSessionRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:session.CreateSessionRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateSessionRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:session.CreateSessionRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateSessionRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateSessionRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:session.CreateSessionRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:session.CreateSessionRsp)
    MergeFrom(*source);
  }
}

void CreateSessionRsp::MergeFrom(const CreateSessionRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:session.CreateSessionRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CreateSessionRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:session.CreateSessionRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateSessionRsp::CopyFrom(const CreateSessionRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:session.CreateSessionRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSessionRsp::IsInitialized() const {
  return true;
}

void CreateSessionRsp::Swap(CreateSessionRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateSessionRsp::InternalSwap(CreateSessionRsp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateSessionRsp::GetMetadata() const {
  protobuf_session_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_session_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateSessionRsp

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DelSessionReq::kUserIdFieldNumber;
const int DelSessionReq::kConnKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DelSessionReq::DelSessionReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_session_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:session.DelSessionReq)
}
DelSessionReq::DelSessionReq(const DelSessionReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_conn_key()) {
    conn_key_ = new ::session::ConnKey(*from.conn_key_);
  } else {
    conn_key_ = NULL;
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:session.DelSessionReq)
}

void DelSessionReq::SharedCtor() {
  ::memset(&conn_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&conn_key_)) + sizeof(user_id_));
  _cached_size_ = 0;
}

DelSessionReq::~DelSessionReq() {
  // @@protoc_insertion_point(destructor:session.DelSessionReq)
  SharedDtor();
}

void DelSessionReq::SharedDtor() {
  if (this != internal_default_instance()) delete conn_key_;
}

void DelSessionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelSessionReq::descriptor() {
  protobuf_session_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_session_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DelSessionReq& DelSessionReq::default_instance() {
  protobuf_session_2eproto::InitDefaults();
  return *internal_default_instance();
}

DelSessionReq* DelSessionReq::New(::google::protobuf::Arena* arena) const {
  DelSessionReq* n = new DelSessionReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DelSessionReq::Clear() {
// @@protoc_insertion_point(message_clear_start:session.DelSessionReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && conn_key_ != NULL) {
    delete conn_key_;
  }
  conn_key_ = NULL;
  user_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool DelSessionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:session.DelSessionReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .session.ConnKey conn_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conn_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:session.DelSessionReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:session.DelSessionReq)
  return false;
#undef DO_
}

void DelSessionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:session.DelSessionReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // .session.ConnKey conn_key = 2;
  if (this->has_conn_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->conn_key_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:session.DelSessionReq)
}

::google::protobuf::uint8* DelSessionReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:session.DelSessionReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // .session.ConnKey conn_key = 2;
  if (this->has_conn_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->conn_key_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:session.DelSessionReq)
  return target;
}

size_t DelSessionReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:session.DelSessionReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .session.ConnKey conn_key = 2;
  if (this->has_conn_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->conn_key_);
  }

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelSessionReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:session.DelSessionReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DelSessionReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DelSessionReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:session.DelSessionReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:session.DelSessionReq)
    MergeFrom(*source);
  }
}

void DelSessionReq::MergeFrom(const DelSessionReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:session.DelSessionReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_conn_key()) {
    mutable_conn_key()->::session::ConnKey::MergeFrom(from.conn_key());
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void DelSessionReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:session.DelSessionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelSessionReq::CopyFrom(const DelSessionReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:session.DelSessionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelSessionReq::IsInitialized() const {
  return true;
}

void DelSessionReq::Swap(DelSessionReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DelSessionReq::InternalSwap(DelSessionReq* other) {
  using std::swap;
  swap(conn_key_, other->conn_key_);
  swap(user_id_, other->user_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DelSessionReq::GetMetadata() const {
  protobuf_session_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_session_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DelSessionReq

// uint64 user_id = 1;
void DelSessionReq::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 DelSessionReq::user_id() const {
  // @@protoc_insertion_point(field_get:session.DelSessionReq.user_id)
  return user_id_;
}
void DelSessionReq::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:session.DelSessionReq.user_id)
}

// .session.ConnKey conn_key = 2;
bool DelSessionReq::has_conn_key() const {
  return this != internal_default_instance() && conn_key_ != NULL;
}
void DelSessionReq::clear_conn_key() {
  if (GetArenaNoVirtual() == NULL && conn_key_ != NULL) delete conn_key_;
  conn_key_ = NULL;
}
const ::session::ConnKey& DelSessionReq::conn_key() const {
  const ::session::ConnKey* p = conn_key_;
  // @@protoc_insertion_point(field_get:session.DelSessionReq.conn_key)
  return p != NULL ? *p : *reinterpret_cast<const ::session::ConnKey*>(
      &::session::_ConnKey_default_instance_);
}
::session::ConnKey* DelSessionReq::mutable_conn_key() {
  
  if (conn_key_ == NULL) {
    conn_key_ = new ::session::ConnKey;
  }
  // @@protoc_insertion_point(field_mutable:session.DelSessionReq.conn_key)
  return conn_key_;
}
::session::ConnKey* DelSessionReq::release_conn_key() {
  // @@protoc_insertion_point(field_release:session.DelSessionReq.conn_key)
  
  ::session::ConnKey* temp = conn_key_;
  conn_key_ = NULL;
  return temp;
}
void DelSessionReq::set_allocated_conn_key(::session::ConnKey* conn_key) {
  delete conn_key_;
  conn_key_ = conn_key;
  if (conn_key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:session.DelSessionReq.conn_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DelSessionRsp::DelSessionRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_session_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:session.DelSessionRsp)
}
DelSessionRsp::DelSessionRsp(const DelSessionRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:session.DelSessionRsp)
}

void DelSessionRsp::SharedCtor() {
  _cached_size_ = 0;
}

DelSessionRsp::~DelSessionRsp() {
  // @@protoc_insertion_point(destructor:session.DelSessionRsp)
  SharedDtor();
}

void DelSessionRsp::SharedDtor() {
}

void DelSessionRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelSessionRsp::descriptor() {
  protobuf_session_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_session_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DelSessionRsp& DelSessionRsp::default_instance() {
  protobuf_session_2eproto::InitDefaults();
  return *internal_default_instance();
}

DelSessionRsp* DelSessionRsp::New(::google::protobuf::Arena* arena) const {
  DelSessionRsp* n = new DelSessionRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DelSessionRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:session.DelSessionRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool DelSessionRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:session.DelSessionRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:session.DelSessionRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:session.DelSessionRsp)
  return false;
#undef DO_
}

void DelSessionRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:session.DelSessionRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:session.DelSessionRsp)
}

::google::protobuf::uint8* DelSessionRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:session.DelSessionRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:session.DelSessionRsp)
  return target;
}

size_t DelSessionRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:session.DelSessionRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelSessionRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:session.DelSessionRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DelSessionRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DelSessionRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:session.DelSessionRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:session.DelSessionRsp)
    MergeFrom(*source);
  }
}

void DelSessionRsp::MergeFrom(const DelSessionRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:session.DelSessionRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DelSessionRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:session.DelSessionRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelSessionRsp::CopyFrom(const DelSessionRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:session.DelSessionRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelSessionRsp::IsInitialized() const {
  return true;
}

void DelSessionRsp::Swap(DelSessionRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DelSessionRsp::InternalSwap(DelSessionRsp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DelSessionRsp::GetMetadata() const {
  protobuf_session_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_session_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DelSessionRsp

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionMsg::kTestReqFieldNumber;
const int SessionMsg::kTestRspFieldNumber;
const int SessionMsg::kQuerySessionListReqFieldNumber;
const int SessionMsg::kQuerySessionListRspFieldNumber;
const int SessionMsg::kCreateSessionReqFieldNumber;
const int SessionMsg::kCreateSessionRspFieldNumber;
const int SessionMsg::kDelSessionReqFieldNumber;
const int SessionMsg::kDelSessionRspFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionMsg::SessionMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_session_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:session.SessionMsg)
}
SessionMsg::SessionMsg(const SessionMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_choice();
  switch (from.choice_case()) {
    case kTestReq: {
      mutable_test_req()->::session::TestReq::MergeFrom(from.test_req());
      break;
    }
    case kTestRsp: {
      mutable_test_rsp()->::session::TestRsp::MergeFrom(from.test_rsp());
      break;
    }
    case kQuerySessionListReq: {
      mutable_query_session_list_req()->::session::QuerySessionListReq::MergeFrom(from.query_session_list_req());
      break;
    }
    case kQuerySessionListRsp: {
      mutable_query_session_list_rsp()->::session::QuerySessionListRsp::MergeFrom(from.query_session_list_rsp());
      break;
    }
    case kCreateSessionReq: {
      mutable_create_session_req()->::session::CreateSessionReq::MergeFrom(from.create_session_req());
      break;
    }
    case kCreateSessionRsp: {
      mutable_create_session_rsp()->::session::CreateSessionRsp::MergeFrom(from.create_session_rsp());
      break;
    }
    case kDelSessionReq: {
      mutable_del_session_req()->::session::DelSessionReq::MergeFrom(from.del_session_req());
      break;
    }
    case kDelSessionRsp: {
      mutable_del_session_rsp()->::session::DelSessionRsp::MergeFrom(from.del_session_rsp());
      break;
    }
    case CHOICE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:session.SessionMsg)
}

void SessionMsg::SharedCtor() {
  clear_has_choice();
  _cached_size_ = 0;
}

SessionMsg::~SessionMsg() {
  // @@protoc_insertion_point(destructor:session.SessionMsg)
  SharedDtor();
}

void SessionMsg::SharedDtor() {
  if (has_choice()) {
    clear_choice();
  }
}

void SessionMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionMsg::descriptor() {
  protobuf_session_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_session_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SessionMsg& SessionMsg::default_instance() {
  protobuf_session_2eproto::InitDefaults();
  return *internal_default_instance();
}

SessionMsg* SessionMsg::New(::google::protobuf::Arena* arena) const {
  SessionMsg* n = new SessionMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SessionMsg::clear_choice() {
// @@protoc_insertion_point(one_of_clear_start:session.SessionMsg)
  switch (choice_case()) {
    case kTestReq: {
      delete choice_.test_req_;
      break;
    }
    case kTestRsp: {
      delete choice_.test_rsp_;
      break;
    }
    case kQuerySessionListReq: {
      delete choice_.query_session_list_req_;
      break;
    }
    case kQuerySessionListRsp: {
      delete choice_.query_session_list_rsp_;
      break;
    }
    case kCreateSessionReq: {
      delete choice_.create_session_req_;
      break;
    }
    case kCreateSessionRsp: {
      delete choice_.create_session_rsp_;
      break;
    }
    case kDelSessionReq: {
      delete choice_.del_session_req_;
      break;
    }
    case kDelSessionRsp: {
      delete choice_.del_session_rsp_;
      break;
    }
    case CHOICE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CHOICE_NOT_SET;
}


void SessionMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:session.SessionMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_choice();
  _internal_metadata_.Clear();
}

bool SessionMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:session.SessionMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .session.TestReq test_req = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_test_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .session.TestRsp test_rsp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_test_rsp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .session.QuerySessionListReq query_session_list_req = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query_session_list_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .session.QuerySessionListRsp query_session_list_rsp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query_session_list_rsp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .session.CreateSessionReq create_session_req = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_create_session_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .session.CreateSessionRsp create_session_rsp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_create_session_rsp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .session.DelSessionReq del_session_req = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_del_session_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .session.DelSessionRsp del_session_rsp = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_del_session_rsp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:session.SessionMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:session.SessionMsg)
  return false;
#undef DO_
}

void SessionMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:session.SessionMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .session.TestReq test_req = 1;
  if (has_test_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *choice_.test_req_, output);
  }

  // .session.TestRsp test_rsp = 2;
  if (has_test_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *choice_.test_rsp_, output);
  }

  // .session.QuerySessionListReq query_session_list_req = 3;
  if (has_query_session_list_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *choice_.query_session_list_req_, output);
  }

  // .session.QuerySessionListRsp query_session_list_rsp = 4;
  if (has_query_session_list_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *choice_.query_session_list_rsp_, output);
  }

  // .session.CreateSessionReq create_session_req = 5;
  if (has_create_session_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *choice_.create_session_req_, output);
  }

  // .session.CreateSessionRsp create_session_rsp = 6;
  if (has_create_session_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *choice_.create_session_rsp_, output);
  }

  // .session.DelSessionReq del_session_req = 7;
  if (has_del_session_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *choice_.del_session_req_, output);
  }

  // .session.DelSessionRsp del_session_rsp = 8;
  if (has_del_session_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *choice_.del_session_rsp_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:session.SessionMsg)
}

::google::protobuf::uint8* SessionMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:session.SessionMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .session.TestReq test_req = 1;
  if (has_test_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *choice_.test_req_, deterministic, target);
  }

  // .session.TestRsp test_rsp = 2;
  if (has_test_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *choice_.test_rsp_, deterministic, target);
  }

  // .session.QuerySessionListReq query_session_list_req = 3;
  if (has_query_session_list_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *choice_.query_session_list_req_, deterministic, target);
  }

  // .session.QuerySessionListRsp query_session_list_rsp = 4;
  if (has_query_session_list_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *choice_.query_session_list_rsp_, deterministic, target);
  }

  // .session.CreateSessionReq create_session_req = 5;
  if (has_create_session_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *choice_.create_session_req_, deterministic, target);
  }

  // .session.CreateSessionRsp create_session_rsp = 6;
  if (has_create_session_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *choice_.create_session_rsp_, deterministic, target);
  }

  // .session.DelSessionReq del_session_req = 7;
  if (has_del_session_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *choice_.del_session_req_, deterministic, target);
  }

  // .session.DelSessionRsp del_session_rsp = 8;
  if (has_del_session_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *choice_.del_session_rsp_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:session.SessionMsg)
  return target;
}

size_t SessionMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:session.SessionMsg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (choice_case()) {
    // .session.TestReq test_req = 1;
    case kTestReq: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *choice_.test_req_);
      break;
    }
    // .session.TestRsp test_rsp = 2;
    case kTestRsp: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *choice_.test_rsp_);
      break;
    }
    // .session.QuerySessionListReq query_session_list_req = 3;
    case kQuerySessionListReq: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *choice_.query_session_list_req_);
      break;
    }
    // .session.QuerySessionListRsp query_session_list_rsp = 4;
    case kQuerySessionListRsp: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *choice_.query_session_list_rsp_);
      break;
    }
    // .session.CreateSessionReq create_session_req = 5;
    case kCreateSessionReq: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *choice_.create_session_req_);
      break;
    }
    // .session.CreateSessionRsp create_session_rsp = 6;
    case kCreateSessionRsp: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *choice_.create_session_rsp_);
      break;
    }
    // .session.DelSessionReq del_session_req = 7;
    case kDelSessionReq: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *choice_.del_session_req_);
      break;
    }
    // .session.DelSessionRsp del_session_rsp = 8;
    case kDelSessionRsp: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *choice_.del_session_rsp_);
      break;
    }
    case CHOICE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:session.SessionMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SessionMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:session.SessionMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:session.SessionMsg)
    MergeFrom(*source);
  }
}

void SessionMsg::MergeFrom(const SessionMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:session.SessionMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.choice_case()) {
    case kTestReq: {
      mutable_test_req()->::session::TestReq::MergeFrom(from.test_req());
      break;
    }
    case kTestRsp: {
      mutable_test_rsp()->::session::TestRsp::MergeFrom(from.test_rsp());
      break;
    }
    case kQuerySessionListReq: {
      mutable_query_session_list_req()->::session::QuerySessionListReq::MergeFrom(from.query_session_list_req());
      break;
    }
    case kQuerySessionListRsp: {
      mutable_query_session_list_rsp()->::session::QuerySessionListRsp::MergeFrom(from.query_session_list_rsp());
      break;
    }
    case kCreateSessionReq: {
      mutable_create_session_req()->::session::CreateSessionReq::MergeFrom(from.create_session_req());
      break;
    }
    case kCreateSessionRsp: {
      mutable_create_session_rsp()->::session::CreateSessionRsp::MergeFrom(from.create_session_rsp());
      break;
    }
    case kDelSessionReq: {
      mutable_del_session_req()->::session::DelSessionReq::MergeFrom(from.del_session_req());
      break;
    }
    case kDelSessionRsp: {
      mutable_del_session_rsp()->::session::DelSessionRsp::MergeFrom(from.del_session_rsp());
      break;
    }
    case CHOICE_NOT_SET: {
      break;
    }
  }
}

void SessionMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:session.SessionMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionMsg::CopyFrom(const SessionMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:session.SessionMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionMsg::IsInitialized() const {
  return true;
}

void SessionMsg::Swap(SessionMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SessionMsg::InternalSwap(SessionMsg* other) {
  using std::swap;
  swap(choice_, other->choice_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SessionMsg::GetMetadata() const {
  protobuf_session_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_session_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SessionMsg

// .session.TestReq test_req = 1;
bool SessionMsg::has_test_req() const {
  return choice_case() == kTestReq;
}
void SessionMsg::set_has_test_req() {
  _oneof_case_[0] = kTestReq;
}
void SessionMsg::clear_test_req() {
  if (has_test_req()) {
    delete choice_.test_req_;
    clear_has_choice();
  }
}
 const ::session::TestReq& SessionMsg::test_req() const {
  // @@protoc_insertion_point(field_get:session.SessionMsg.test_req)
  return has_test_req()
      ? *choice_.test_req_
      : ::session::TestReq::default_instance();
}
::session::TestReq* SessionMsg::mutable_test_req() {
  if (!has_test_req()) {
    clear_choice();
    set_has_test_req();
    choice_.test_req_ = new ::session::TestReq;
  }
  // @@protoc_insertion_point(field_mutable:session.SessionMsg.test_req)
  return choice_.test_req_;
}
::session::TestReq* SessionMsg::release_test_req() {
  // @@protoc_insertion_point(field_release:session.SessionMsg.test_req)
  if (has_test_req()) {
    clear_has_choice();
    ::session::TestReq* temp = choice_.test_req_;
    choice_.test_req_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SessionMsg::set_allocated_test_req(::session::TestReq* test_req) {
  clear_choice();
  if (test_req) {
    set_has_test_req();
    choice_.test_req_ = test_req;
  }
  // @@protoc_insertion_point(field_set_allocated:session.SessionMsg.test_req)
}

// .session.TestRsp test_rsp = 2;
bool SessionMsg::has_test_rsp() const {
  return choice_case() == kTestRsp;
}
void SessionMsg::set_has_test_rsp() {
  _oneof_case_[0] = kTestRsp;
}
void SessionMsg::clear_test_rsp() {
  if (has_test_rsp()) {
    delete choice_.test_rsp_;
    clear_has_choice();
  }
}
 const ::session::TestRsp& SessionMsg::test_rsp() const {
  // @@protoc_insertion_point(field_get:session.SessionMsg.test_rsp)
  return has_test_rsp()
      ? *choice_.test_rsp_
      : ::session::TestRsp::default_instance();
}
::session::TestRsp* SessionMsg::mutable_test_rsp() {
  if (!has_test_rsp()) {
    clear_choice();
    set_has_test_rsp();
    choice_.test_rsp_ = new ::session::TestRsp;
  }
  // @@protoc_insertion_point(field_mutable:session.SessionMsg.test_rsp)
  return choice_.test_rsp_;
}
::session::TestRsp* SessionMsg::release_test_rsp() {
  // @@protoc_insertion_point(field_release:session.SessionMsg.test_rsp)
  if (has_test_rsp()) {
    clear_has_choice();
    ::session::TestRsp* temp = choice_.test_rsp_;
    choice_.test_rsp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SessionMsg::set_allocated_test_rsp(::session::TestRsp* test_rsp) {
  clear_choice();
  if (test_rsp) {
    set_has_test_rsp();
    choice_.test_rsp_ = test_rsp;
  }
  // @@protoc_insertion_point(field_set_allocated:session.SessionMsg.test_rsp)
}

// .session.QuerySessionListReq query_session_list_req = 3;
bool SessionMsg::has_query_session_list_req() const {
  return choice_case() == kQuerySessionListReq;
}
void SessionMsg::set_has_query_session_list_req() {
  _oneof_case_[0] = kQuerySessionListReq;
}
void SessionMsg::clear_query_session_list_req() {
  if (has_query_session_list_req()) {
    delete choice_.query_session_list_req_;
    clear_has_choice();
  }
}
 const ::session::QuerySessionListReq& SessionMsg::query_session_list_req() const {
  // @@protoc_insertion_point(field_get:session.SessionMsg.query_session_list_req)
  return has_query_session_list_req()
      ? *choice_.query_session_list_req_
      : ::session::QuerySessionListReq::default_instance();
}
::session::QuerySessionListReq* SessionMsg::mutable_query_session_list_req() {
  if (!has_query_session_list_req()) {
    clear_choice();
    set_has_query_session_list_req();
    choice_.query_session_list_req_ = new ::session::QuerySessionListReq;
  }
  // @@protoc_insertion_point(field_mutable:session.SessionMsg.query_session_list_req)
  return choice_.query_session_list_req_;
}
::session::QuerySessionListReq* SessionMsg::release_query_session_list_req() {
  // @@protoc_insertion_point(field_release:session.SessionMsg.query_session_list_req)
  if (has_query_session_list_req()) {
    clear_has_choice();
    ::session::QuerySessionListReq* temp = choice_.query_session_list_req_;
    choice_.query_session_list_req_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SessionMsg::set_allocated_query_session_list_req(::session::QuerySessionListReq* query_session_list_req) {
  clear_choice();
  if (query_session_list_req) {
    set_has_query_session_list_req();
    choice_.query_session_list_req_ = query_session_list_req;
  }
  // @@protoc_insertion_point(field_set_allocated:session.SessionMsg.query_session_list_req)
}

// .session.QuerySessionListRsp query_session_list_rsp = 4;
bool SessionMsg::has_query_session_list_rsp() const {
  return choice_case() == kQuerySessionListRsp;
}
void SessionMsg::set_has_query_session_list_rsp() {
  _oneof_case_[0] = kQuerySessionListRsp;
}
void SessionMsg::clear_query_session_list_rsp() {
  if (has_query_session_list_rsp()) {
    delete choice_.query_session_list_rsp_;
    clear_has_choice();
  }
}
 const ::session::QuerySessionListRsp& SessionMsg::query_session_list_rsp() const {
  // @@protoc_insertion_point(field_get:session.SessionMsg.query_session_list_rsp)
  return has_query_session_list_rsp()
      ? *choice_.query_session_list_rsp_
      : ::session::QuerySessionListRsp::default_instance();
}
::session::QuerySessionListRsp* SessionMsg::mutable_query_session_list_rsp() {
  if (!has_query_session_list_rsp()) {
    clear_choice();
    set_has_query_session_list_rsp();
    choice_.query_session_list_rsp_ = new ::session::QuerySessionListRsp;
  }
  // @@protoc_insertion_point(field_mutable:session.SessionMsg.query_session_list_rsp)
  return choice_.query_session_list_rsp_;
}
::session::QuerySessionListRsp* SessionMsg::release_query_session_list_rsp() {
  // @@protoc_insertion_point(field_release:session.SessionMsg.query_session_list_rsp)
  if (has_query_session_list_rsp()) {
    clear_has_choice();
    ::session::QuerySessionListRsp* temp = choice_.query_session_list_rsp_;
    choice_.query_session_list_rsp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SessionMsg::set_allocated_query_session_list_rsp(::session::QuerySessionListRsp* query_session_list_rsp) {
  clear_choice();
  if (query_session_list_rsp) {
    set_has_query_session_list_rsp();
    choice_.query_session_list_rsp_ = query_session_list_rsp;
  }
  // @@protoc_insertion_point(field_set_allocated:session.SessionMsg.query_session_list_rsp)
}

// .session.CreateSessionReq create_session_req = 5;
bool SessionMsg::has_create_session_req() const {
  return choice_case() == kCreateSessionReq;
}
void SessionMsg::set_has_create_session_req() {
  _oneof_case_[0] = kCreateSessionReq;
}
void SessionMsg::clear_create_session_req() {
  if (has_create_session_req()) {
    delete choice_.create_session_req_;
    clear_has_choice();
  }
}
 const ::session::CreateSessionReq& SessionMsg::create_session_req() const {
  // @@protoc_insertion_point(field_get:session.SessionMsg.create_session_req)
  return has_create_session_req()
      ? *choice_.create_session_req_
      : ::session::CreateSessionReq::default_instance();
}
::session::CreateSessionReq* SessionMsg::mutable_create_session_req() {
  if (!has_create_session_req()) {
    clear_choice();
    set_has_create_session_req();
    choice_.create_session_req_ = new ::session::CreateSessionReq;
  }
  // @@protoc_insertion_point(field_mutable:session.SessionMsg.create_session_req)
  return choice_.create_session_req_;
}
::session::CreateSessionReq* SessionMsg::release_create_session_req() {
  // @@protoc_insertion_point(field_release:session.SessionMsg.create_session_req)
  if (has_create_session_req()) {
    clear_has_choice();
    ::session::CreateSessionReq* temp = choice_.create_session_req_;
    choice_.create_session_req_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SessionMsg::set_allocated_create_session_req(::session::CreateSessionReq* create_session_req) {
  clear_choice();
  if (create_session_req) {
    set_has_create_session_req();
    choice_.create_session_req_ = create_session_req;
  }
  // @@protoc_insertion_point(field_set_allocated:session.SessionMsg.create_session_req)
}

// .session.CreateSessionRsp create_session_rsp = 6;
bool SessionMsg::has_create_session_rsp() const {
  return choice_case() == kCreateSessionRsp;
}
void SessionMsg::set_has_create_session_rsp() {
  _oneof_case_[0] = kCreateSessionRsp;
}
void SessionMsg::clear_create_session_rsp() {
  if (has_create_session_rsp()) {
    delete choice_.create_session_rsp_;
    clear_has_choice();
  }
}
 const ::session::CreateSessionRsp& SessionMsg::create_session_rsp() const {
  // @@protoc_insertion_point(field_get:session.SessionMsg.create_session_rsp)
  return has_create_session_rsp()
      ? *choice_.create_session_rsp_
      : ::session::CreateSessionRsp::default_instance();
}
::session::CreateSessionRsp* SessionMsg::mutable_create_session_rsp() {
  if (!has_create_session_rsp()) {
    clear_choice();
    set_has_create_session_rsp();
    choice_.create_session_rsp_ = new ::session::CreateSessionRsp;
  }
  // @@protoc_insertion_point(field_mutable:session.SessionMsg.create_session_rsp)
  return choice_.create_session_rsp_;
}
::session::CreateSessionRsp* SessionMsg::release_create_session_rsp() {
  // @@protoc_insertion_point(field_release:session.SessionMsg.create_session_rsp)
  if (has_create_session_rsp()) {
    clear_has_choice();
    ::session::CreateSessionRsp* temp = choice_.create_session_rsp_;
    choice_.create_session_rsp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SessionMsg::set_allocated_create_session_rsp(::session::CreateSessionRsp* create_session_rsp) {
  clear_choice();
  if (create_session_rsp) {
    set_has_create_session_rsp();
    choice_.create_session_rsp_ = create_session_rsp;
  }
  // @@protoc_insertion_point(field_set_allocated:session.SessionMsg.create_session_rsp)
}

// .session.DelSessionReq del_session_req = 7;
bool SessionMsg::has_del_session_req() const {
  return choice_case() == kDelSessionReq;
}
void SessionMsg::set_has_del_session_req() {
  _oneof_case_[0] = kDelSessionReq;
}
void SessionMsg::clear_del_session_req() {
  if (has_del_session_req()) {
    delete choice_.del_session_req_;
    clear_has_choice();
  }
}
 const ::session::DelSessionReq& SessionMsg::del_session_req() const {
  // @@protoc_insertion_point(field_get:session.SessionMsg.del_session_req)
  return has_del_session_req()
      ? *choice_.del_session_req_
      : ::session::DelSessionReq::default_instance();
}
::session::DelSessionReq* SessionMsg::mutable_del_session_req() {
  if (!has_del_session_req()) {
    clear_choice();
    set_has_del_session_req();
    choice_.del_session_req_ = new ::session::DelSessionReq;
  }
  // @@protoc_insertion_point(field_mutable:session.SessionMsg.del_session_req)
  return choice_.del_session_req_;
}
::session::DelSessionReq* SessionMsg::release_del_session_req() {
  // @@protoc_insertion_point(field_release:session.SessionMsg.del_session_req)
  if (has_del_session_req()) {
    clear_has_choice();
    ::session::DelSessionReq* temp = choice_.del_session_req_;
    choice_.del_session_req_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SessionMsg::set_allocated_del_session_req(::session::DelSessionReq* del_session_req) {
  clear_choice();
  if (del_session_req) {
    set_has_del_session_req();
    choice_.del_session_req_ = del_session_req;
  }
  // @@protoc_insertion_point(field_set_allocated:session.SessionMsg.del_session_req)
}

// .session.DelSessionRsp del_session_rsp = 8;
bool SessionMsg::has_del_session_rsp() const {
  return choice_case() == kDelSessionRsp;
}
void SessionMsg::set_has_del_session_rsp() {
  _oneof_case_[0] = kDelSessionRsp;
}
void SessionMsg::clear_del_session_rsp() {
  if (has_del_session_rsp()) {
    delete choice_.del_session_rsp_;
    clear_has_choice();
  }
}
 const ::session::DelSessionRsp& SessionMsg::del_session_rsp() const {
  // @@protoc_insertion_point(field_get:session.SessionMsg.del_session_rsp)
  return has_del_session_rsp()
      ? *choice_.del_session_rsp_
      : ::session::DelSessionRsp::default_instance();
}
::session::DelSessionRsp* SessionMsg::mutable_del_session_rsp() {
  if (!has_del_session_rsp()) {
    clear_choice();
    set_has_del_session_rsp();
    choice_.del_session_rsp_ = new ::session::DelSessionRsp;
  }
  // @@protoc_insertion_point(field_mutable:session.SessionMsg.del_session_rsp)
  return choice_.del_session_rsp_;
}
::session::DelSessionRsp* SessionMsg::release_del_session_rsp() {
  // @@protoc_insertion_point(field_release:session.SessionMsg.del_session_rsp)
  if (has_del_session_rsp()) {
    clear_has_choice();
    ::session::DelSessionRsp* temp = choice_.del_session_rsp_;
    choice_.del_session_rsp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SessionMsg::set_allocated_del_session_rsp(::session::DelSessionRsp* del_session_rsp) {
  clear_choice();
  if (del_session_rsp) {
    set_has_del_session_rsp();
    choice_.del_session_rsp_ = del_session_rsp;
  }
  // @@protoc_insertion_point(field_set_allocated:session.SessionMsg.del_session_rsp)
}

bool SessionMsg::has_choice() const {
  return choice_case() != CHOICE_NOT_SET;
}
void SessionMsg::clear_has_choice() {
  _oneof_case_[0] = CHOICE_NOT_SET;
}
SessionMsg::ChoiceCase SessionMsg::choice_case() const {
  return SessionMsg::ChoiceCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace session

// @@protoc_insertion_point(global_scope)
