// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#ifndef PROTOBUF_data_2eproto__INCLUDED
#define PROTOBUF_data_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
namespace data {
class Body;
class BodyDefaultTypeInternal;
extern BodyDefaultTypeInternal _Body_default_instance_;
class MsgReq;
class MsgReqDefaultTypeInternal;
extern MsgReqDefaultTypeInternal _MsgReq_default_instance_;
class MsgRsp;
class MsgRspDefaultTypeInternal;
extern MsgRspDefaultTypeInternal _MsgRsp_default_instance_;
}  // namespace data

namespace data {

namespace protobuf_data_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_data_2eproto

// ===================================================================

class MsgReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:data.MsgReq) */ {
 public:
  MsgReq();
  virtual ~MsgReq();

  MsgReq(const MsgReq& from);

  inline MsgReq& operator=(const MsgReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgReq(MsgReq&& from) noexcept
    : MsgReq() {
    *this = ::std::move(from);
  }

  inline MsgReq& operator=(MsgReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgReq& default_instance();

  static inline const MsgReq* internal_default_instance() {
    return reinterpret_cast<const MsgReq*>(
               &_MsgReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(MsgReq* other);
  friend void swap(MsgReq& a, MsgReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgReq* New() const PROTOBUF_FINAL { return New(NULL); }

  MsgReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MsgReq& from);
  void MergeFrom(const MsgReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MsgReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:data.MsgReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_data_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MsgRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:data.MsgRsp) */ {
 public:
  MsgRsp();
  virtual ~MsgRsp();

  MsgRsp(const MsgRsp& from);

  inline MsgRsp& operator=(const MsgRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgRsp(MsgRsp&& from) noexcept
    : MsgRsp() {
    *this = ::std::move(from);
  }

  inline MsgRsp& operator=(MsgRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgRsp& default_instance();

  static inline const MsgRsp* internal_default_instance() {
    return reinterpret_cast<const MsgRsp*>(
               &_MsgRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(MsgRsp* other);
  friend void swap(MsgRsp& a, MsgRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  MsgRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MsgRsp& from);
  void MergeFrom(const MsgRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MsgRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes info = 2;
  void clear_info();
  static const int kInfoFieldNumber = 2;
  const ::std::string& info() const;
  void set_info(const ::std::string& value);
  #if LANG_CXX11
  void set_info(::std::string&& value);
  #endif
  void set_info(const char* value);
  void set_info(const void* value, size_t size);
  ::std::string* mutable_info();
  ::std::string* release_info();
  void set_allocated_info(::std::string* info);

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:data.MsgRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr info_;
  ::google::protobuf::int32 code_;
  mutable int _cached_size_;
  friend struct protobuf_data_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Body : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:data.Body) */ {
 public:
  Body();
  virtual ~Body();

  Body(const Body& from);

  inline Body& operator=(const Body& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Body(Body&& from) noexcept
    : Body() {
    *this = ::std::move(from);
  }

  inline Body& operator=(Body&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Body& default_instance();

  enum MsgTypeCase {
    kMsgReq = 1,
    kMsgRsp = 2,
    MSG_TYPE_NOT_SET = 0,
  };

  static inline const Body* internal_default_instance() {
    return reinterpret_cast<const Body*>(
               &_Body_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Body* other);
  friend void swap(Body& a, Body& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Body* New() const PROTOBUF_FINAL { return New(NULL); }

  Body* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Body& from);
  void MergeFrom(const Body& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Body* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Any service_msg = 3;
  bool has_service_msg() const;
  void clear_service_msg();
  static const int kServiceMsgFieldNumber = 3;
  const ::google::protobuf::Any& service_msg() const;
  ::google::protobuf::Any* mutable_service_msg();
  ::google::protobuf::Any* release_service_msg();
  void set_allocated_service_msg(::google::protobuf::Any* service_msg);

  // .data.MsgReq msg_req = 1;
  bool has_msg_req() const;
  void clear_msg_req();
  static const int kMsgReqFieldNumber = 1;
  const ::data::MsgReq& msg_req() const;
  ::data::MsgReq* mutable_msg_req();
  ::data::MsgReq* release_msg_req();
  void set_allocated_msg_req(::data::MsgReq* msg_req);

  // .data.MsgRsp msg_rsp = 2;
  bool has_msg_rsp() const;
  void clear_msg_rsp();
  static const int kMsgRspFieldNumber = 2;
  const ::data::MsgRsp& msg_rsp() const;
  ::data::MsgRsp* mutable_msg_rsp();
  ::data::MsgRsp* release_msg_rsp();
  void set_allocated_msg_rsp(::data::MsgRsp* msg_rsp);

  MsgTypeCase msg_type_case() const;
  // @@protoc_insertion_point(class_scope:data.Body)
 private:
  void set_has_msg_req();
  void set_has_msg_rsp();

  inline bool has_msg_type() const;
  void clear_msg_type();
  inline void clear_has_msg_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::Any* service_msg_;
  union MsgTypeUnion {
    MsgTypeUnion() {}
    ::data::MsgReq* msg_req_;
    ::data::MsgRsp* msg_rsp_;
  } msg_type_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_data_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgReq

// -------------------------------------------------------------------

// MsgRsp

// int32 code = 1;
inline void MsgRsp::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 MsgRsp::code() const {
  // @@protoc_insertion_point(field_get:data.MsgRsp.code)
  return code_;
}
inline void MsgRsp::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:data.MsgRsp.code)
}

// bytes info = 2;
inline void MsgRsp::clear_info() {
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MsgRsp::info() const {
  // @@protoc_insertion_point(field_get:data.MsgRsp.info)
  return info_.GetNoArena();
}
inline void MsgRsp::set_info(const ::std::string& value) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data.MsgRsp.info)
}
#if LANG_CXX11
inline void MsgRsp::set_info(::std::string&& value) {
  
  info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:data.MsgRsp.info)
}
#endif
inline void MsgRsp::set_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data.MsgRsp.info)
}
inline void MsgRsp::set_info(const void* value, size_t size) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data.MsgRsp.info)
}
inline ::std::string* MsgRsp::mutable_info() {
  
  // @@protoc_insertion_point(field_mutable:data.MsgRsp.info)
  return info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MsgRsp::release_info() {
  // @@protoc_insertion_point(field_release:data.MsgRsp.info)
  
  return info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MsgRsp::set_allocated_info(::std::string* info) {
  if (info != NULL) {
    
  } else {
    
  }
  info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:data.MsgRsp.info)
}

// -------------------------------------------------------------------

// Body

// .data.MsgReq msg_req = 1;
inline bool Body::has_msg_req() const {
  return msg_type_case() == kMsgReq;
}
inline void Body::set_has_msg_req() {
  _oneof_case_[0] = kMsgReq;
}
inline void Body::clear_msg_req() {
  if (has_msg_req()) {
    delete msg_type_.msg_req_;
    clear_has_msg_type();
  }
}
inline  const ::data::MsgReq& Body::msg_req() const {
  // @@protoc_insertion_point(field_get:data.Body.msg_req)
  return has_msg_req()
      ? *msg_type_.msg_req_
      : ::data::MsgReq::default_instance();
}
inline ::data::MsgReq* Body::mutable_msg_req() {
  if (!has_msg_req()) {
    clear_msg_type();
    set_has_msg_req();
    msg_type_.msg_req_ = new ::data::MsgReq;
  }
  // @@protoc_insertion_point(field_mutable:data.Body.msg_req)
  return msg_type_.msg_req_;
}
inline ::data::MsgReq* Body::release_msg_req() {
  // @@protoc_insertion_point(field_release:data.Body.msg_req)
  if (has_msg_req()) {
    clear_has_msg_type();
    ::data::MsgReq* temp = msg_type_.msg_req_;
    msg_type_.msg_req_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Body::set_allocated_msg_req(::data::MsgReq* msg_req) {
  clear_msg_type();
  if (msg_req) {
    set_has_msg_req();
    msg_type_.msg_req_ = msg_req;
  }
  // @@protoc_insertion_point(field_set_allocated:data.Body.msg_req)
}

// .data.MsgRsp msg_rsp = 2;
inline bool Body::has_msg_rsp() const {
  return msg_type_case() == kMsgRsp;
}
inline void Body::set_has_msg_rsp() {
  _oneof_case_[0] = kMsgRsp;
}
inline void Body::clear_msg_rsp() {
  if (has_msg_rsp()) {
    delete msg_type_.msg_rsp_;
    clear_has_msg_type();
  }
}
inline  const ::data::MsgRsp& Body::msg_rsp() const {
  // @@protoc_insertion_point(field_get:data.Body.msg_rsp)
  return has_msg_rsp()
      ? *msg_type_.msg_rsp_
      : ::data::MsgRsp::default_instance();
}
inline ::data::MsgRsp* Body::mutable_msg_rsp() {
  if (!has_msg_rsp()) {
    clear_msg_type();
    set_has_msg_rsp();
    msg_type_.msg_rsp_ = new ::data::MsgRsp;
  }
  // @@protoc_insertion_point(field_mutable:data.Body.msg_rsp)
  return msg_type_.msg_rsp_;
}
inline ::data::MsgRsp* Body::release_msg_rsp() {
  // @@protoc_insertion_point(field_release:data.Body.msg_rsp)
  if (has_msg_rsp()) {
    clear_has_msg_type();
    ::data::MsgRsp* temp = msg_type_.msg_rsp_;
    msg_type_.msg_rsp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Body::set_allocated_msg_rsp(::data::MsgRsp* msg_rsp) {
  clear_msg_type();
  if (msg_rsp) {
    set_has_msg_rsp();
    msg_type_.msg_rsp_ = msg_rsp;
  }
  // @@protoc_insertion_point(field_set_allocated:data.Body.msg_rsp)
}

// .google.protobuf.Any service_msg = 3;
inline bool Body::has_service_msg() const {
  return this != internal_default_instance() && service_msg_ != NULL;
}
inline void Body::clear_service_msg() {
  if (GetArenaNoVirtual() == NULL && service_msg_ != NULL) delete service_msg_;
  service_msg_ = NULL;
}
inline const ::google::protobuf::Any& Body::service_msg() const {
  const ::google::protobuf::Any* p = service_msg_;
  // @@protoc_insertion_point(field_get:data.Body.service_msg)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
inline ::google::protobuf::Any* Body::mutable_service_msg() {
  
  if (service_msg_ == NULL) {
    service_msg_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:data.Body.service_msg)
  return service_msg_;
}
inline ::google::protobuf::Any* Body::release_service_msg() {
  // @@protoc_insertion_point(field_release:data.Body.service_msg)
  
  ::google::protobuf::Any* temp = service_msg_;
  service_msg_ = NULL;
  return temp;
}
inline void Body::set_allocated_service_msg(::google::protobuf::Any* service_msg) {
  delete service_msg_;
  service_msg_ = service_msg;
  if (service_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:data.Body.service_msg)
}

inline bool Body::has_msg_type() const {
  return msg_type_case() != MSG_TYPE_NOT_SET;
}
inline void Body::clear_has_msg_type() {
  _oneof_case_[0] = MSG_TYPE_NOT_SET;
}
inline Body::MsgTypeCase Body::msg_type_case() const {
  return Body::MsgTypeCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace data

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_data_2eproto__INCLUDED
