// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: session.proto

#ifndef PROTOBUF_session_2eproto__INCLUDED
#define PROTOBUF_session_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
namespace session {
class ConnKey;
class ConnKeyDefaultTypeInternal;
extern ConnKeyDefaultTypeInternal _ConnKey_default_instance_;
class CreateSessionReq;
class CreateSessionReqDefaultTypeInternal;
extern CreateSessionReqDefaultTypeInternal _CreateSessionReq_default_instance_;
class CreateSessionRsp;
class CreateSessionRspDefaultTypeInternal;
extern CreateSessionRspDefaultTypeInternal _CreateSessionRsp_default_instance_;
class DelSessionReq;
class DelSessionReqDefaultTypeInternal;
extern DelSessionReqDefaultTypeInternal _DelSessionReq_default_instance_;
class DelSessionRsp;
class DelSessionRspDefaultTypeInternal;
extern DelSessionRspDefaultTypeInternal _DelSessionRsp_default_instance_;
class QuerySessionListReq;
class QuerySessionListReqDefaultTypeInternal;
extern QuerySessionListReqDefaultTypeInternal _QuerySessionListReq_default_instance_;
class QuerySessionListRsp;
class QuerySessionListRspDefaultTypeInternal;
extern QuerySessionListRspDefaultTypeInternal _QuerySessionListRsp_default_instance_;
class QuerySessionReq;
class QuerySessionReqDefaultTypeInternal;
extern QuerySessionReqDefaultTypeInternal _QuerySessionReq_default_instance_;
class QuerySessionRsp;
class QuerySessionRspDefaultTypeInternal;
extern QuerySessionRspDefaultTypeInternal _QuerySessionRsp_default_instance_;
class Session;
class SessionDefaultTypeInternal;
extern SessionDefaultTypeInternal _Session_default_instance_;
class SessionMsg;
class SessionMsgDefaultTypeInternal;
extern SessionMsgDefaultTypeInternal _SessionMsg_default_instance_;
}  // namespace session

namespace session {

namespace protobuf_session_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_session_2eproto

enum ErrorCode {
  SUCCESS = 0,
  ERR_SYS_BEGIN = 104000100,
  ERR_SYS_OVERLOAD = 104000101,
  ERR_SYS_REJECT_SERVICE = 104000102,
  ERR_SYS_SERVER_INNER = 104000103,
  ERR_SYS_TIMEOUT = 104000104,
  ERR_SYS_NO_INSERVICE_LIST = 104000105,
  ERR_SYS_TASK_STATE = 104000106,
  ERR_SYS_TASK_DISCARD = 104000107,
  ERR_SYS_END = 104000199,
  ERR_PACKET_BEGIN = 104000200,
  ERR_PACKET_ENCODE = 104000201,
  ERR_PACKET_DECODE = 104000202,
  ERR_PACKET_HEADER = 104000203,
  ERR_PACKET_LEN = 104000204,
  ERR_PACKET_VERSION = 104000205,
  ERR_PACKET_FROM_SERVICE_ID = 104000206,
  ERR_PACKET_TO_SERVICE_ID = 104000207,
  ERR_PACKET_APP_ID = 104000208,
  ERR_PACKET_APP_VERSION = 104000209,
  ERR_PACKET_CONN_SEQ_ID = 104000210,
  ERR_PACKET_MSG_SEQ_ID = 104000211,
  ERR_PACKET_DATA_FORMAT = 104000212,
  ERR_PACKET_DATA_FIELD_0 = 104000213,
  ERR_PACKET_DATA_FIELD_1 = 104000214,
  ERR_PACKET_DATA_FIELD_2 = 104000215,
  ERR_PACKET_DATA_FIELD_3 = 104000216,
  ERR_PACKET_CHECK_SUM = 104000217,
  ERR_PACKET_UNKNOWN_REQUEST = 104000218,
  ERR_PACKET_END = 104000299,
  ERR_INTERFACE_BEGIN = 104000300,
  ERR_INTERFACE_PARAM = 104000301,
  ERR_INTERFACE_PERM = 104000302,
  ERR_INTERFACE_TIMEOUT = 104000303,
  ERR_INTERFACE_MASTER_TIMEOUT = 104000304,
  ERR_INTERFACE_SUB_TIMEOUT = 104000305,
  ERR_INTERFACE_END = 104000399,
  ERR_BUSINESS_BEGIN = 104001000,
  ERR_BUSINESS_END = 104009999,
  ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ErrorCode_IsValid(int value);
const ErrorCode ErrorCode_MIN = SUCCESS;
const ErrorCode ErrorCode_MAX = ERR_BUSINESS_END;
const int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor();
inline const ::std::string& ErrorCode_Name(ErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ErrorCode_descriptor(), value);
}
inline bool ErrorCode_Parse(
    const ::std::string& name, ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
// ===================================================================

class SessionMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:session.SessionMsg) */ {
 public:
  SessionMsg();
  virtual ~SessionMsg();

  SessionMsg(const SessionMsg& from);

  inline SessionMsg& operator=(const SessionMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SessionMsg(SessionMsg&& from) noexcept
    : SessionMsg() {
    *this = ::std::move(from);
  }

  inline SessionMsg& operator=(SessionMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SessionMsg& default_instance();

  enum ChoiceCase {
    kTestReq = 1,
    kTestRsp = 2,
    kCreateSessionReq = 3,
    kCreateSessionRsp = 4,
    kDelSessionReq = 5,
    kDelSessionRsp = 6,
    kQuerySessionReq = 7,
    kQuerySessionRsp = 8,
    kQuerySessionListReq = 9,
    kQuerySessionListRsp = 10,
    CHOICE_NOT_SET = 0,
  };

  static inline const SessionMsg* internal_default_instance() {
    return reinterpret_cast<const SessionMsg*>(
               &_SessionMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SessionMsg* other);
  friend void swap(SessionMsg& a, SessionMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SessionMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  SessionMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SessionMsg& from);
  void MergeFrom(const SessionMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SessionMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.TestReq test_req = 1;
  bool has_test_req() const;
  void clear_test_req();
  static const int kTestReqFieldNumber = 1;
  const ::common::TestReq& test_req() const;
  ::common::TestReq* mutable_test_req();
  ::common::TestReq* release_test_req();
  void set_allocated_test_req(::common::TestReq* test_req);

  // .common.TestRsp test_rsp = 2;
  bool has_test_rsp() const;
  void clear_test_rsp();
  static const int kTestRspFieldNumber = 2;
  const ::common::TestRsp& test_rsp() const;
  ::common::TestRsp* mutable_test_rsp();
  ::common::TestRsp* release_test_rsp();
  void set_allocated_test_rsp(::common::TestRsp* test_rsp);

  // .session.CreateSessionReq create_session_req = 3;
  bool has_create_session_req() const;
  void clear_create_session_req();
  static const int kCreateSessionReqFieldNumber = 3;
  const ::session::CreateSessionReq& create_session_req() const;
  ::session::CreateSessionReq* mutable_create_session_req();
  ::session::CreateSessionReq* release_create_session_req();
  void set_allocated_create_session_req(::session::CreateSessionReq* create_session_req);

  // .session.CreateSessionRsp create_session_rsp = 4;
  bool has_create_session_rsp() const;
  void clear_create_session_rsp();
  static const int kCreateSessionRspFieldNumber = 4;
  const ::session::CreateSessionRsp& create_session_rsp() const;
  ::session::CreateSessionRsp* mutable_create_session_rsp();
  ::session::CreateSessionRsp* release_create_session_rsp();
  void set_allocated_create_session_rsp(::session::CreateSessionRsp* create_session_rsp);

  // .session.DelSessionReq del_session_req = 5;
  bool has_del_session_req() const;
  void clear_del_session_req();
  static const int kDelSessionReqFieldNumber = 5;
  const ::session::DelSessionReq& del_session_req() const;
  ::session::DelSessionReq* mutable_del_session_req();
  ::session::DelSessionReq* release_del_session_req();
  void set_allocated_del_session_req(::session::DelSessionReq* del_session_req);

  // .session.DelSessionRsp del_session_rsp = 6;
  bool has_del_session_rsp() const;
  void clear_del_session_rsp();
  static const int kDelSessionRspFieldNumber = 6;
  const ::session::DelSessionRsp& del_session_rsp() const;
  ::session::DelSessionRsp* mutable_del_session_rsp();
  ::session::DelSessionRsp* release_del_session_rsp();
  void set_allocated_del_session_rsp(::session::DelSessionRsp* del_session_rsp);

  // .session.QuerySessionReq query_session_req = 7;
  bool has_query_session_req() const;
  void clear_query_session_req();
  static const int kQuerySessionReqFieldNumber = 7;
  const ::session::QuerySessionReq& query_session_req() const;
  ::session::QuerySessionReq* mutable_query_session_req();
  ::session::QuerySessionReq* release_query_session_req();
  void set_allocated_query_session_req(::session::QuerySessionReq* query_session_req);

  // .session.QuerySessionRsp query_session_rsp = 8;
  bool has_query_session_rsp() const;
  void clear_query_session_rsp();
  static const int kQuerySessionRspFieldNumber = 8;
  const ::session::QuerySessionRsp& query_session_rsp() const;
  ::session::QuerySessionRsp* mutable_query_session_rsp();
  ::session::QuerySessionRsp* release_query_session_rsp();
  void set_allocated_query_session_rsp(::session::QuerySessionRsp* query_session_rsp);

  // .session.QuerySessionListReq query_session_list_req = 9;
  bool has_query_session_list_req() const;
  void clear_query_session_list_req();
  static const int kQuerySessionListReqFieldNumber = 9;
  const ::session::QuerySessionListReq& query_session_list_req() const;
  ::session::QuerySessionListReq* mutable_query_session_list_req();
  ::session::QuerySessionListReq* release_query_session_list_req();
  void set_allocated_query_session_list_req(::session::QuerySessionListReq* query_session_list_req);

  // .session.QuerySessionListRsp query_session_list_rsp = 10;
  bool has_query_session_list_rsp() const;
  void clear_query_session_list_rsp();
  static const int kQuerySessionListRspFieldNumber = 10;
  const ::session::QuerySessionListRsp& query_session_list_rsp() const;
  ::session::QuerySessionListRsp* mutable_query_session_list_rsp();
  ::session::QuerySessionListRsp* release_query_session_list_rsp();
  void set_allocated_query_session_list_rsp(::session::QuerySessionListRsp* query_session_list_rsp);

  ChoiceCase choice_case() const;
  // @@protoc_insertion_point(class_scope:session.SessionMsg)
 private:
  void set_has_test_req();
  void set_has_test_rsp();
  void set_has_create_session_req();
  void set_has_create_session_rsp();
  void set_has_del_session_req();
  void set_has_del_session_rsp();
  void set_has_query_session_req();
  void set_has_query_session_rsp();
  void set_has_query_session_list_req();
  void set_has_query_session_list_rsp();

  inline bool has_choice() const;
  void clear_choice();
  inline void clear_has_choice();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ChoiceUnion {
    ChoiceUnion() {}
    ::common::TestReq* test_req_;
    ::common::TestRsp* test_rsp_;
    ::session::CreateSessionReq* create_session_req_;
    ::session::CreateSessionRsp* create_session_rsp_;
    ::session::DelSessionReq* del_session_req_;
    ::session::DelSessionRsp* del_session_rsp_;
    ::session::QuerySessionReq* query_session_req_;
    ::session::QuerySessionRsp* query_session_rsp_;
    ::session::QuerySessionListReq* query_session_list_req_;
    ::session::QuerySessionListRsp* query_session_list_rsp_;
  } choice_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_session_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Session : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:session.Session) */ {
 public:
  Session();
  virtual ~Session();

  Session(const Session& from);

  inline Session& operator=(const Session& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Session(Session&& from) noexcept
    : Session() {
    *this = ::std::move(from);
  }

  inline Session& operator=(Session&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Session& default_instance();

  static inline const Session* internal_default_instance() {
    return reinterpret_cast<const Session*>(
               &_Session_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Session* other);
  friend void swap(Session& a, Session& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Session* New() const PROTOBUF_FINAL { return New(NULL); }

  Session* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Session& from);
  void MergeFrom(const Session& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Session* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes in_ip = 4;
  void clear_in_ip();
  static const int kInIpFieldNumber = 4;
  const ::std::string& in_ip() const;
  void set_in_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_in_ip(::std::string&& value);
  #endif
  void set_in_ip(const char* value);
  void set_in_ip(const void* value, size_t size);
  ::std::string* mutable_in_ip();
  ::std::string* release_in_ip();
  void set_allocated_in_ip(::std::string* in_ip);

  // uint64 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint64 user_id() const;
  void set_user_id(::google::protobuf::uint64 value);

  // int32 service_id = 2;
  void clear_service_id();
  static const int kServiceIdFieldNumber = 2;
  ::google::protobuf::int32 service_id() const;
  void set_service_id(::google::protobuf::int32 value);

  // uint32 proc_id = 3;
  void clear_proc_id();
  static const int kProcIdFieldNumber = 3;
  ::google::protobuf::uint32 proc_id() const;
  void set_proc_id(::google::protobuf::uint32 value);

  // uint64 conn_id = 6;
  void clear_conn_id();
  static const int kConnIdFieldNumber = 6;
  ::google::protobuf::uint64 conn_id() const;
  void set_conn_id(::google::protobuf::uint64 value);

  // int32 in_port = 5;
  void clear_in_port();
  static const int kInPortFieldNumber = 5;
  ::google::protobuf::int32 in_port() const;
  void set_in_port(::google::protobuf::int32 value);

  // uint32 create_time = 7;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 7;
  ::google::protobuf::uint32 create_time() const;
  void set_create_time(::google::protobuf::uint32 value);

  // int32 version = 8;
  void clear_version();
  static const int kVersionFieldNumber = 8;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // uint32 app_id = 9;
  void clear_app_id();
  static const int kAppIdFieldNumber = 9;
  ::google::protobuf::uint32 app_id() const;
  void set_app_id(::google::protobuf::uint32 value);

  // uint32 app_version = 10;
  void clear_app_version();
  static const int kAppVersionFieldNumber = 10;
  ::google::protobuf::uint32 app_version() const;
  void set_app_version(::google::protobuf::uint32 value);

  // uint32 dev_type = 11;
  void clear_dev_type();
  static const int kDevTypeFieldNumber = 11;
  ::google::protobuf::uint32 dev_type() const;
  void set_dev_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:session.Session)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr in_ip_;
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::int32 service_id_;
  ::google::protobuf::uint32 proc_id_;
  ::google::protobuf::uint64 conn_id_;
  ::google::protobuf::int32 in_port_;
  ::google::protobuf::uint32 create_time_;
  ::google::protobuf::int32 version_;
  ::google::protobuf::uint32 app_id_;
  ::google::protobuf::uint32 app_version_;
  ::google::protobuf::uint32 dev_type_;
  mutable int _cached_size_;
  friend struct protobuf_session_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConnKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:session.ConnKey) */ {
 public:
  ConnKey();
  virtual ~ConnKey();

  ConnKey(const ConnKey& from);

  inline ConnKey& operator=(const ConnKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConnKey(ConnKey&& from) noexcept
    : ConnKey() {
    *this = ::std::move(from);
  }

  inline ConnKey& operator=(ConnKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnKey& default_instance();

  static inline const ConnKey* internal_default_instance() {
    return reinterpret_cast<const ConnKey*>(
               &_ConnKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ConnKey* other);
  friend void swap(ConnKey& a, ConnKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConnKey* New() const PROTOBUF_FINAL { return New(NULL); }

  ConnKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConnKey& from);
  void MergeFrom(const ConnKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConnKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes in_ip = 1;
  void clear_in_ip();
  static const int kInIpFieldNumber = 1;
  const ::std::string& in_ip() const;
  void set_in_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_in_ip(::std::string&& value);
  #endif
  void set_in_ip(const char* value);
  void set_in_ip(const void* value, size_t size);
  ::std::string* mutable_in_ip();
  ::std::string* release_in_ip();
  void set_allocated_in_ip(::std::string* in_ip);

  // uint64 conn_id = 3;
  void clear_conn_id();
  static const int kConnIdFieldNumber = 3;
  ::google::protobuf::uint64 conn_id() const;
  void set_conn_id(::google::protobuf::uint64 value);

  // int32 in_port = 2;
  void clear_in_port();
  static const int kInPortFieldNumber = 2;
  ::google::protobuf::int32 in_port() const;
  void set_in_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:session.ConnKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr in_ip_;
  ::google::protobuf::uint64 conn_id_;
  ::google::protobuf::int32 in_port_;
  mutable int _cached_size_;
  friend struct protobuf_session_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateSessionReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:session.CreateSessionReq) */ {
 public:
  CreateSessionReq();
  virtual ~CreateSessionReq();

  CreateSessionReq(const CreateSessionReq& from);

  inline CreateSessionReq& operator=(const CreateSessionReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateSessionReq(CreateSessionReq&& from) noexcept
    : CreateSessionReq() {
    *this = ::std::move(from);
  }

  inline CreateSessionReq& operator=(CreateSessionReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateSessionReq& default_instance();

  static inline const CreateSessionReq* internal_default_instance() {
    return reinterpret_cast<const CreateSessionReq*>(
               &_CreateSessionReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(CreateSessionReq* other);
  friend void swap(CreateSessionReq& a, CreateSessionReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateSessionReq* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateSessionReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateSessionReq& from);
  void MergeFrom(const CreateSessionReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateSessionReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .session.Session session = 1;
  bool has_session() const;
  void clear_session();
  static const int kSessionFieldNumber = 1;
  const ::session::Session& session() const;
  ::session::Session* mutable_session();
  ::session::Session* release_session();
  void set_allocated_session(::session::Session* session);

  // @@protoc_insertion_point(class_scope:session.CreateSessionReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::session::Session* session_;
  mutable int _cached_size_;
  friend struct protobuf_session_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateSessionRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:session.CreateSessionRsp) */ {
 public:
  CreateSessionRsp();
  virtual ~CreateSessionRsp();

  CreateSessionRsp(const CreateSessionRsp& from);

  inline CreateSessionRsp& operator=(const CreateSessionRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateSessionRsp(CreateSessionRsp&& from) noexcept
    : CreateSessionRsp() {
    *this = ::std::move(from);
  }

  inline CreateSessionRsp& operator=(CreateSessionRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateSessionRsp& default_instance();

  static inline const CreateSessionRsp* internal_default_instance() {
    return reinterpret_cast<const CreateSessionRsp*>(
               &_CreateSessionRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(CreateSessionRsp* other);
  friend void swap(CreateSessionRsp& a, CreateSessionRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateSessionRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateSessionRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateSessionRsp& from);
  void MergeFrom(const CreateSessionRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateSessionRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:session.CreateSessionRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_session_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DelSessionReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:session.DelSessionReq) */ {
 public:
  DelSessionReq();
  virtual ~DelSessionReq();

  DelSessionReq(const DelSessionReq& from);

  inline DelSessionReq& operator=(const DelSessionReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DelSessionReq(DelSessionReq&& from) noexcept
    : DelSessionReq() {
    *this = ::std::move(from);
  }

  inline DelSessionReq& operator=(DelSessionReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DelSessionReq& default_instance();

  static inline const DelSessionReq* internal_default_instance() {
    return reinterpret_cast<const DelSessionReq*>(
               &_DelSessionReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(DelSessionReq* other);
  friend void swap(DelSessionReq& a, DelSessionReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DelSessionReq* New() const PROTOBUF_FINAL { return New(NULL); }

  DelSessionReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DelSessionReq& from);
  void MergeFrom(const DelSessionReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DelSessionReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .session.ConnKey conn_key = 2;
  bool has_conn_key() const;
  void clear_conn_key();
  static const int kConnKeyFieldNumber = 2;
  const ::session::ConnKey& conn_key() const;
  ::session::ConnKey* mutable_conn_key();
  ::session::ConnKey* release_conn_key();
  void set_allocated_conn_key(::session::ConnKey* conn_key);

  // uint64 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint64 user_id() const;
  void set_user_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:session.DelSessionReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::session::ConnKey* conn_key_;
  ::google::protobuf::uint64 user_id_;
  mutable int _cached_size_;
  friend struct protobuf_session_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DelSessionRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:session.DelSessionRsp) */ {
 public:
  DelSessionRsp();
  virtual ~DelSessionRsp();

  DelSessionRsp(const DelSessionRsp& from);

  inline DelSessionRsp& operator=(const DelSessionRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DelSessionRsp(DelSessionRsp&& from) noexcept
    : DelSessionRsp() {
    *this = ::std::move(from);
  }

  inline DelSessionRsp& operator=(DelSessionRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DelSessionRsp& default_instance();

  static inline const DelSessionRsp* internal_default_instance() {
    return reinterpret_cast<const DelSessionRsp*>(
               &_DelSessionRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(DelSessionRsp* other);
  friend void swap(DelSessionRsp& a, DelSessionRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DelSessionRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  DelSessionRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DelSessionRsp& from);
  void MergeFrom(const DelSessionRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DelSessionRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:session.DelSessionRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_session_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuerySessionReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:session.QuerySessionReq) */ {
 public:
  QuerySessionReq();
  virtual ~QuerySessionReq();

  QuerySessionReq(const QuerySessionReq& from);

  inline QuerySessionReq& operator=(const QuerySessionReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuerySessionReq(QuerySessionReq&& from) noexcept
    : QuerySessionReq() {
    *this = ::std::move(from);
  }

  inline QuerySessionReq& operator=(QuerySessionReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuerySessionReq& default_instance();

  static inline const QuerySessionReq* internal_default_instance() {
    return reinterpret_cast<const QuerySessionReq*>(
               &_QuerySessionReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(QuerySessionReq* other);
  friend void swap(QuerySessionReq& a, QuerySessionReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuerySessionReq* New() const PROTOBUF_FINAL { return New(NULL); }

  QuerySessionReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QuerySessionReq& from);
  void MergeFrom(const QuerySessionReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QuerySessionReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint64 user_id() const;
  void set_user_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:session.QuerySessionReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 user_id_;
  mutable int _cached_size_;
  friend struct protobuf_session_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuerySessionRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:session.QuerySessionRsp) */ {
 public:
  QuerySessionRsp();
  virtual ~QuerySessionRsp();

  QuerySessionRsp(const QuerySessionRsp& from);

  inline QuerySessionRsp& operator=(const QuerySessionRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuerySessionRsp(QuerySessionRsp&& from) noexcept
    : QuerySessionRsp() {
    *this = ::std::move(from);
  }

  inline QuerySessionRsp& operator=(QuerySessionRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuerySessionRsp& default_instance();

  static inline const QuerySessionRsp* internal_default_instance() {
    return reinterpret_cast<const QuerySessionRsp*>(
               &_QuerySessionRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(QuerySessionRsp* other);
  friend void swap(QuerySessionRsp& a, QuerySessionRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuerySessionRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  QuerySessionRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QuerySessionRsp& from);
  void MergeFrom(const QuerySessionRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QuerySessionRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .session.Session session = 1;
  bool has_session() const;
  void clear_session();
  static const int kSessionFieldNumber = 1;
  const ::session::Session& session() const;
  ::session::Session* mutable_session();
  ::session::Session* release_session();
  void set_allocated_session(::session::Session* session);

  // @@protoc_insertion_point(class_scope:session.QuerySessionRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::session::Session* session_;
  mutable int _cached_size_;
  friend struct protobuf_session_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuerySessionListReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:session.QuerySessionListReq) */ {
 public:
  QuerySessionListReq();
  virtual ~QuerySessionListReq();

  QuerySessionListReq(const QuerySessionListReq& from);

  inline QuerySessionListReq& operator=(const QuerySessionListReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuerySessionListReq(QuerySessionListReq&& from) noexcept
    : QuerySessionListReq() {
    *this = ::std::move(from);
  }

  inline QuerySessionListReq& operator=(QuerySessionListReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuerySessionListReq& default_instance();

  static inline const QuerySessionListReq* internal_default_instance() {
    return reinterpret_cast<const QuerySessionListReq*>(
               &_QuerySessionListReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(QuerySessionListReq* other);
  friend void swap(QuerySessionListReq& a, QuerySessionListReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuerySessionListReq* New() const PROTOBUF_FINAL { return New(NULL); }

  QuerySessionListReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QuerySessionListReq& from);
  void MergeFrom(const QuerySessionListReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QuerySessionListReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 user_id_list = 1;
  int user_id_list_size() const;
  void clear_user_id_list();
  static const int kUserIdListFieldNumber = 1;
  ::google::protobuf::uint64 user_id_list(int index) const;
  void set_user_id_list(int index, ::google::protobuf::uint64 value);
  void add_user_id_list(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      user_id_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_user_id_list();

  // @@protoc_insertion_point(class_scope:session.QuerySessionListReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > user_id_list_;
  mutable int _user_id_list_cached_byte_size_;
  mutable int _cached_size_;
  friend struct protobuf_session_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuerySessionListRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:session.QuerySessionListRsp) */ {
 public:
  QuerySessionListRsp();
  virtual ~QuerySessionListRsp();

  QuerySessionListRsp(const QuerySessionListRsp& from);

  inline QuerySessionListRsp& operator=(const QuerySessionListRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuerySessionListRsp(QuerySessionListRsp&& from) noexcept
    : QuerySessionListRsp() {
    *this = ::std::move(from);
  }

  inline QuerySessionListRsp& operator=(QuerySessionListRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuerySessionListRsp& default_instance();

  static inline const QuerySessionListRsp* internal_default_instance() {
    return reinterpret_cast<const QuerySessionListRsp*>(
               &_QuerySessionListRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(QuerySessionListRsp* other);
  friend void swap(QuerySessionListRsp& a, QuerySessionListRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuerySessionListRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  QuerySessionListRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QuerySessionListRsp& from);
  void MergeFrom(const QuerySessionListRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QuerySessionListRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .session.Session session_list = 1;
  int session_list_size() const;
  void clear_session_list();
  static const int kSessionListFieldNumber = 1;
  const ::session::Session& session_list(int index) const;
  ::session::Session* mutable_session_list(int index);
  ::session::Session* add_session_list();
  ::google::protobuf::RepeatedPtrField< ::session::Session >*
      mutable_session_list();
  const ::google::protobuf::RepeatedPtrField< ::session::Session >&
      session_list() const;

  // @@protoc_insertion_point(class_scope:session.QuerySessionListRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::session::Session > session_list_;
  mutable int _cached_size_;
  friend struct protobuf_session_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SessionMsg

// .common.TestReq test_req = 1;
inline bool SessionMsg::has_test_req() const {
  return choice_case() == kTestReq;
}
inline void SessionMsg::set_has_test_req() {
  _oneof_case_[0] = kTestReq;
}
inline void SessionMsg::clear_test_req() {
  if (has_test_req()) {
    delete choice_.test_req_;
    clear_has_choice();
  }
}
inline  const ::common::TestReq& SessionMsg::test_req() const {
  // @@protoc_insertion_point(field_get:session.SessionMsg.test_req)
  return has_test_req()
      ? *choice_.test_req_
      : ::common::TestReq::default_instance();
}
inline ::common::TestReq* SessionMsg::mutable_test_req() {
  if (!has_test_req()) {
    clear_choice();
    set_has_test_req();
    choice_.test_req_ = new ::common::TestReq;
  }
  // @@protoc_insertion_point(field_mutable:session.SessionMsg.test_req)
  return choice_.test_req_;
}
inline ::common::TestReq* SessionMsg::release_test_req() {
  // @@protoc_insertion_point(field_release:session.SessionMsg.test_req)
  if (has_test_req()) {
    clear_has_choice();
    ::common::TestReq* temp = choice_.test_req_;
    choice_.test_req_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SessionMsg::set_allocated_test_req(::common::TestReq* test_req) {
  clear_choice();
  if (test_req) {
    set_has_test_req();
    choice_.test_req_ = test_req;
  }
  // @@protoc_insertion_point(field_set_allocated:session.SessionMsg.test_req)
}

// .common.TestRsp test_rsp = 2;
inline bool SessionMsg::has_test_rsp() const {
  return choice_case() == kTestRsp;
}
inline void SessionMsg::set_has_test_rsp() {
  _oneof_case_[0] = kTestRsp;
}
inline void SessionMsg::clear_test_rsp() {
  if (has_test_rsp()) {
    delete choice_.test_rsp_;
    clear_has_choice();
  }
}
inline  const ::common::TestRsp& SessionMsg::test_rsp() const {
  // @@protoc_insertion_point(field_get:session.SessionMsg.test_rsp)
  return has_test_rsp()
      ? *choice_.test_rsp_
      : ::common::TestRsp::default_instance();
}
inline ::common::TestRsp* SessionMsg::mutable_test_rsp() {
  if (!has_test_rsp()) {
    clear_choice();
    set_has_test_rsp();
    choice_.test_rsp_ = new ::common::TestRsp;
  }
  // @@protoc_insertion_point(field_mutable:session.SessionMsg.test_rsp)
  return choice_.test_rsp_;
}
inline ::common::TestRsp* SessionMsg::release_test_rsp() {
  // @@protoc_insertion_point(field_release:session.SessionMsg.test_rsp)
  if (has_test_rsp()) {
    clear_has_choice();
    ::common::TestRsp* temp = choice_.test_rsp_;
    choice_.test_rsp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SessionMsg::set_allocated_test_rsp(::common::TestRsp* test_rsp) {
  clear_choice();
  if (test_rsp) {
    set_has_test_rsp();
    choice_.test_rsp_ = test_rsp;
  }
  // @@protoc_insertion_point(field_set_allocated:session.SessionMsg.test_rsp)
}

// .session.CreateSessionReq create_session_req = 3;
inline bool SessionMsg::has_create_session_req() const {
  return choice_case() == kCreateSessionReq;
}
inline void SessionMsg::set_has_create_session_req() {
  _oneof_case_[0] = kCreateSessionReq;
}
inline void SessionMsg::clear_create_session_req() {
  if (has_create_session_req()) {
    delete choice_.create_session_req_;
    clear_has_choice();
  }
}
inline  const ::session::CreateSessionReq& SessionMsg::create_session_req() const {
  // @@protoc_insertion_point(field_get:session.SessionMsg.create_session_req)
  return has_create_session_req()
      ? *choice_.create_session_req_
      : ::session::CreateSessionReq::default_instance();
}
inline ::session::CreateSessionReq* SessionMsg::mutable_create_session_req() {
  if (!has_create_session_req()) {
    clear_choice();
    set_has_create_session_req();
    choice_.create_session_req_ = new ::session::CreateSessionReq;
  }
  // @@protoc_insertion_point(field_mutable:session.SessionMsg.create_session_req)
  return choice_.create_session_req_;
}
inline ::session::CreateSessionReq* SessionMsg::release_create_session_req() {
  // @@protoc_insertion_point(field_release:session.SessionMsg.create_session_req)
  if (has_create_session_req()) {
    clear_has_choice();
    ::session::CreateSessionReq* temp = choice_.create_session_req_;
    choice_.create_session_req_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SessionMsg::set_allocated_create_session_req(::session::CreateSessionReq* create_session_req) {
  clear_choice();
  if (create_session_req) {
    set_has_create_session_req();
    choice_.create_session_req_ = create_session_req;
  }
  // @@protoc_insertion_point(field_set_allocated:session.SessionMsg.create_session_req)
}

// .session.CreateSessionRsp create_session_rsp = 4;
inline bool SessionMsg::has_create_session_rsp() const {
  return choice_case() == kCreateSessionRsp;
}
inline void SessionMsg::set_has_create_session_rsp() {
  _oneof_case_[0] = kCreateSessionRsp;
}
inline void SessionMsg::clear_create_session_rsp() {
  if (has_create_session_rsp()) {
    delete choice_.create_session_rsp_;
    clear_has_choice();
  }
}
inline  const ::session::CreateSessionRsp& SessionMsg::create_session_rsp() const {
  // @@protoc_insertion_point(field_get:session.SessionMsg.create_session_rsp)
  return has_create_session_rsp()
      ? *choice_.create_session_rsp_
      : ::session::CreateSessionRsp::default_instance();
}
inline ::session::CreateSessionRsp* SessionMsg::mutable_create_session_rsp() {
  if (!has_create_session_rsp()) {
    clear_choice();
    set_has_create_session_rsp();
    choice_.create_session_rsp_ = new ::session::CreateSessionRsp;
  }
  // @@protoc_insertion_point(field_mutable:session.SessionMsg.create_session_rsp)
  return choice_.create_session_rsp_;
}
inline ::session::CreateSessionRsp* SessionMsg::release_create_session_rsp() {
  // @@protoc_insertion_point(field_release:session.SessionMsg.create_session_rsp)
  if (has_create_session_rsp()) {
    clear_has_choice();
    ::session::CreateSessionRsp* temp = choice_.create_session_rsp_;
    choice_.create_session_rsp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SessionMsg::set_allocated_create_session_rsp(::session::CreateSessionRsp* create_session_rsp) {
  clear_choice();
  if (create_session_rsp) {
    set_has_create_session_rsp();
    choice_.create_session_rsp_ = create_session_rsp;
  }
  // @@protoc_insertion_point(field_set_allocated:session.SessionMsg.create_session_rsp)
}

// .session.DelSessionReq del_session_req = 5;
inline bool SessionMsg::has_del_session_req() const {
  return choice_case() == kDelSessionReq;
}
inline void SessionMsg::set_has_del_session_req() {
  _oneof_case_[0] = kDelSessionReq;
}
inline void SessionMsg::clear_del_session_req() {
  if (has_del_session_req()) {
    delete choice_.del_session_req_;
    clear_has_choice();
  }
}
inline  const ::session::DelSessionReq& SessionMsg::del_session_req() const {
  // @@protoc_insertion_point(field_get:session.SessionMsg.del_session_req)
  return has_del_session_req()
      ? *choice_.del_session_req_
      : ::session::DelSessionReq::default_instance();
}
inline ::session::DelSessionReq* SessionMsg::mutable_del_session_req() {
  if (!has_del_session_req()) {
    clear_choice();
    set_has_del_session_req();
    choice_.del_session_req_ = new ::session::DelSessionReq;
  }
  // @@protoc_insertion_point(field_mutable:session.SessionMsg.del_session_req)
  return choice_.del_session_req_;
}
inline ::session::DelSessionReq* SessionMsg::release_del_session_req() {
  // @@protoc_insertion_point(field_release:session.SessionMsg.del_session_req)
  if (has_del_session_req()) {
    clear_has_choice();
    ::session::DelSessionReq* temp = choice_.del_session_req_;
    choice_.del_session_req_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SessionMsg::set_allocated_del_session_req(::session::DelSessionReq* del_session_req) {
  clear_choice();
  if (del_session_req) {
    set_has_del_session_req();
    choice_.del_session_req_ = del_session_req;
  }
  // @@protoc_insertion_point(field_set_allocated:session.SessionMsg.del_session_req)
}

// .session.DelSessionRsp del_session_rsp = 6;
inline bool SessionMsg::has_del_session_rsp() const {
  return choice_case() == kDelSessionRsp;
}
inline void SessionMsg::set_has_del_session_rsp() {
  _oneof_case_[0] = kDelSessionRsp;
}
inline void SessionMsg::clear_del_session_rsp() {
  if (has_del_session_rsp()) {
    delete choice_.del_session_rsp_;
    clear_has_choice();
  }
}
inline  const ::session::DelSessionRsp& SessionMsg::del_session_rsp() const {
  // @@protoc_insertion_point(field_get:session.SessionMsg.del_session_rsp)
  return has_del_session_rsp()
      ? *choice_.del_session_rsp_
      : ::session::DelSessionRsp::default_instance();
}
inline ::session::DelSessionRsp* SessionMsg::mutable_del_session_rsp() {
  if (!has_del_session_rsp()) {
    clear_choice();
    set_has_del_session_rsp();
    choice_.del_session_rsp_ = new ::session::DelSessionRsp;
  }
  // @@protoc_insertion_point(field_mutable:session.SessionMsg.del_session_rsp)
  return choice_.del_session_rsp_;
}
inline ::session::DelSessionRsp* SessionMsg::release_del_session_rsp() {
  // @@protoc_insertion_point(field_release:session.SessionMsg.del_session_rsp)
  if (has_del_session_rsp()) {
    clear_has_choice();
    ::session::DelSessionRsp* temp = choice_.del_session_rsp_;
    choice_.del_session_rsp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SessionMsg::set_allocated_del_session_rsp(::session::DelSessionRsp* del_session_rsp) {
  clear_choice();
  if (del_session_rsp) {
    set_has_del_session_rsp();
    choice_.del_session_rsp_ = del_session_rsp;
  }
  // @@protoc_insertion_point(field_set_allocated:session.SessionMsg.del_session_rsp)
}

// .session.QuerySessionReq query_session_req = 7;
inline bool SessionMsg::has_query_session_req() const {
  return choice_case() == kQuerySessionReq;
}
inline void SessionMsg::set_has_query_session_req() {
  _oneof_case_[0] = kQuerySessionReq;
}
inline void SessionMsg::clear_query_session_req() {
  if (has_query_session_req()) {
    delete choice_.query_session_req_;
    clear_has_choice();
  }
}
inline  const ::session::QuerySessionReq& SessionMsg::query_session_req() const {
  // @@protoc_insertion_point(field_get:session.SessionMsg.query_session_req)
  return has_query_session_req()
      ? *choice_.query_session_req_
      : ::session::QuerySessionReq::default_instance();
}
inline ::session::QuerySessionReq* SessionMsg::mutable_query_session_req() {
  if (!has_query_session_req()) {
    clear_choice();
    set_has_query_session_req();
    choice_.query_session_req_ = new ::session::QuerySessionReq;
  }
  // @@protoc_insertion_point(field_mutable:session.SessionMsg.query_session_req)
  return choice_.query_session_req_;
}
inline ::session::QuerySessionReq* SessionMsg::release_query_session_req() {
  // @@protoc_insertion_point(field_release:session.SessionMsg.query_session_req)
  if (has_query_session_req()) {
    clear_has_choice();
    ::session::QuerySessionReq* temp = choice_.query_session_req_;
    choice_.query_session_req_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SessionMsg::set_allocated_query_session_req(::session::QuerySessionReq* query_session_req) {
  clear_choice();
  if (query_session_req) {
    set_has_query_session_req();
    choice_.query_session_req_ = query_session_req;
  }
  // @@protoc_insertion_point(field_set_allocated:session.SessionMsg.query_session_req)
}

// .session.QuerySessionRsp query_session_rsp = 8;
inline bool SessionMsg::has_query_session_rsp() const {
  return choice_case() == kQuerySessionRsp;
}
inline void SessionMsg::set_has_query_session_rsp() {
  _oneof_case_[0] = kQuerySessionRsp;
}
inline void SessionMsg::clear_query_session_rsp() {
  if (has_query_session_rsp()) {
    delete choice_.query_session_rsp_;
    clear_has_choice();
  }
}
inline  const ::session::QuerySessionRsp& SessionMsg::query_session_rsp() const {
  // @@protoc_insertion_point(field_get:session.SessionMsg.query_session_rsp)
  return has_query_session_rsp()
      ? *choice_.query_session_rsp_
      : ::session::QuerySessionRsp::default_instance();
}
inline ::session::QuerySessionRsp* SessionMsg::mutable_query_session_rsp() {
  if (!has_query_session_rsp()) {
    clear_choice();
    set_has_query_session_rsp();
    choice_.query_session_rsp_ = new ::session::QuerySessionRsp;
  }
  // @@protoc_insertion_point(field_mutable:session.SessionMsg.query_session_rsp)
  return choice_.query_session_rsp_;
}
inline ::session::QuerySessionRsp* SessionMsg::release_query_session_rsp() {
  // @@protoc_insertion_point(field_release:session.SessionMsg.query_session_rsp)
  if (has_query_session_rsp()) {
    clear_has_choice();
    ::session::QuerySessionRsp* temp = choice_.query_session_rsp_;
    choice_.query_session_rsp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SessionMsg::set_allocated_query_session_rsp(::session::QuerySessionRsp* query_session_rsp) {
  clear_choice();
  if (query_session_rsp) {
    set_has_query_session_rsp();
    choice_.query_session_rsp_ = query_session_rsp;
  }
  // @@protoc_insertion_point(field_set_allocated:session.SessionMsg.query_session_rsp)
}

// .session.QuerySessionListReq query_session_list_req = 9;
inline bool SessionMsg::has_query_session_list_req() const {
  return choice_case() == kQuerySessionListReq;
}
inline void SessionMsg::set_has_query_session_list_req() {
  _oneof_case_[0] = kQuerySessionListReq;
}
inline void SessionMsg::clear_query_session_list_req() {
  if (has_query_session_list_req()) {
    delete choice_.query_session_list_req_;
    clear_has_choice();
  }
}
inline  const ::session::QuerySessionListReq& SessionMsg::query_session_list_req() const {
  // @@protoc_insertion_point(field_get:session.SessionMsg.query_session_list_req)
  return has_query_session_list_req()
      ? *choice_.query_session_list_req_
      : ::session::QuerySessionListReq::default_instance();
}
inline ::session::QuerySessionListReq* SessionMsg::mutable_query_session_list_req() {
  if (!has_query_session_list_req()) {
    clear_choice();
    set_has_query_session_list_req();
    choice_.query_session_list_req_ = new ::session::QuerySessionListReq;
  }
  // @@protoc_insertion_point(field_mutable:session.SessionMsg.query_session_list_req)
  return choice_.query_session_list_req_;
}
inline ::session::QuerySessionListReq* SessionMsg::release_query_session_list_req() {
  // @@protoc_insertion_point(field_release:session.SessionMsg.query_session_list_req)
  if (has_query_session_list_req()) {
    clear_has_choice();
    ::session::QuerySessionListReq* temp = choice_.query_session_list_req_;
    choice_.query_session_list_req_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SessionMsg::set_allocated_query_session_list_req(::session::QuerySessionListReq* query_session_list_req) {
  clear_choice();
  if (query_session_list_req) {
    set_has_query_session_list_req();
    choice_.query_session_list_req_ = query_session_list_req;
  }
  // @@protoc_insertion_point(field_set_allocated:session.SessionMsg.query_session_list_req)
}

// .session.QuerySessionListRsp query_session_list_rsp = 10;
inline bool SessionMsg::has_query_session_list_rsp() const {
  return choice_case() == kQuerySessionListRsp;
}
inline void SessionMsg::set_has_query_session_list_rsp() {
  _oneof_case_[0] = kQuerySessionListRsp;
}
inline void SessionMsg::clear_query_session_list_rsp() {
  if (has_query_session_list_rsp()) {
    delete choice_.query_session_list_rsp_;
    clear_has_choice();
  }
}
inline  const ::session::QuerySessionListRsp& SessionMsg::query_session_list_rsp() const {
  // @@protoc_insertion_point(field_get:session.SessionMsg.query_session_list_rsp)
  return has_query_session_list_rsp()
      ? *choice_.query_session_list_rsp_
      : ::session::QuerySessionListRsp::default_instance();
}
inline ::session::QuerySessionListRsp* SessionMsg::mutable_query_session_list_rsp() {
  if (!has_query_session_list_rsp()) {
    clear_choice();
    set_has_query_session_list_rsp();
    choice_.query_session_list_rsp_ = new ::session::QuerySessionListRsp;
  }
  // @@protoc_insertion_point(field_mutable:session.SessionMsg.query_session_list_rsp)
  return choice_.query_session_list_rsp_;
}
inline ::session::QuerySessionListRsp* SessionMsg::release_query_session_list_rsp() {
  // @@protoc_insertion_point(field_release:session.SessionMsg.query_session_list_rsp)
  if (has_query_session_list_rsp()) {
    clear_has_choice();
    ::session::QuerySessionListRsp* temp = choice_.query_session_list_rsp_;
    choice_.query_session_list_rsp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SessionMsg::set_allocated_query_session_list_rsp(::session::QuerySessionListRsp* query_session_list_rsp) {
  clear_choice();
  if (query_session_list_rsp) {
    set_has_query_session_list_rsp();
    choice_.query_session_list_rsp_ = query_session_list_rsp;
  }
  // @@protoc_insertion_point(field_set_allocated:session.SessionMsg.query_session_list_rsp)
}

inline bool SessionMsg::has_choice() const {
  return choice_case() != CHOICE_NOT_SET;
}
inline void SessionMsg::clear_has_choice() {
  _oneof_case_[0] = CHOICE_NOT_SET;
}
inline SessionMsg::ChoiceCase SessionMsg::choice_case() const {
  return SessionMsg::ChoiceCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Session

// uint64 user_id = 1;
inline void Session::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Session::user_id() const {
  // @@protoc_insertion_point(field_get:session.Session.user_id)
  return user_id_;
}
inline void Session::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:session.Session.user_id)
}

// int32 service_id = 2;
inline void Session::clear_service_id() {
  service_id_ = 0;
}
inline ::google::protobuf::int32 Session::service_id() const {
  // @@protoc_insertion_point(field_get:session.Session.service_id)
  return service_id_;
}
inline void Session::set_service_id(::google::protobuf::int32 value) {
  
  service_id_ = value;
  // @@protoc_insertion_point(field_set:session.Session.service_id)
}

// uint32 proc_id = 3;
inline void Session::clear_proc_id() {
  proc_id_ = 0u;
}
inline ::google::protobuf::uint32 Session::proc_id() const {
  // @@protoc_insertion_point(field_get:session.Session.proc_id)
  return proc_id_;
}
inline void Session::set_proc_id(::google::protobuf::uint32 value) {
  
  proc_id_ = value;
  // @@protoc_insertion_point(field_set:session.Session.proc_id)
}

// bytes in_ip = 4;
inline void Session::clear_in_ip() {
  in_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Session::in_ip() const {
  // @@protoc_insertion_point(field_get:session.Session.in_ip)
  return in_ip_.GetNoArena();
}
inline void Session::set_in_ip(const ::std::string& value) {
  
  in_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:session.Session.in_ip)
}
#if LANG_CXX11
inline void Session::set_in_ip(::std::string&& value) {
  
  in_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:session.Session.in_ip)
}
#endif
inline void Session::set_in_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  in_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:session.Session.in_ip)
}
inline void Session::set_in_ip(const void* value, size_t size) {
  
  in_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:session.Session.in_ip)
}
inline ::std::string* Session::mutable_in_ip() {
  
  // @@protoc_insertion_point(field_mutable:session.Session.in_ip)
  return in_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Session::release_in_ip() {
  // @@protoc_insertion_point(field_release:session.Session.in_ip)
  
  return in_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Session::set_allocated_in_ip(::std::string* in_ip) {
  if (in_ip != NULL) {
    
  } else {
    
  }
  in_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), in_ip);
  // @@protoc_insertion_point(field_set_allocated:session.Session.in_ip)
}

// int32 in_port = 5;
inline void Session::clear_in_port() {
  in_port_ = 0;
}
inline ::google::protobuf::int32 Session::in_port() const {
  // @@protoc_insertion_point(field_get:session.Session.in_port)
  return in_port_;
}
inline void Session::set_in_port(::google::protobuf::int32 value) {
  
  in_port_ = value;
  // @@protoc_insertion_point(field_set:session.Session.in_port)
}

// uint64 conn_id = 6;
inline void Session::clear_conn_id() {
  conn_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Session::conn_id() const {
  // @@protoc_insertion_point(field_get:session.Session.conn_id)
  return conn_id_;
}
inline void Session::set_conn_id(::google::protobuf::uint64 value) {
  
  conn_id_ = value;
  // @@protoc_insertion_point(field_set:session.Session.conn_id)
}

// uint32 create_time = 7;
inline void Session::clear_create_time() {
  create_time_ = 0u;
}
inline ::google::protobuf::uint32 Session::create_time() const {
  // @@protoc_insertion_point(field_get:session.Session.create_time)
  return create_time_;
}
inline void Session::set_create_time(::google::protobuf::uint32 value) {
  
  create_time_ = value;
  // @@protoc_insertion_point(field_set:session.Session.create_time)
}

// int32 version = 8;
inline void Session::clear_version() {
  version_ = 0;
}
inline ::google::protobuf::int32 Session::version() const {
  // @@protoc_insertion_point(field_get:session.Session.version)
  return version_;
}
inline void Session::set_version(::google::protobuf::int32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:session.Session.version)
}

// uint32 app_id = 9;
inline void Session::clear_app_id() {
  app_id_ = 0u;
}
inline ::google::protobuf::uint32 Session::app_id() const {
  // @@protoc_insertion_point(field_get:session.Session.app_id)
  return app_id_;
}
inline void Session::set_app_id(::google::protobuf::uint32 value) {
  
  app_id_ = value;
  // @@protoc_insertion_point(field_set:session.Session.app_id)
}

// uint32 app_version = 10;
inline void Session::clear_app_version() {
  app_version_ = 0u;
}
inline ::google::protobuf::uint32 Session::app_version() const {
  // @@protoc_insertion_point(field_get:session.Session.app_version)
  return app_version_;
}
inline void Session::set_app_version(::google::protobuf::uint32 value) {
  
  app_version_ = value;
  // @@protoc_insertion_point(field_set:session.Session.app_version)
}

// uint32 dev_type = 11;
inline void Session::clear_dev_type() {
  dev_type_ = 0u;
}
inline ::google::protobuf::uint32 Session::dev_type() const {
  // @@protoc_insertion_point(field_get:session.Session.dev_type)
  return dev_type_;
}
inline void Session::set_dev_type(::google::protobuf::uint32 value) {
  
  dev_type_ = value;
  // @@protoc_insertion_point(field_set:session.Session.dev_type)
}

// -------------------------------------------------------------------

// ConnKey

// bytes in_ip = 1;
inline void ConnKey::clear_in_ip() {
  in_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConnKey::in_ip() const {
  // @@protoc_insertion_point(field_get:session.ConnKey.in_ip)
  return in_ip_.GetNoArena();
}
inline void ConnKey::set_in_ip(const ::std::string& value) {
  
  in_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:session.ConnKey.in_ip)
}
#if LANG_CXX11
inline void ConnKey::set_in_ip(::std::string&& value) {
  
  in_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:session.ConnKey.in_ip)
}
#endif
inline void ConnKey::set_in_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  in_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:session.ConnKey.in_ip)
}
inline void ConnKey::set_in_ip(const void* value, size_t size) {
  
  in_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:session.ConnKey.in_ip)
}
inline ::std::string* ConnKey::mutable_in_ip() {
  
  // @@protoc_insertion_point(field_mutable:session.ConnKey.in_ip)
  return in_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnKey::release_in_ip() {
  // @@protoc_insertion_point(field_release:session.ConnKey.in_ip)
  
  return in_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnKey::set_allocated_in_ip(::std::string* in_ip) {
  if (in_ip != NULL) {
    
  } else {
    
  }
  in_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), in_ip);
  // @@protoc_insertion_point(field_set_allocated:session.ConnKey.in_ip)
}

// int32 in_port = 2;
inline void ConnKey::clear_in_port() {
  in_port_ = 0;
}
inline ::google::protobuf::int32 ConnKey::in_port() const {
  // @@protoc_insertion_point(field_get:session.ConnKey.in_port)
  return in_port_;
}
inline void ConnKey::set_in_port(::google::protobuf::int32 value) {
  
  in_port_ = value;
  // @@protoc_insertion_point(field_set:session.ConnKey.in_port)
}

// uint64 conn_id = 3;
inline void ConnKey::clear_conn_id() {
  conn_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ConnKey::conn_id() const {
  // @@protoc_insertion_point(field_get:session.ConnKey.conn_id)
  return conn_id_;
}
inline void ConnKey::set_conn_id(::google::protobuf::uint64 value) {
  
  conn_id_ = value;
  // @@protoc_insertion_point(field_set:session.ConnKey.conn_id)
}

// -------------------------------------------------------------------

// CreateSessionReq

// .session.Session session = 1;
inline bool CreateSessionReq::has_session() const {
  return this != internal_default_instance() && session_ != NULL;
}
inline void CreateSessionReq::clear_session() {
  if (GetArenaNoVirtual() == NULL && session_ != NULL) delete session_;
  session_ = NULL;
}
inline const ::session::Session& CreateSessionReq::session() const {
  const ::session::Session* p = session_;
  // @@protoc_insertion_point(field_get:session.CreateSessionReq.session)
  return p != NULL ? *p : *reinterpret_cast<const ::session::Session*>(
      &::session::_Session_default_instance_);
}
inline ::session::Session* CreateSessionReq::mutable_session() {
  
  if (session_ == NULL) {
    session_ = new ::session::Session;
  }
  // @@protoc_insertion_point(field_mutable:session.CreateSessionReq.session)
  return session_;
}
inline ::session::Session* CreateSessionReq::release_session() {
  // @@protoc_insertion_point(field_release:session.CreateSessionReq.session)
  
  ::session::Session* temp = session_;
  session_ = NULL;
  return temp;
}
inline void CreateSessionReq::set_allocated_session(::session::Session* session) {
  delete session_;
  session_ = session;
  if (session) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:session.CreateSessionReq.session)
}

// -------------------------------------------------------------------

// CreateSessionRsp

// -------------------------------------------------------------------

// DelSessionReq

// uint64 user_id = 1;
inline void DelSessionReq::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DelSessionReq::user_id() const {
  // @@protoc_insertion_point(field_get:session.DelSessionReq.user_id)
  return user_id_;
}
inline void DelSessionReq::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:session.DelSessionReq.user_id)
}

// .session.ConnKey conn_key = 2;
inline bool DelSessionReq::has_conn_key() const {
  return this != internal_default_instance() && conn_key_ != NULL;
}
inline void DelSessionReq::clear_conn_key() {
  if (GetArenaNoVirtual() == NULL && conn_key_ != NULL) delete conn_key_;
  conn_key_ = NULL;
}
inline const ::session::ConnKey& DelSessionReq::conn_key() const {
  const ::session::ConnKey* p = conn_key_;
  // @@protoc_insertion_point(field_get:session.DelSessionReq.conn_key)
  return p != NULL ? *p : *reinterpret_cast<const ::session::ConnKey*>(
      &::session::_ConnKey_default_instance_);
}
inline ::session::ConnKey* DelSessionReq::mutable_conn_key() {
  
  if (conn_key_ == NULL) {
    conn_key_ = new ::session::ConnKey;
  }
  // @@protoc_insertion_point(field_mutable:session.DelSessionReq.conn_key)
  return conn_key_;
}
inline ::session::ConnKey* DelSessionReq::release_conn_key() {
  // @@protoc_insertion_point(field_release:session.DelSessionReq.conn_key)
  
  ::session::ConnKey* temp = conn_key_;
  conn_key_ = NULL;
  return temp;
}
inline void DelSessionReq::set_allocated_conn_key(::session::ConnKey* conn_key) {
  delete conn_key_;
  conn_key_ = conn_key;
  if (conn_key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:session.DelSessionReq.conn_key)
}

// -------------------------------------------------------------------

// DelSessionRsp

// -------------------------------------------------------------------

// QuerySessionReq

// uint64 user_id = 1;
inline void QuerySessionReq::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 QuerySessionReq::user_id() const {
  // @@protoc_insertion_point(field_get:session.QuerySessionReq.user_id)
  return user_id_;
}
inline void QuerySessionReq::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:session.QuerySessionReq.user_id)
}

// -------------------------------------------------------------------

// QuerySessionRsp

// .session.Session session = 1;
inline bool QuerySessionRsp::has_session() const {
  return this != internal_default_instance() && session_ != NULL;
}
inline void QuerySessionRsp::clear_session() {
  if (GetArenaNoVirtual() == NULL && session_ != NULL) delete session_;
  session_ = NULL;
}
inline const ::session::Session& QuerySessionRsp::session() const {
  const ::session::Session* p = session_;
  // @@protoc_insertion_point(field_get:session.QuerySessionRsp.session)
  return p != NULL ? *p : *reinterpret_cast<const ::session::Session*>(
      &::session::_Session_default_instance_);
}
inline ::session::Session* QuerySessionRsp::mutable_session() {
  
  if (session_ == NULL) {
    session_ = new ::session::Session;
  }
  // @@protoc_insertion_point(field_mutable:session.QuerySessionRsp.session)
  return session_;
}
inline ::session::Session* QuerySessionRsp::release_session() {
  // @@protoc_insertion_point(field_release:session.QuerySessionRsp.session)
  
  ::session::Session* temp = session_;
  session_ = NULL;
  return temp;
}
inline void QuerySessionRsp::set_allocated_session(::session::Session* session) {
  delete session_;
  session_ = session;
  if (session) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:session.QuerySessionRsp.session)
}

// -------------------------------------------------------------------

// QuerySessionListReq

// repeated uint64 user_id_list = 1;
inline int QuerySessionListReq::user_id_list_size() const {
  return user_id_list_.size();
}
inline void QuerySessionListReq::clear_user_id_list() {
  user_id_list_.Clear();
}
inline ::google::protobuf::uint64 QuerySessionListReq::user_id_list(int index) const {
  // @@protoc_insertion_point(field_get:session.QuerySessionListReq.user_id_list)
  return user_id_list_.Get(index);
}
inline void QuerySessionListReq::set_user_id_list(int index, ::google::protobuf::uint64 value) {
  user_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:session.QuerySessionListReq.user_id_list)
}
inline void QuerySessionListReq::add_user_id_list(::google::protobuf::uint64 value) {
  user_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:session.QuerySessionListReq.user_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
QuerySessionListReq::user_id_list() const {
  // @@protoc_insertion_point(field_list:session.QuerySessionListReq.user_id_list)
  return user_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
QuerySessionListReq::mutable_user_id_list() {
  // @@protoc_insertion_point(field_mutable_list:session.QuerySessionListReq.user_id_list)
  return &user_id_list_;
}

// -------------------------------------------------------------------

// QuerySessionListRsp

// repeated .session.Session session_list = 1;
inline int QuerySessionListRsp::session_list_size() const {
  return session_list_.size();
}
inline void QuerySessionListRsp::clear_session_list() {
  session_list_.Clear();
}
inline const ::session::Session& QuerySessionListRsp::session_list(int index) const {
  // @@protoc_insertion_point(field_get:session.QuerySessionListRsp.session_list)
  return session_list_.Get(index);
}
inline ::session::Session* QuerySessionListRsp::mutable_session_list(int index) {
  // @@protoc_insertion_point(field_mutable:session.QuerySessionListRsp.session_list)
  return session_list_.Mutable(index);
}
inline ::session::Session* QuerySessionListRsp::add_session_list() {
  // @@protoc_insertion_point(field_add:session.QuerySessionListRsp.session_list)
  return session_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::session::Session >*
QuerySessionListRsp::mutable_session_list() {
  // @@protoc_insertion_point(field_mutable_list:session.QuerySessionListRsp.session_list)
  return &session_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::session::Session >&
QuerySessionListRsp::session_list() const {
  // @@protoc_insertion_point(field_list:session.QuerySessionListRsp.session_list)
  return session_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace session

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::session::ErrorCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::session::ErrorCode>() {
  return ::session::ErrorCode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_session_2eproto__INCLUDED
