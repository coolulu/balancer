// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: center.proto

#ifndef PROTOBUF_center_2eproto__INCLUDED
#define PROTOBUF_center_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace center {
class CenterMsg;
class CenterMsgDefaultTypeInternal;
extern CenterMsgDefaultTypeInternal _CenterMsg_default_instance_;
class HeartbeatReq;
class HeartbeatReqDefaultTypeInternal;
extern HeartbeatReqDefaultTypeInternal _HeartbeatReq_default_instance_;
class HeartbeatRsp;
class HeartbeatRspDefaultTypeInternal;
extern HeartbeatRspDefaultTypeInternal _HeartbeatRsp_default_instance_;
class TestReq;
class TestReqDefaultTypeInternal;
extern TestReqDefaultTypeInternal _TestReq_default_instance_;
class TestRsp;
class TestRspDefaultTypeInternal;
extern TestRspDefaultTypeInternal _TestRsp_default_instance_;
}  // namespace center

namespace center {

namespace protobuf_center_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_center_2eproto

enum ErrorCode {
  SUCCESS = 0,
  ERR_BEGIN = 1010000000,
  ERR_SYS_BEGIN = 1010000100,
  ERR_SYS_OVERLOAD = 1010000101,
  ERR_SYS_REJECT_SERVICE = 1010000102,
  ERR_SYS_SERVER_INNER = 1010000103,
  ERR_SYS_TIMEOUT = 1010000104,
  ERR_SYS_NO_INSERVICE_LIST = 1010000105,
  ERR_SYS_TASK_STATE = 1010000106,
  ERR_SYS_TASK_DISCARD = 1010000107,
  ERR_SYS_END = 1010000199,
  ERR_PACKET_BEGIN = 1010000200,
  ERR_PACKET_ENCODE = 1010000201,
  ERR_PACKET_DECODE = 1010000202,
  ERR_PACKET_HEADER = 1010000203,
  ERR_PACKET_LEN = 1010000204,
  ERR_PACKET_VERSION = 1010000205,
  ERR_PACKET_FROM_SERVICE_ID = 1010000206,
  ERR_PACKET_TO_SERVICE_ID = 1010000207,
  ERR_PACKET_APP_ID = 1010000208,
  ERR_PACKET_APP_VERSION = 1010000209,
  ERR_PACKET_CONN_SEQ_ID = 1010000210,
  ERR_PACKET_MSG_SEQ_ID = 1010000211,
  ERR_PACKET_DATA_FORMAT = 1010000212,
  ERR_PACKET_DATA_FIELD_0 = 1010000213,
  ERR_PACKET_DATA_FIELD_1 = 1010000214,
  ERR_PACKET_DATA_FIELD_2 = 1010000215,
  ERR_PACKET_DATA_FIELD_3 = 1010000216,
  ERR_PACKET_CHECK_SUM = 1010000217,
  ERR_PACKET_UNKNOWN_REQUEST = 1010000218,
  ERR_PACKET_END = 1010000299,
  ERR_INTERFACE_BEGIN = 1010000300,
  ERR_INTERFACE_PARAM = 1010000301,
  ERR_INTERFACE_PERM = 1010000302,
  ERR_INTERFACE_END = 1010000399,
  ERR_BUSINESS_BEGIN = 1010010000,
  ERR_PROBER_SERVICE_TIMEOUT = 1010010001,
  ERR_PROBER_SERVICE_ID = 1010010002,
  ERR_PROBER_CONF_JSON_TO_MAP = 1010010003,
  ERR_PROBER_CONF_LOAD_IP_INFO = 1010010004,
  ERR_END = 1010099999,
  ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ErrorCode_IsValid(int value);
const ErrorCode ErrorCode_MIN = SUCCESS;
const ErrorCode ErrorCode_MAX = ERR_END;
const int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor();
inline const ::std::string& ErrorCode_Name(ErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ErrorCode_descriptor(), value);
}
inline bool ErrorCode_Parse(
    const ::std::string& name, ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
enum State {
  STATE_BEGIN = 0,
  HEARTBEAT = 100,
  INSERVICE = 200,
  State_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  State_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool State_IsValid(int value);
const State State_MIN = STATE_BEGIN;
const State State_MAX = INSERVICE;
const int State_ARRAYSIZE = State_MAX + 1;

const ::google::protobuf::EnumDescriptor* State_descriptor();
inline const ::std::string& State_Name(State value) {
  return ::google::protobuf::internal::NameOfEnum(
    State_descriptor(), value);
}
inline bool State_Parse(
    const ::std::string& name, State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<State>(
    State_descriptor(), name, value);
}
enum Level {
  LEVEL_BEGIN = 0,
  INIT_LEVEL = 1000,
  Level_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Level_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Level_IsValid(int value);
const Level Level_MIN = LEVEL_BEGIN;
const Level Level_MAX = INIT_LEVEL;
const int Level_ARRAYSIZE = Level_MAX + 1;

const ::google::protobuf::EnumDescriptor* Level_descriptor();
inline const ::std::string& Level_Name(Level value) {
  return ::google::protobuf::internal::NameOfEnum(
    Level_descriptor(), value);
}
inline bool Level_Parse(
    const ::std::string& name, Level* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Level>(
    Level_descriptor(), name, value);
}
// ===================================================================

class TestReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:center.TestReq) */ {
 public:
  TestReq();
  virtual ~TestReq();

  TestReq(const TestReq& from);

  inline TestReq& operator=(const TestReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TestReq(TestReq&& from) noexcept
    : TestReq() {
    *this = ::std::move(from);
  }

  inline TestReq& operator=(TestReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestReq& default_instance();

  static inline const TestReq* internal_default_instance() {
    return reinterpret_cast<const TestReq*>(
               &_TestReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(TestReq* other);
  friend void swap(TestReq& a, TestReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TestReq* New() const PROTOBUF_FINAL { return New(NULL); }

  TestReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TestReq& from);
  void MergeFrom(const TestReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TestReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 service_id = 1;
  void clear_service_id();
  static const int kServiceIdFieldNumber = 1;
  ::google::protobuf::int32 service_id() const;
  void set_service_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:center.TestReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 service_id_;
  mutable int _cached_size_;
  friend struct protobuf_center_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TestRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:center.TestRsp) */ {
 public:
  TestRsp();
  virtual ~TestRsp();

  TestRsp(const TestRsp& from);

  inline TestRsp& operator=(const TestRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TestRsp(TestRsp&& from) noexcept
    : TestRsp() {
    *this = ::std::move(from);
  }

  inline TestRsp& operator=(TestRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestRsp& default_instance();

  static inline const TestRsp* internal_default_instance() {
    return reinterpret_cast<const TestRsp*>(
               &_TestRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(TestRsp* other);
  friend void swap(TestRsp& a, TestRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TestRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  TestRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TestRsp& from);
  void MergeFrom(const TestRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TestRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes service_name = 1;
  void clear_service_name();
  static const int kServiceNameFieldNumber = 1;
  const ::std::string& service_name() const;
  void set_service_name(const ::std::string& value);
  #if LANG_CXX11
  void set_service_name(::std::string&& value);
  #endif
  void set_service_name(const char* value);
  void set_service_name(const void* value, size_t size);
  ::std::string* mutable_service_name();
  ::std::string* release_service_name();
  void set_allocated_service_name(::std::string* service_name);

  // @@protoc_insertion_point(class_scope:center.TestRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr service_name_;
  mutable int _cached_size_;
  friend struct protobuf_center_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HeartbeatReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:center.HeartbeatReq) */ {
 public:
  HeartbeatReq();
  virtual ~HeartbeatReq();

  HeartbeatReq(const HeartbeatReq& from);

  inline HeartbeatReq& operator=(const HeartbeatReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HeartbeatReq(HeartbeatReq&& from) noexcept
    : HeartbeatReq() {
    *this = ::std::move(from);
  }

  inline HeartbeatReq& operator=(HeartbeatReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HeartbeatReq& default_instance();

  static inline const HeartbeatReq* internal_default_instance() {
    return reinterpret_cast<const HeartbeatReq*>(
               &_HeartbeatReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(HeartbeatReq* other);
  friend void swap(HeartbeatReq& a, HeartbeatReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HeartbeatReq* New() const PROTOBUF_FINAL { return New(NULL); }

  HeartbeatReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HeartbeatReq& from);
  void MergeFrom(const HeartbeatReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HeartbeatReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes conf_json = 6;
  void clear_conf_json();
  static const int kConfJsonFieldNumber = 6;
  const ::std::string& conf_json() const;
  void set_conf_json(const ::std::string& value);
  #if LANG_CXX11
  void set_conf_json(::std::string&& value);
  #endif
  void set_conf_json(const char* value);
  void set_conf_json(const void* value, size_t size);
  ::std::string* mutable_conf_json();
  ::std::string* release_conf_json();
  void set_allocated_conf_json(::std::string* conf_json);

  // int32 level = 1;
  void clear_level();
  static const int kLevelFieldNumber = 1;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // int32 service_id = 2;
  void clear_service_id();
  static const int kServiceIdFieldNumber = 2;
  ::google::protobuf::int32 service_id() const;
  void set_service_id(::google::protobuf::int32 value);

  // uint32 proc_id = 3;
  void clear_proc_id();
  static const int kProcIdFieldNumber = 3;
  ::google::protobuf::uint32 proc_id() const;
  void set_proc_id(::google::protobuf::uint32 value);

  // uint32 state = 4;
  void clear_state();
  static const int kStateFieldNumber = 4;
  ::google::protobuf::uint32 state() const;
  void set_state(::google::protobuf::uint32 value);

  // uint64 conf_update_time = 5;
  void clear_conf_update_time();
  static const int kConfUpdateTimeFieldNumber = 5;
  ::google::protobuf::uint64 conf_update_time() const;
  void set_conf_update_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:center.HeartbeatReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr conf_json_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 service_id_;
  ::google::protobuf::uint32 proc_id_;
  ::google::protobuf::uint32 state_;
  ::google::protobuf::uint64 conf_update_time_;
  mutable int _cached_size_;
  friend struct protobuf_center_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HeartbeatRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:center.HeartbeatRsp) */ {
 public:
  HeartbeatRsp();
  virtual ~HeartbeatRsp();

  HeartbeatRsp(const HeartbeatRsp& from);

  inline HeartbeatRsp& operator=(const HeartbeatRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HeartbeatRsp(HeartbeatRsp&& from) noexcept
    : HeartbeatRsp() {
    *this = ::std::move(from);
  }

  inline HeartbeatRsp& operator=(HeartbeatRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HeartbeatRsp& default_instance();

  static inline const HeartbeatRsp* internal_default_instance() {
    return reinterpret_cast<const HeartbeatRsp*>(
               &_HeartbeatRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(HeartbeatRsp* other);
  friend void swap(HeartbeatRsp& a, HeartbeatRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HeartbeatRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  HeartbeatRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HeartbeatRsp& from);
  void MergeFrom(const HeartbeatRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HeartbeatRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 level = 1;
  void clear_level();
  static const int kLevelFieldNumber = 1;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // int32 service_id = 2;
  void clear_service_id();
  static const int kServiceIdFieldNumber = 2;
  ::google::protobuf::int32 service_id() const;
  void set_service_id(::google::protobuf::int32 value);

  // uint64 conf_update_time = 4;
  void clear_conf_update_time();
  static const int kConfUpdateTimeFieldNumber = 4;
  ::google::protobuf::uint64 conf_update_time() const;
  void set_conf_update_time(::google::protobuf::uint64 value);

  // int32 proc_id = 3;
  void clear_proc_id();
  static const int kProcIdFieldNumber = 3;
  ::google::protobuf::int32 proc_id() const;
  void set_proc_id(::google::protobuf::int32 value);

  // uint32 expire_second = 5;
  void clear_expire_second();
  static const int kExpireSecondFieldNumber = 5;
  ::google::protobuf::uint32 expire_second() const;
  void set_expire_second(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:center.HeartbeatRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 service_id_;
  ::google::protobuf::uint64 conf_update_time_;
  ::google::protobuf::int32 proc_id_;
  ::google::protobuf::uint32 expire_second_;
  mutable int _cached_size_;
  friend struct protobuf_center_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CenterMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:center.CenterMsg) */ {
 public:
  CenterMsg();
  virtual ~CenterMsg();

  CenterMsg(const CenterMsg& from);

  inline CenterMsg& operator=(const CenterMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CenterMsg(CenterMsg&& from) noexcept
    : CenterMsg() {
    *this = ::std::move(from);
  }

  inline CenterMsg& operator=(CenterMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CenterMsg& default_instance();

  enum ChoiceCase {
    kTestReq = 1,
    kTestRsp = 2,
    kHeartbeatReq = 3,
    kHeartbeatRsp = 4,
    CHOICE_NOT_SET = 0,
  };

  static inline const CenterMsg* internal_default_instance() {
    return reinterpret_cast<const CenterMsg*>(
               &_CenterMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(CenterMsg* other);
  friend void swap(CenterMsg& a, CenterMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CenterMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  CenterMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CenterMsg& from);
  void MergeFrom(const CenterMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CenterMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .center.TestReq test_req = 1;
  bool has_test_req() const;
  void clear_test_req();
  static const int kTestReqFieldNumber = 1;
  const ::center::TestReq& test_req() const;
  ::center::TestReq* mutable_test_req();
  ::center::TestReq* release_test_req();
  void set_allocated_test_req(::center::TestReq* test_req);

  // .center.TestRsp test_rsp = 2;
  bool has_test_rsp() const;
  void clear_test_rsp();
  static const int kTestRspFieldNumber = 2;
  const ::center::TestRsp& test_rsp() const;
  ::center::TestRsp* mutable_test_rsp();
  ::center::TestRsp* release_test_rsp();
  void set_allocated_test_rsp(::center::TestRsp* test_rsp);

  // .center.HeartbeatReq Heartbeat_req = 3;
  bool has_heartbeat_req() const;
  void clear_heartbeat_req();
  static const int kHeartbeatReqFieldNumber = 3;
  const ::center::HeartbeatReq& heartbeat_req() const;
  ::center::HeartbeatReq* mutable_heartbeat_req();
  ::center::HeartbeatReq* release_heartbeat_req();
  void set_allocated_heartbeat_req(::center::HeartbeatReq* heartbeat_req);

  // .center.HeartbeatRsp Heartbeat_rsp = 4;
  bool has_heartbeat_rsp() const;
  void clear_heartbeat_rsp();
  static const int kHeartbeatRspFieldNumber = 4;
  const ::center::HeartbeatRsp& heartbeat_rsp() const;
  ::center::HeartbeatRsp* mutable_heartbeat_rsp();
  ::center::HeartbeatRsp* release_heartbeat_rsp();
  void set_allocated_heartbeat_rsp(::center::HeartbeatRsp* heartbeat_rsp);

  ChoiceCase choice_case() const;
  // @@protoc_insertion_point(class_scope:center.CenterMsg)
 private:
  void set_has_test_req();
  void set_has_test_rsp();
  void set_has_heartbeat_req();
  void set_has_heartbeat_rsp();

  inline bool has_choice() const;
  void clear_choice();
  inline void clear_has_choice();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ChoiceUnion {
    ChoiceUnion() {}
    ::center::TestReq* test_req_;
    ::center::TestRsp* test_rsp_;
    ::center::HeartbeatReq* heartbeat_req_;
    ::center::HeartbeatRsp* heartbeat_rsp_;
  } choice_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_center_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TestReq

// int32 service_id = 1;
inline void TestReq::clear_service_id() {
  service_id_ = 0;
}
inline ::google::protobuf::int32 TestReq::service_id() const {
  // @@protoc_insertion_point(field_get:center.TestReq.service_id)
  return service_id_;
}
inline void TestReq::set_service_id(::google::protobuf::int32 value) {
  
  service_id_ = value;
  // @@protoc_insertion_point(field_set:center.TestReq.service_id)
}

// -------------------------------------------------------------------

// TestRsp

// bytes service_name = 1;
inline void TestRsp::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestRsp::service_name() const {
  // @@protoc_insertion_point(field_get:center.TestRsp.service_name)
  return service_name_.GetNoArena();
}
inline void TestRsp::set_service_name(const ::std::string& value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:center.TestRsp.service_name)
}
#if LANG_CXX11
inline void TestRsp::set_service_name(::std::string&& value) {
  
  service_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:center.TestRsp.service_name)
}
#endif
inline void TestRsp::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:center.TestRsp.service_name)
}
inline void TestRsp::set_service_name(const void* value, size_t size) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:center.TestRsp.service_name)
}
inline ::std::string* TestRsp::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:center.TestRsp.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestRsp::release_service_name() {
  // @@protoc_insertion_point(field_release:center.TestRsp.service_name)
  
  return service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestRsp::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:center.TestRsp.service_name)
}

// -------------------------------------------------------------------

// HeartbeatReq

// int32 level = 1;
inline void HeartbeatReq::clear_level() {
  level_ = 0;
}
inline ::google::protobuf::int32 HeartbeatReq::level() const {
  // @@protoc_insertion_point(field_get:center.HeartbeatReq.level)
  return level_;
}
inline void HeartbeatReq::set_level(::google::protobuf::int32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:center.HeartbeatReq.level)
}

// int32 service_id = 2;
inline void HeartbeatReq::clear_service_id() {
  service_id_ = 0;
}
inline ::google::protobuf::int32 HeartbeatReq::service_id() const {
  // @@protoc_insertion_point(field_get:center.HeartbeatReq.service_id)
  return service_id_;
}
inline void HeartbeatReq::set_service_id(::google::protobuf::int32 value) {
  
  service_id_ = value;
  // @@protoc_insertion_point(field_set:center.HeartbeatReq.service_id)
}

// uint32 proc_id = 3;
inline void HeartbeatReq::clear_proc_id() {
  proc_id_ = 0u;
}
inline ::google::protobuf::uint32 HeartbeatReq::proc_id() const {
  // @@protoc_insertion_point(field_get:center.HeartbeatReq.proc_id)
  return proc_id_;
}
inline void HeartbeatReq::set_proc_id(::google::protobuf::uint32 value) {
  
  proc_id_ = value;
  // @@protoc_insertion_point(field_set:center.HeartbeatReq.proc_id)
}

// uint32 state = 4;
inline void HeartbeatReq::clear_state() {
  state_ = 0u;
}
inline ::google::protobuf::uint32 HeartbeatReq::state() const {
  // @@protoc_insertion_point(field_get:center.HeartbeatReq.state)
  return state_;
}
inline void HeartbeatReq::set_state(::google::protobuf::uint32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:center.HeartbeatReq.state)
}

// uint64 conf_update_time = 5;
inline void HeartbeatReq::clear_conf_update_time() {
  conf_update_time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 HeartbeatReq::conf_update_time() const {
  // @@protoc_insertion_point(field_get:center.HeartbeatReq.conf_update_time)
  return conf_update_time_;
}
inline void HeartbeatReq::set_conf_update_time(::google::protobuf::uint64 value) {
  
  conf_update_time_ = value;
  // @@protoc_insertion_point(field_set:center.HeartbeatReq.conf_update_time)
}

// bytes conf_json = 6;
inline void HeartbeatReq::clear_conf_json() {
  conf_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HeartbeatReq::conf_json() const {
  // @@protoc_insertion_point(field_get:center.HeartbeatReq.conf_json)
  return conf_json_.GetNoArena();
}
inline void HeartbeatReq::set_conf_json(const ::std::string& value) {
  
  conf_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:center.HeartbeatReq.conf_json)
}
#if LANG_CXX11
inline void HeartbeatReq::set_conf_json(::std::string&& value) {
  
  conf_json_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:center.HeartbeatReq.conf_json)
}
#endif
inline void HeartbeatReq::set_conf_json(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  conf_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:center.HeartbeatReq.conf_json)
}
inline void HeartbeatReq::set_conf_json(const void* value, size_t size) {
  
  conf_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:center.HeartbeatReq.conf_json)
}
inline ::std::string* HeartbeatReq::mutable_conf_json() {
  
  // @@protoc_insertion_point(field_mutable:center.HeartbeatReq.conf_json)
  return conf_json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeartbeatReq::release_conf_json() {
  // @@protoc_insertion_point(field_release:center.HeartbeatReq.conf_json)
  
  return conf_json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeartbeatReq::set_allocated_conf_json(::std::string* conf_json) {
  if (conf_json != NULL) {
    
  } else {
    
  }
  conf_json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), conf_json);
  // @@protoc_insertion_point(field_set_allocated:center.HeartbeatReq.conf_json)
}

// -------------------------------------------------------------------

// HeartbeatRsp

// int32 level = 1;
inline void HeartbeatRsp::clear_level() {
  level_ = 0;
}
inline ::google::protobuf::int32 HeartbeatRsp::level() const {
  // @@protoc_insertion_point(field_get:center.HeartbeatRsp.level)
  return level_;
}
inline void HeartbeatRsp::set_level(::google::protobuf::int32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:center.HeartbeatRsp.level)
}

// int32 service_id = 2;
inline void HeartbeatRsp::clear_service_id() {
  service_id_ = 0;
}
inline ::google::protobuf::int32 HeartbeatRsp::service_id() const {
  // @@protoc_insertion_point(field_get:center.HeartbeatRsp.service_id)
  return service_id_;
}
inline void HeartbeatRsp::set_service_id(::google::protobuf::int32 value) {
  
  service_id_ = value;
  // @@protoc_insertion_point(field_set:center.HeartbeatRsp.service_id)
}

// int32 proc_id = 3;
inline void HeartbeatRsp::clear_proc_id() {
  proc_id_ = 0;
}
inline ::google::protobuf::int32 HeartbeatRsp::proc_id() const {
  // @@protoc_insertion_point(field_get:center.HeartbeatRsp.proc_id)
  return proc_id_;
}
inline void HeartbeatRsp::set_proc_id(::google::protobuf::int32 value) {
  
  proc_id_ = value;
  // @@protoc_insertion_point(field_set:center.HeartbeatRsp.proc_id)
}

// uint64 conf_update_time = 4;
inline void HeartbeatRsp::clear_conf_update_time() {
  conf_update_time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 HeartbeatRsp::conf_update_time() const {
  // @@protoc_insertion_point(field_get:center.HeartbeatRsp.conf_update_time)
  return conf_update_time_;
}
inline void HeartbeatRsp::set_conf_update_time(::google::protobuf::uint64 value) {
  
  conf_update_time_ = value;
  // @@protoc_insertion_point(field_set:center.HeartbeatRsp.conf_update_time)
}

// uint32 expire_second = 5;
inline void HeartbeatRsp::clear_expire_second() {
  expire_second_ = 0u;
}
inline ::google::protobuf::uint32 HeartbeatRsp::expire_second() const {
  // @@protoc_insertion_point(field_get:center.HeartbeatRsp.expire_second)
  return expire_second_;
}
inline void HeartbeatRsp::set_expire_second(::google::protobuf::uint32 value) {
  
  expire_second_ = value;
  // @@protoc_insertion_point(field_set:center.HeartbeatRsp.expire_second)
}

// -------------------------------------------------------------------

// CenterMsg

// .center.TestReq test_req = 1;
inline bool CenterMsg::has_test_req() const {
  return choice_case() == kTestReq;
}
inline void CenterMsg::set_has_test_req() {
  _oneof_case_[0] = kTestReq;
}
inline void CenterMsg::clear_test_req() {
  if (has_test_req()) {
    delete choice_.test_req_;
    clear_has_choice();
  }
}
inline  const ::center::TestReq& CenterMsg::test_req() const {
  // @@protoc_insertion_point(field_get:center.CenterMsg.test_req)
  return has_test_req()
      ? *choice_.test_req_
      : ::center::TestReq::default_instance();
}
inline ::center::TestReq* CenterMsg::mutable_test_req() {
  if (!has_test_req()) {
    clear_choice();
    set_has_test_req();
    choice_.test_req_ = new ::center::TestReq;
  }
  // @@protoc_insertion_point(field_mutable:center.CenterMsg.test_req)
  return choice_.test_req_;
}
inline ::center::TestReq* CenterMsg::release_test_req() {
  // @@protoc_insertion_point(field_release:center.CenterMsg.test_req)
  if (has_test_req()) {
    clear_has_choice();
    ::center::TestReq* temp = choice_.test_req_;
    choice_.test_req_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void CenterMsg::set_allocated_test_req(::center::TestReq* test_req) {
  clear_choice();
  if (test_req) {
    set_has_test_req();
    choice_.test_req_ = test_req;
  }
  // @@protoc_insertion_point(field_set_allocated:center.CenterMsg.test_req)
}

// .center.TestRsp test_rsp = 2;
inline bool CenterMsg::has_test_rsp() const {
  return choice_case() == kTestRsp;
}
inline void CenterMsg::set_has_test_rsp() {
  _oneof_case_[0] = kTestRsp;
}
inline void CenterMsg::clear_test_rsp() {
  if (has_test_rsp()) {
    delete choice_.test_rsp_;
    clear_has_choice();
  }
}
inline  const ::center::TestRsp& CenterMsg::test_rsp() const {
  // @@protoc_insertion_point(field_get:center.CenterMsg.test_rsp)
  return has_test_rsp()
      ? *choice_.test_rsp_
      : ::center::TestRsp::default_instance();
}
inline ::center::TestRsp* CenterMsg::mutable_test_rsp() {
  if (!has_test_rsp()) {
    clear_choice();
    set_has_test_rsp();
    choice_.test_rsp_ = new ::center::TestRsp;
  }
  // @@protoc_insertion_point(field_mutable:center.CenterMsg.test_rsp)
  return choice_.test_rsp_;
}
inline ::center::TestRsp* CenterMsg::release_test_rsp() {
  // @@protoc_insertion_point(field_release:center.CenterMsg.test_rsp)
  if (has_test_rsp()) {
    clear_has_choice();
    ::center::TestRsp* temp = choice_.test_rsp_;
    choice_.test_rsp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void CenterMsg::set_allocated_test_rsp(::center::TestRsp* test_rsp) {
  clear_choice();
  if (test_rsp) {
    set_has_test_rsp();
    choice_.test_rsp_ = test_rsp;
  }
  // @@protoc_insertion_point(field_set_allocated:center.CenterMsg.test_rsp)
}

// .center.HeartbeatReq Heartbeat_req = 3;
inline bool CenterMsg::has_heartbeat_req() const {
  return choice_case() == kHeartbeatReq;
}
inline void CenterMsg::set_has_heartbeat_req() {
  _oneof_case_[0] = kHeartbeatReq;
}
inline void CenterMsg::clear_heartbeat_req() {
  if (has_heartbeat_req()) {
    delete choice_.heartbeat_req_;
    clear_has_choice();
  }
}
inline  const ::center::HeartbeatReq& CenterMsg::heartbeat_req() const {
  // @@protoc_insertion_point(field_get:center.CenterMsg.Heartbeat_req)
  return has_heartbeat_req()
      ? *choice_.heartbeat_req_
      : ::center::HeartbeatReq::default_instance();
}
inline ::center::HeartbeatReq* CenterMsg::mutable_heartbeat_req() {
  if (!has_heartbeat_req()) {
    clear_choice();
    set_has_heartbeat_req();
    choice_.heartbeat_req_ = new ::center::HeartbeatReq;
  }
  // @@protoc_insertion_point(field_mutable:center.CenterMsg.Heartbeat_req)
  return choice_.heartbeat_req_;
}
inline ::center::HeartbeatReq* CenterMsg::release_heartbeat_req() {
  // @@protoc_insertion_point(field_release:center.CenterMsg.Heartbeat_req)
  if (has_heartbeat_req()) {
    clear_has_choice();
    ::center::HeartbeatReq* temp = choice_.heartbeat_req_;
    choice_.heartbeat_req_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void CenterMsg::set_allocated_heartbeat_req(::center::HeartbeatReq* heartbeat_req) {
  clear_choice();
  if (heartbeat_req) {
    set_has_heartbeat_req();
    choice_.heartbeat_req_ = heartbeat_req;
  }
  // @@protoc_insertion_point(field_set_allocated:center.CenterMsg.Heartbeat_req)
}

// .center.HeartbeatRsp Heartbeat_rsp = 4;
inline bool CenterMsg::has_heartbeat_rsp() const {
  return choice_case() == kHeartbeatRsp;
}
inline void CenterMsg::set_has_heartbeat_rsp() {
  _oneof_case_[0] = kHeartbeatRsp;
}
inline void CenterMsg::clear_heartbeat_rsp() {
  if (has_heartbeat_rsp()) {
    delete choice_.heartbeat_rsp_;
    clear_has_choice();
  }
}
inline  const ::center::HeartbeatRsp& CenterMsg::heartbeat_rsp() const {
  // @@protoc_insertion_point(field_get:center.CenterMsg.Heartbeat_rsp)
  return has_heartbeat_rsp()
      ? *choice_.heartbeat_rsp_
      : ::center::HeartbeatRsp::default_instance();
}
inline ::center::HeartbeatRsp* CenterMsg::mutable_heartbeat_rsp() {
  if (!has_heartbeat_rsp()) {
    clear_choice();
    set_has_heartbeat_rsp();
    choice_.heartbeat_rsp_ = new ::center::HeartbeatRsp;
  }
  // @@protoc_insertion_point(field_mutable:center.CenterMsg.Heartbeat_rsp)
  return choice_.heartbeat_rsp_;
}
inline ::center::HeartbeatRsp* CenterMsg::release_heartbeat_rsp() {
  // @@protoc_insertion_point(field_release:center.CenterMsg.Heartbeat_rsp)
  if (has_heartbeat_rsp()) {
    clear_has_choice();
    ::center::HeartbeatRsp* temp = choice_.heartbeat_rsp_;
    choice_.heartbeat_rsp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void CenterMsg::set_allocated_heartbeat_rsp(::center::HeartbeatRsp* heartbeat_rsp) {
  clear_choice();
  if (heartbeat_rsp) {
    set_has_heartbeat_rsp();
    choice_.heartbeat_rsp_ = heartbeat_rsp;
  }
  // @@protoc_insertion_point(field_set_allocated:center.CenterMsg.Heartbeat_rsp)
}

inline bool CenterMsg::has_choice() const {
  return choice_case() != CHOICE_NOT_SET;
}
inline void CenterMsg::clear_has_choice() {
  _oneof_case_[0] = CHOICE_NOT_SET;
}
inline CenterMsg::ChoiceCase CenterMsg::choice_case() const {
  return CenterMsg::ChoiceCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace center

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::center::ErrorCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::center::ErrorCode>() {
  return ::center::ErrorCode_descriptor();
}
template <> struct is_proto_enum< ::center::State> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::center::State>() {
  return ::center::State_descriptor();
}
template <> struct is_proto_enum< ::center::Level> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::center::Level>() {
  return ::center::Level_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_center_2eproto__INCLUDED
