// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proxy.proto

#ifndef PROTOBUF_proxy_2eproto__INCLUDED
#define PROTOBUF_proxy_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
namespace proxy {
class ProxyMsg;
class ProxyMsgDefaultTypeInternal;
extern ProxyMsgDefaultTypeInternal _ProxyMsg_default_instance_;
}  // namespace proxy

namespace proxy {

namespace protobuf_proxy_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_proxy_2eproto

enum ErrorCode {
  SUCCESS = 0,
  ERR_SYS_BEGIN = 301000100,
  ERR_SYS_OVERLOAD = 301000101,
  ERR_SYS_REJECT_SERVICE = 301000102,
  ERR_SYS_SERVER_INNER = 301000103,
  ERR_SYS_TIMEOUT = 301000104,
  ERR_SYS_NO_INSERVICE_LIST = 301000105,
  ERR_SYS_TASK_STATE = 301000106,
  ERR_SYS_TASK_DISCARD = 301000107,
  ERR_SYS_END = 301000199,
  ERR_PACKET_BEGIN = 301000200,
  ERR_PACKET_ENCODE = 301000201,
  ERR_PACKET_DECODE = 301000202,
  ERR_PACKET_HEADER = 301000203,
  ERR_PACKET_LEN = 301000204,
  ERR_PACKET_VERSION = 301000205,
  ERR_PACKET_FROM_SERVICE_ID = 301000206,
  ERR_PACKET_TO_SERVICE_ID = 301000207,
  ERR_PACKET_APP_ID = 301000208,
  ERR_PACKET_APP_VERSION = 301000209,
  ERR_PACKET_CONN_SEQ_ID = 301000210,
  ERR_PACKET_MSG_SEQ_ID = 301000211,
  ERR_PACKET_DATA_FORMAT = 301000212,
  ERR_PACKET_DATA_FIELD_0 = 301000213,
  ERR_PACKET_DATA_FIELD_1 = 301000214,
  ERR_PACKET_DATA_FIELD_2 = 301000215,
  ERR_PACKET_DATA_FIELD_3 = 301000216,
  ERR_PACKET_CHECK_SUM = 301000217,
  ERR_PACKET_UNKNOWN_REQUEST = 301000218,
  ERR_PACKET_END = 301000299,
  ERR_INTERFACE_BEGIN = 301000300,
  ERR_INTERFACE_PARAM = 301000301,
  ERR_INTERFACE_PERM = 301000302,
  ERR_INTERFACE_TIMEOUT = 301000303,
  ERR_INTERFACE_END = 301000399,
  ERR_BUSINESS_BEGIN = 301001000,
  ERR_BUSINESS_END = 301009999,
  ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ErrorCode_IsValid(int value);
const ErrorCode ErrorCode_MIN = SUCCESS;
const ErrorCode ErrorCode_MAX = ERR_BUSINESS_END;
const int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor();
inline const ::std::string& ErrorCode_Name(ErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ErrorCode_descriptor(), value);
}
inline bool ErrorCode_Parse(
    const ::std::string& name, ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
// ===================================================================

class ProxyMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proxy.ProxyMsg) */ {
 public:
  ProxyMsg();
  virtual ~ProxyMsg();

  ProxyMsg(const ProxyMsg& from);

  inline ProxyMsg& operator=(const ProxyMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProxyMsg(ProxyMsg&& from) noexcept
    : ProxyMsg() {
    *this = ::std::move(from);
  }

  inline ProxyMsg& operator=(ProxyMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProxyMsg& default_instance();

  enum ChoiceCase {
    kTestReq = 1,
    kTestRsp = 2,
    CHOICE_NOT_SET = 0,
  };

  static inline const ProxyMsg* internal_default_instance() {
    return reinterpret_cast<const ProxyMsg*>(
               &_ProxyMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ProxyMsg* other);
  friend void swap(ProxyMsg& a, ProxyMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProxyMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  ProxyMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProxyMsg& from);
  void MergeFrom(const ProxyMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProxyMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.TestReq test_req = 1;
  bool has_test_req() const;
  void clear_test_req();
  static const int kTestReqFieldNumber = 1;
  const ::common::TestReq& test_req() const;
  ::common::TestReq* mutable_test_req();
  ::common::TestReq* release_test_req();
  void set_allocated_test_req(::common::TestReq* test_req);

  // .common.TestRsp test_rsp = 2;
  bool has_test_rsp() const;
  void clear_test_rsp();
  static const int kTestRspFieldNumber = 2;
  const ::common::TestRsp& test_rsp() const;
  ::common::TestRsp* mutable_test_rsp();
  ::common::TestRsp* release_test_rsp();
  void set_allocated_test_rsp(::common::TestRsp* test_rsp);

  ChoiceCase choice_case() const;
  // @@protoc_insertion_point(class_scope:proxy.ProxyMsg)
 private:
  void set_has_test_req();
  void set_has_test_rsp();

  inline bool has_choice() const;
  void clear_choice();
  inline void clear_has_choice();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ChoiceUnion {
    ChoiceUnion() {}
    ::common::TestReq* test_req_;
    ::common::TestRsp* test_rsp_;
  } choice_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_proxy_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProxyMsg

// .common.TestReq test_req = 1;
inline bool ProxyMsg::has_test_req() const {
  return choice_case() == kTestReq;
}
inline void ProxyMsg::set_has_test_req() {
  _oneof_case_[0] = kTestReq;
}
inline void ProxyMsg::clear_test_req() {
  if (has_test_req()) {
    delete choice_.test_req_;
    clear_has_choice();
  }
}
inline  const ::common::TestReq& ProxyMsg::test_req() const {
  // @@protoc_insertion_point(field_get:proxy.ProxyMsg.test_req)
  return has_test_req()
      ? *choice_.test_req_
      : ::common::TestReq::default_instance();
}
inline ::common::TestReq* ProxyMsg::mutable_test_req() {
  if (!has_test_req()) {
    clear_choice();
    set_has_test_req();
    choice_.test_req_ = new ::common::TestReq;
  }
  // @@protoc_insertion_point(field_mutable:proxy.ProxyMsg.test_req)
  return choice_.test_req_;
}
inline ::common::TestReq* ProxyMsg::release_test_req() {
  // @@protoc_insertion_point(field_release:proxy.ProxyMsg.test_req)
  if (has_test_req()) {
    clear_has_choice();
    ::common::TestReq* temp = choice_.test_req_;
    choice_.test_req_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ProxyMsg::set_allocated_test_req(::common::TestReq* test_req) {
  clear_choice();
  if (test_req) {
    set_has_test_req();
    choice_.test_req_ = test_req;
  }
  // @@protoc_insertion_point(field_set_allocated:proxy.ProxyMsg.test_req)
}

// .common.TestRsp test_rsp = 2;
inline bool ProxyMsg::has_test_rsp() const {
  return choice_case() == kTestRsp;
}
inline void ProxyMsg::set_has_test_rsp() {
  _oneof_case_[0] = kTestRsp;
}
inline void ProxyMsg::clear_test_rsp() {
  if (has_test_rsp()) {
    delete choice_.test_rsp_;
    clear_has_choice();
  }
}
inline  const ::common::TestRsp& ProxyMsg::test_rsp() const {
  // @@protoc_insertion_point(field_get:proxy.ProxyMsg.test_rsp)
  return has_test_rsp()
      ? *choice_.test_rsp_
      : ::common::TestRsp::default_instance();
}
inline ::common::TestRsp* ProxyMsg::mutable_test_rsp() {
  if (!has_test_rsp()) {
    clear_choice();
    set_has_test_rsp();
    choice_.test_rsp_ = new ::common::TestRsp;
  }
  // @@protoc_insertion_point(field_mutable:proxy.ProxyMsg.test_rsp)
  return choice_.test_rsp_;
}
inline ::common::TestRsp* ProxyMsg::release_test_rsp() {
  // @@protoc_insertion_point(field_release:proxy.ProxyMsg.test_rsp)
  if (has_test_rsp()) {
    clear_has_choice();
    ::common::TestRsp* temp = choice_.test_rsp_;
    choice_.test_rsp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ProxyMsg::set_allocated_test_rsp(::common::TestRsp* test_rsp) {
  clear_choice();
  if (test_rsp) {
    set_has_test_rsp();
    choice_.test_rsp_ = test_rsp;
  }
  // @@protoc_insertion_point(field_set_allocated:proxy.ProxyMsg.test_rsp)
}

inline bool ProxyMsg::has_choice() const {
  return choice_case() != CHOICE_NOT_SET;
}
inline void ProxyMsg::clear_has_choice() {
  _oneof_case_[0] = CHOICE_NOT_SET;
}
inline ProxyMsg::ChoiceCase ProxyMsg::choice_case() const {
  return ProxyMsg::ChoiceCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace proxy

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proxy::ErrorCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proxy::ErrorCode>() {
  return ::proxy::ErrorCode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proxy_2eproto__INCLUDED
