// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gate.proto

#ifndef PROTOBUF_gate_2eproto__INCLUDED
#define PROTOBUF_gate_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace gate {
class CloseConnIdReq;
class CloseConnIdReqDefaultTypeInternal;
extern CloseConnIdReqDefaultTypeInternal _CloseConnIdReq_default_instance_;
class CloseConnIdRsp;
class CloseConnIdRspDefaultTypeInternal;
extern CloseConnIdRspDefaultTypeInternal _CloseConnIdRsp_default_instance_;
class GateMsg;
class GateMsgDefaultTypeInternal;
extern GateMsgDefaultTypeInternal _GateMsg_default_instance_;
class GetConnIdReq;
class GetConnIdReqDefaultTypeInternal;
extern GetConnIdReqDefaultTypeInternal _GetConnIdReq_default_instance_;
class GetConnIdRsp;
class GetConnIdRspDefaultTypeInternal;
extern GetConnIdRspDefaultTypeInternal _GetConnIdRsp_default_instance_;
class TestReq;
class TestReqDefaultTypeInternal;
extern TestReqDefaultTypeInternal _TestReq_default_instance_;
class TestRsp;
class TestRspDefaultTypeInternal;
extern TestRspDefaultTypeInternal _TestRsp_default_instance_;
class WakeHeartbeatReq;
class WakeHeartbeatReqDefaultTypeInternal;
extern WakeHeartbeatReqDefaultTypeInternal _WakeHeartbeatReq_default_instance_;
class WakeHeartbeatRsp;
class WakeHeartbeatRspDefaultTypeInternal;
extern WakeHeartbeatRspDefaultTypeInternal _WakeHeartbeatRsp_default_instance_;
}  // namespace gate

namespace gate {

namespace protobuf_gate_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_gate_2eproto

// ===================================================================

class TestReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gate.TestReq) */ {
 public:
  TestReq();
  virtual ~TestReq();

  TestReq(const TestReq& from);

  inline TestReq& operator=(const TestReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TestReq(TestReq&& from) noexcept
    : TestReq() {
    *this = ::std::move(from);
  }

  inline TestReq& operator=(TestReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestReq& default_instance();

  static inline const TestReq* internal_default_instance() {
    return reinterpret_cast<const TestReq*>(
               &_TestReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(TestReq* other);
  friend void swap(TestReq& a, TestReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TestReq* New() const PROTOBUF_FINAL { return New(NULL); }

  TestReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TestReq& from);
  void MergeFrom(const TestReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TestReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 service_id = 1;
  void clear_service_id();
  static const int kServiceIdFieldNumber = 1;
  ::google::protobuf::int32 service_id() const;
  void set_service_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gate.TestReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 service_id_;
  mutable int _cached_size_;
  friend struct protobuf_gate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TestRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gate.TestRsp) */ {
 public:
  TestRsp();
  virtual ~TestRsp();

  TestRsp(const TestRsp& from);

  inline TestRsp& operator=(const TestRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TestRsp(TestRsp&& from) noexcept
    : TestRsp() {
    *this = ::std::move(from);
  }

  inline TestRsp& operator=(TestRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestRsp& default_instance();

  static inline const TestRsp* internal_default_instance() {
    return reinterpret_cast<const TestRsp*>(
               &_TestRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(TestRsp* other);
  friend void swap(TestRsp& a, TestRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TestRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  TestRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TestRsp& from);
  void MergeFrom(const TestRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TestRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes service_name = 1;
  void clear_service_name();
  static const int kServiceNameFieldNumber = 1;
  const ::std::string& service_name() const;
  void set_service_name(const ::std::string& value);
  #if LANG_CXX11
  void set_service_name(::std::string&& value);
  #endif
  void set_service_name(const char* value);
  void set_service_name(const void* value, size_t size);
  ::std::string* mutable_service_name();
  ::std::string* release_service_name();
  void set_allocated_service_name(::std::string* service_name);

  // @@protoc_insertion_point(class_scope:gate.TestRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr service_name_;
  mutable int _cached_size_;
  friend struct protobuf_gate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WakeHeartbeatReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gate.WakeHeartbeatReq) */ {
 public:
  WakeHeartbeatReq();
  virtual ~WakeHeartbeatReq();

  WakeHeartbeatReq(const WakeHeartbeatReq& from);

  inline WakeHeartbeatReq& operator=(const WakeHeartbeatReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WakeHeartbeatReq(WakeHeartbeatReq&& from) noexcept
    : WakeHeartbeatReq() {
    *this = ::std::move(from);
  }

  inline WakeHeartbeatReq& operator=(WakeHeartbeatReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WakeHeartbeatReq& default_instance();

  static inline const WakeHeartbeatReq* internal_default_instance() {
    return reinterpret_cast<const WakeHeartbeatReq*>(
               &_WakeHeartbeatReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(WakeHeartbeatReq* other);
  friend void swap(WakeHeartbeatReq& a, WakeHeartbeatReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WakeHeartbeatReq* New() const PROTOBUF_FINAL { return New(NULL); }

  WakeHeartbeatReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WakeHeartbeatReq& from);
  void MergeFrom(const WakeHeartbeatReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WakeHeartbeatReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 server_time = 1;
  void clear_server_time();
  static const int kServerTimeFieldNumber = 1;
  ::google::protobuf::uint64 server_time() const;
  void set_server_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:gate.WakeHeartbeatReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 server_time_;
  mutable int _cached_size_;
  friend struct protobuf_gate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WakeHeartbeatRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gate.WakeHeartbeatRsp) */ {
 public:
  WakeHeartbeatRsp();
  virtual ~WakeHeartbeatRsp();

  WakeHeartbeatRsp(const WakeHeartbeatRsp& from);

  inline WakeHeartbeatRsp& operator=(const WakeHeartbeatRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WakeHeartbeatRsp(WakeHeartbeatRsp&& from) noexcept
    : WakeHeartbeatRsp() {
    *this = ::std::move(from);
  }

  inline WakeHeartbeatRsp& operator=(WakeHeartbeatRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WakeHeartbeatRsp& default_instance();

  static inline const WakeHeartbeatRsp* internal_default_instance() {
    return reinterpret_cast<const WakeHeartbeatRsp*>(
               &_WakeHeartbeatRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(WakeHeartbeatRsp* other);
  friend void swap(WakeHeartbeatRsp& a, WakeHeartbeatRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WakeHeartbeatRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  WakeHeartbeatRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WakeHeartbeatRsp& from);
  void MergeFrom(const WakeHeartbeatRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WakeHeartbeatRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 client_time = 1;
  void clear_client_time();
  static const int kClientTimeFieldNumber = 1;
  ::google::protobuf::uint64 client_time() const;
  void set_client_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:gate.WakeHeartbeatRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 client_time_;
  mutable int _cached_size_;
  friend struct protobuf_gate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetConnIdReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gate.GetConnIdReq) */ {
 public:
  GetConnIdReq();
  virtual ~GetConnIdReq();

  GetConnIdReq(const GetConnIdReq& from);

  inline GetConnIdReq& operator=(const GetConnIdReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetConnIdReq(GetConnIdReq&& from) noexcept
    : GetConnIdReq() {
    *this = ::std::move(from);
  }

  inline GetConnIdReq& operator=(GetConnIdReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetConnIdReq& default_instance();

  static inline const GetConnIdReq* internal_default_instance() {
    return reinterpret_cast<const GetConnIdReq*>(
               &_GetConnIdReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(GetConnIdReq* other);
  friend void swap(GetConnIdReq& a, GetConnIdReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetConnIdReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GetConnIdReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetConnIdReq& from);
  void MergeFrom(const GetConnIdReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetConnIdReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 client_time = 1;
  void clear_client_time();
  static const int kClientTimeFieldNumber = 1;
  ::google::protobuf::uint64 client_time() const;
  void set_client_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:gate.GetConnIdReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 client_time_;
  mutable int _cached_size_;
  friend struct protobuf_gate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetConnIdRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gate.GetConnIdRsp) */ {
 public:
  GetConnIdRsp();
  virtual ~GetConnIdRsp();

  GetConnIdRsp(const GetConnIdRsp& from);

  inline GetConnIdRsp& operator=(const GetConnIdRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetConnIdRsp(GetConnIdRsp&& from) noexcept
    : GetConnIdRsp() {
    *this = ::std::move(from);
  }

  inline GetConnIdRsp& operator=(GetConnIdRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetConnIdRsp& default_instance();

  static inline const GetConnIdRsp* internal_default_instance() {
    return reinterpret_cast<const GetConnIdRsp*>(
               &_GetConnIdRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(GetConnIdRsp* other);
  friend void swap(GetConnIdRsp& a, GetConnIdRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetConnIdRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetConnIdRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetConnIdRsp& from);
  void MergeFrom(const GetConnIdRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetConnIdRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 server_time = 1;
  void clear_server_time();
  static const int kServerTimeFieldNumber = 1;
  ::google::protobuf::uint64 server_time() const;
  void set_server_time(::google::protobuf::uint64 value);

  // uint64 conn_id = 3;
  void clear_conn_id();
  static const int kConnIdFieldNumber = 3;
  ::google::protobuf::uint64 conn_id() const;
  void set_conn_id(::google::protobuf::uint64 value);

  // uint32 conn_create_time = 2;
  void clear_conn_create_time();
  static const int kConnCreateTimeFieldNumber = 2;
  ::google::protobuf::uint32 conn_create_time() const;
  void set_conn_create_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gate.GetConnIdRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 server_time_;
  ::google::protobuf::uint64 conn_id_;
  ::google::protobuf::uint32 conn_create_time_;
  mutable int _cached_size_;
  friend struct protobuf_gate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CloseConnIdReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gate.CloseConnIdReq) */ {
 public:
  CloseConnIdReq();
  virtual ~CloseConnIdReq();

  CloseConnIdReq(const CloseConnIdReq& from);

  inline CloseConnIdReq& operator=(const CloseConnIdReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CloseConnIdReq(CloseConnIdReq&& from) noexcept
    : CloseConnIdReq() {
    *this = ::std::move(from);
  }

  inline CloseConnIdReq& operator=(CloseConnIdReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CloseConnIdReq& default_instance();

  static inline const CloseConnIdReq* internal_default_instance() {
    return reinterpret_cast<const CloseConnIdReq*>(
               &_CloseConnIdReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(CloseConnIdReq* other);
  friend void swap(CloseConnIdReq& a, CloseConnIdReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CloseConnIdReq* New() const PROTOBUF_FINAL { return New(NULL); }

  CloseConnIdReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CloseConnIdReq& from);
  void MergeFrom(const CloseConnIdReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CloseConnIdReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 conn_id = 1;
  void clear_conn_id();
  static const int kConnIdFieldNumber = 1;
  ::google::protobuf::uint64 conn_id() const;
  void set_conn_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:gate.CloseConnIdReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 conn_id_;
  mutable int _cached_size_;
  friend struct protobuf_gate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CloseConnIdRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gate.CloseConnIdRsp) */ {
 public:
  CloseConnIdRsp();
  virtual ~CloseConnIdRsp();

  CloseConnIdRsp(const CloseConnIdRsp& from);

  inline CloseConnIdRsp& operator=(const CloseConnIdRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CloseConnIdRsp(CloseConnIdRsp&& from) noexcept
    : CloseConnIdRsp() {
    *this = ::std::move(from);
  }

  inline CloseConnIdRsp& operator=(CloseConnIdRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CloseConnIdRsp& default_instance();

  static inline const CloseConnIdRsp* internal_default_instance() {
    return reinterpret_cast<const CloseConnIdRsp*>(
               &_CloseConnIdRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(CloseConnIdRsp* other);
  friend void swap(CloseConnIdRsp& a, CloseConnIdRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CloseConnIdRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  CloseConnIdRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CloseConnIdRsp& from);
  void MergeFrom(const CloseConnIdRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CloseConnIdRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gate.CloseConnIdRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_gate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GateMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gate.GateMsg) */ {
 public:
  GateMsg();
  virtual ~GateMsg();

  GateMsg(const GateMsg& from);

  inline GateMsg& operator=(const GateMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GateMsg(GateMsg&& from) noexcept
    : GateMsg() {
    *this = ::std::move(from);
  }

  inline GateMsg& operator=(GateMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GateMsg& default_instance();

  enum ChoiceCase {
    kTestReq = 1,
    kTestRsp = 2,
    kWakeHeartbeatReq = 3,
    kWakeHeartbeatRsp = 4,
    kGetConnIdReq = 5,
    kGetConnIdRsp = 6,
    kCloseConnIdReq = 7,
    kCloseConnIdRsp = 8,
    CHOICE_NOT_SET = 0,
  };

  static inline const GateMsg* internal_default_instance() {
    return reinterpret_cast<const GateMsg*>(
               &_GateMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(GateMsg* other);
  friend void swap(GateMsg& a, GateMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GateMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  GateMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GateMsg& from);
  void MergeFrom(const GateMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GateMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gate.TestReq test_req = 1;
  bool has_test_req() const;
  void clear_test_req();
  static const int kTestReqFieldNumber = 1;
  const ::gate::TestReq& test_req() const;
  ::gate::TestReq* mutable_test_req();
  ::gate::TestReq* release_test_req();
  void set_allocated_test_req(::gate::TestReq* test_req);

  // .gate.TestRsp test_rsp = 2;
  bool has_test_rsp() const;
  void clear_test_rsp();
  static const int kTestRspFieldNumber = 2;
  const ::gate::TestRsp& test_rsp() const;
  ::gate::TestRsp* mutable_test_rsp();
  ::gate::TestRsp* release_test_rsp();
  void set_allocated_test_rsp(::gate::TestRsp* test_rsp);

  // .gate.WakeHeartbeatReq wake_heartbeat_req = 3;
  bool has_wake_heartbeat_req() const;
  void clear_wake_heartbeat_req();
  static const int kWakeHeartbeatReqFieldNumber = 3;
  const ::gate::WakeHeartbeatReq& wake_heartbeat_req() const;
  ::gate::WakeHeartbeatReq* mutable_wake_heartbeat_req();
  ::gate::WakeHeartbeatReq* release_wake_heartbeat_req();
  void set_allocated_wake_heartbeat_req(::gate::WakeHeartbeatReq* wake_heartbeat_req);

  // .gate.WakeHeartbeatRsp wake_heartbeat_rsp = 4;
  bool has_wake_heartbeat_rsp() const;
  void clear_wake_heartbeat_rsp();
  static const int kWakeHeartbeatRspFieldNumber = 4;
  const ::gate::WakeHeartbeatRsp& wake_heartbeat_rsp() const;
  ::gate::WakeHeartbeatRsp* mutable_wake_heartbeat_rsp();
  ::gate::WakeHeartbeatRsp* release_wake_heartbeat_rsp();
  void set_allocated_wake_heartbeat_rsp(::gate::WakeHeartbeatRsp* wake_heartbeat_rsp);

  // .gate.GetConnIdReq get_conn_id_req = 5;
  bool has_get_conn_id_req() const;
  void clear_get_conn_id_req();
  static const int kGetConnIdReqFieldNumber = 5;
  const ::gate::GetConnIdReq& get_conn_id_req() const;
  ::gate::GetConnIdReq* mutable_get_conn_id_req();
  ::gate::GetConnIdReq* release_get_conn_id_req();
  void set_allocated_get_conn_id_req(::gate::GetConnIdReq* get_conn_id_req);

  // .gate.GetConnIdRsp get_conn_id_rsp = 6;
  bool has_get_conn_id_rsp() const;
  void clear_get_conn_id_rsp();
  static const int kGetConnIdRspFieldNumber = 6;
  const ::gate::GetConnIdRsp& get_conn_id_rsp() const;
  ::gate::GetConnIdRsp* mutable_get_conn_id_rsp();
  ::gate::GetConnIdRsp* release_get_conn_id_rsp();
  void set_allocated_get_conn_id_rsp(::gate::GetConnIdRsp* get_conn_id_rsp);

  // .gate.CloseConnIdReq close_conn_id_req = 7;
  bool has_close_conn_id_req() const;
  void clear_close_conn_id_req();
  static const int kCloseConnIdReqFieldNumber = 7;
  const ::gate::CloseConnIdReq& close_conn_id_req() const;
  ::gate::CloseConnIdReq* mutable_close_conn_id_req();
  ::gate::CloseConnIdReq* release_close_conn_id_req();
  void set_allocated_close_conn_id_req(::gate::CloseConnIdReq* close_conn_id_req);

  // .gate.CloseConnIdRsp close_conn_id_rsp = 8;
  bool has_close_conn_id_rsp() const;
  void clear_close_conn_id_rsp();
  static const int kCloseConnIdRspFieldNumber = 8;
  const ::gate::CloseConnIdRsp& close_conn_id_rsp() const;
  ::gate::CloseConnIdRsp* mutable_close_conn_id_rsp();
  ::gate::CloseConnIdRsp* release_close_conn_id_rsp();
  void set_allocated_close_conn_id_rsp(::gate::CloseConnIdRsp* close_conn_id_rsp);

  ChoiceCase choice_case() const;
  // @@protoc_insertion_point(class_scope:gate.GateMsg)
 private:
  void set_has_test_req();
  void set_has_test_rsp();
  void set_has_wake_heartbeat_req();
  void set_has_wake_heartbeat_rsp();
  void set_has_get_conn_id_req();
  void set_has_get_conn_id_rsp();
  void set_has_close_conn_id_req();
  void set_has_close_conn_id_rsp();

  inline bool has_choice() const;
  void clear_choice();
  inline void clear_has_choice();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ChoiceUnion {
    ChoiceUnion() {}
    ::gate::TestReq* test_req_;
    ::gate::TestRsp* test_rsp_;
    ::gate::WakeHeartbeatReq* wake_heartbeat_req_;
    ::gate::WakeHeartbeatRsp* wake_heartbeat_rsp_;
    ::gate::GetConnIdReq* get_conn_id_req_;
    ::gate::GetConnIdRsp* get_conn_id_rsp_;
    ::gate::CloseConnIdReq* close_conn_id_req_;
    ::gate::CloseConnIdRsp* close_conn_id_rsp_;
  } choice_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_gate_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TestReq

// int32 service_id = 1;
inline void TestReq::clear_service_id() {
  service_id_ = 0;
}
inline ::google::protobuf::int32 TestReq::service_id() const {
  // @@protoc_insertion_point(field_get:gate.TestReq.service_id)
  return service_id_;
}
inline void TestReq::set_service_id(::google::protobuf::int32 value) {
  
  service_id_ = value;
  // @@protoc_insertion_point(field_set:gate.TestReq.service_id)
}

// -------------------------------------------------------------------

// TestRsp

// bytes service_name = 1;
inline void TestRsp::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestRsp::service_name() const {
  // @@protoc_insertion_point(field_get:gate.TestRsp.service_name)
  return service_name_.GetNoArena();
}
inline void TestRsp::set_service_name(const ::std::string& value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gate.TestRsp.service_name)
}
#if LANG_CXX11
inline void TestRsp::set_service_name(::std::string&& value) {
  
  service_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gate.TestRsp.service_name)
}
#endif
inline void TestRsp::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gate.TestRsp.service_name)
}
inline void TestRsp::set_service_name(const void* value, size_t size) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gate.TestRsp.service_name)
}
inline ::std::string* TestRsp::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:gate.TestRsp.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestRsp::release_service_name() {
  // @@protoc_insertion_point(field_release:gate.TestRsp.service_name)
  
  return service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestRsp::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:gate.TestRsp.service_name)
}

// -------------------------------------------------------------------

// WakeHeartbeatReq

// uint64 server_time = 1;
inline void WakeHeartbeatReq::clear_server_time() {
  server_time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 WakeHeartbeatReq::server_time() const {
  // @@protoc_insertion_point(field_get:gate.WakeHeartbeatReq.server_time)
  return server_time_;
}
inline void WakeHeartbeatReq::set_server_time(::google::protobuf::uint64 value) {
  
  server_time_ = value;
  // @@protoc_insertion_point(field_set:gate.WakeHeartbeatReq.server_time)
}

// -------------------------------------------------------------------

// WakeHeartbeatRsp

// uint64 client_time = 1;
inline void WakeHeartbeatRsp::clear_client_time() {
  client_time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 WakeHeartbeatRsp::client_time() const {
  // @@protoc_insertion_point(field_get:gate.WakeHeartbeatRsp.client_time)
  return client_time_;
}
inline void WakeHeartbeatRsp::set_client_time(::google::protobuf::uint64 value) {
  
  client_time_ = value;
  // @@protoc_insertion_point(field_set:gate.WakeHeartbeatRsp.client_time)
}

// -------------------------------------------------------------------

// GetConnIdReq

// uint64 client_time = 1;
inline void GetConnIdReq::clear_client_time() {
  client_time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GetConnIdReq::client_time() const {
  // @@protoc_insertion_point(field_get:gate.GetConnIdReq.client_time)
  return client_time_;
}
inline void GetConnIdReq::set_client_time(::google::protobuf::uint64 value) {
  
  client_time_ = value;
  // @@protoc_insertion_point(field_set:gate.GetConnIdReq.client_time)
}

// -------------------------------------------------------------------

// GetConnIdRsp

// uint64 server_time = 1;
inline void GetConnIdRsp::clear_server_time() {
  server_time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GetConnIdRsp::server_time() const {
  // @@protoc_insertion_point(field_get:gate.GetConnIdRsp.server_time)
  return server_time_;
}
inline void GetConnIdRsp::set_server_time(::google::protobuf::uint64 value) {
  
  server_time_ = value;
  // @@protoc_insertion_point(field_set:gate.GetConnIdRsp.server_time)
}

// uint32 conn_create_time = 2;
inline void GetConnIdRsp::clear_conn_create_time() {
  conn_create_time_ = 0u;
}
inline ::google::protobuf::uint32 GetConnIdRsp::conn_create_time() const {
  // @@protoc_insertion_point(field_get:gate.GetConnIdRsp.conn_create_time)
  return conn_create_time_;
}
inline void GetConnIdRsp::set_conn_create_time(::google::protobuf::uint32 value) {
  
  conn_create_time_ = value;
  // @@protoc_insertion_point(field_set:gate.GetConnIdRsp.conn_create_time)
}

// uint64 conn_id = 3;
inline void GetConnIdRsp::clear_conn_id() {
  conn_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GetConnIdRsp::conn_id() const {
  // @@protoc_insertion_point(field_get:gate.GetConnIdRsp.conn_id)
  return conn_id_;
}
inline void GetConnIdRsp::set_conn_id(::google::protobuf::uint64 value) {
  
  conn_id_ = value;
  // @@protoc_insertion_point(field_set:gate.GetConnIdRsp.conn_id)
}

// -------------------------------------------------------------------

// CloseConnIdReq

// uint64 conn_id = 1;
inline void CloseConnIdReq::clear_conn_id() {
  conn_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CloseConnIdReq::conn_id() const {
  // @@protoc_insertion_point(field_get:gate.CloseConnIdReq.conn_id)
  return conn_id_;
}
inline void CloseConnIdReq::set_conn_id(::google::protobuf::uint64 value) {
  
  conn_id_ = value;
  // @@protoc_insertion_point(field_set:gate.CloseConnIdReq.conn_id)
}

// -------------------------------------------------------------------

// CloseConnIdRsp

// -------------------------------------------------------------------

// GateMsg

// .gate.TestReq test_req = 1;
inline bool GateMsg::has_test_req() const {
  return choice_case() == kTestReq;
}
inline void GateMsg::set_has_test_req() {
  _oneof_case_[0] = kTestReq;
}
inline void GateMsg::clear_test_req() {
  if (has_test_req()) {
    delete choice_.test_req_;
    clear_has_choice();
  }
}
inline  const ::gate::TestReq& GateMsg::test_req() const {
  // @@protoc_insertion_point(field_get:gate.GateMsg.test_req)
  return has_test_req()
      ? *choice_.test_req_
      : ::gate::TestReq::default_instance();
}
inline ::gate::TestReq* GateMsg::mutable_test_req() {
  if (!has_test_req()) {
    clear_choice();
    set_has_test_req();
    choice_.test_req_ = new ::gate::TestReq;
  }
  // @@protoc_insertion_point(field_mutable:gate.GateMsg.test_req)
  return choice_.test_req_;
}
inline ::gate::TestReq* GateMsg::release_test_req() {
  // @@protoc_insertion_point(field_release:gate.GateMsg.test_req)
  if (has_test_req()) {
    clear_has_choice();
    ::gate::TestReq* temp = choice_.test_req_;
    choice_.test_req_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GateMsg::set_allocated_test_req(::gate::TestReq* test_req) {
  clear_choice();
  if (test_req) {
    set_has_test_req();
    choice_.test_req_ = test_req;
  }
  // @@protoc_insertion_point(field_set_allocated:gate.GateMsg.test_req)
}

// .gate.TestRsp test_rsp = 2;
inline bool GateMsg::has_test_rsp() const {
  return choice_case() == kTestRsp;
}
inline void GateMsg::set_has_test_rsp() {
  _oneof_case_[0] = kTestRsp;
}
inline void GateMsg::clear_test_rsp() {
  if (has_test_rsp()) {
    delete choice_.test_rsp_;
    clear_has_choice();
  }
}
inline  const ::gate::TestRsp& GateMsg::test_rsp() const {
  // @@protoc_insertion_point(field_get:gate.GateMsg.test_rsp)
  return has_test_rsp()
      ? *choice_.test_rsp_
      : ::gate::TestRsp::default_instance();
}
inline ::gate::TestRsp* GateMsg::mutable_test_rsp() {
  if (!has_test_rsp()) {
    clear_choice();
    set_has_test_rsp();
    choice_.test_rsp_ = new ::gate::TestRsp;
  }
  // @@protoc_insertion_point(field_mutable:gate.GateMsg.test_rsp)
  return choice_.test_rsp_;
}
inline ::gate::TestRsp* GateMsg::release_test_rsp() {
  // @@protoc_insertion_point(field_release:gate.GateMsg.test_rsp)
  if (has_test_rsp()) {
    clear_has_choice();
    ::gate::TestRsp* temp = choice_.test_rsp_;
    choice_.test_rsp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GateMsg::set_allocated_test_rsp(::gate::TestRsp* test_rsp) {
  clear_choice();
  if (test_rsp) {
    set_has_test_rsp();
    choice_.test_rsp_ = test_rsp;
  }
  // @@protoc_insertion_point(field_set_allocated:gate.GateMsg.test_rsp)
}

// .gate.WakeHeartbeatReq wake_heartbeat_req = 3;
inline bool GateMsg::has_wake_heartbeat_req() const {
  return choice_case() == kWakeHeartbeatReq;
}
inline void GateMsg::set_has_wake_heartbeat_req() {
  _oneof_case_[0] = kWakeHeartbeatReq;
}
inline void GateMsg::clear_wake_heartbeat_req() {
  if (has_wake_heartbeat_req()) {
    delete choice_.wake_heartbeat_req_;
    clear_has_choice();
  }
}
inline  const ::gate::WakeHeartbeatReq& GateMsg::wake_heartbeat_req() const {
  // @@protoc_insertion_point(field_get:gate.GateMsg.wake_heartbeat_req)
  return has_wake_heartbeat_req()
      ? *choice_.wake_heartbeat_req_
      : ::gate::WakeHeartbeatReq::default_instance();
}
inline ::gate::WakeHeartbeatReq* GateMsg::mutable_wake_heartbeat_req() {
  if (!has_wake_heartbeat_req()) {
    clear_choice();
    set_has_wake_heartbeat_req();
    choice_.wake_heartbeat_req_ = new ::gate::WakeHeartbeatReq;
  }
  // @@protoc_insertion_point(field_mutable:gate.GateMsg.wake_heartbeat_req)
  return choice_.wake_heartbeat_req_;
}
inline ::gate::WakeHeartbeatReq* GateMsg::release_wake_heartbeat_req() {
  // @@protoc_insertion_point(field_release:gate.GateMsg.wake_heartbeat_req)
  if (has_wake_heartbeat_req()) {
    clear_has_choice();
    ::gate::WakeHeartbeatReq* temp = choice_.wake_heartbeat_req_;
    choice_.wake_heartbeat_req_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GateMsg::set_allocated_wake_heartbeat_req(::gate::WakeHeartbeatReq* wake_heartbeat_req) {
  clear_choice();
  if (wake_heartbeat_req) {
    set_has_wake_heartbeat_req();
    choice_.wake_heartbeat_req_ = wake_heartbeat_req;
  }
  // @@protoc_insertion_point(field_set_allocated:gate.GateMsg.wake_heartbeat_req)
}

// .gate.WakeHeartbeatRsp wake_heartbeat_rsp = 4;
inline bool GateMsg::has_wake_heartbeat_rsp() const {
  return choice_case() == kWakeHeartbeatRsp;
}
inline void GateMsg::set_has_wake_heartbeat_rsp() {
  _oneof_case_[0] = kWakeHeartbeatRsp;
}
inline void GateMsg::clear_wake_heartbeat_rsp() {
  if (has_wake_heartbeat_rsp()) {
    delete choice_.wake_heartbeat_rsp_;
    clear_has_choice();
  }
}
inline  const ::gate::WakeHeartbeatRsp& GateMsg::wake_heartbeat_rsp() const {
  // @@protoc_insertion_point(field_get:gate.GateMsg.wake_heartbeat_rsp)
  return has_wake_heartbeat_rsp()
      ? *choice_.wake_heartbeat_rsp_
      : ::gate::WakeHeartbeatRsp::default_instance();
}
inline ::gate::WakeHeartbeatRsp* GateMsg::mutable_wake_heartbeat_rsp() {
  if (!has_wake_heartbeat_rsp()) {
    clear_choice();
    set_has_wake_heartbeat_rsp();
    choice_.wake_heartbeat_rsp_ = new ::gate::WakeHeartbeatRsp;
  }
  // @@protoc_insertion_point(field_mutable:gate.GateMsg.wake_heartbeat_rsp)
  return choice_.wake_heartbeat_rsp_;
}
inline ::gate::WakeHeartbeatRsp* GateMsg::release_wake_heartbeat_rsp() {
  // @@protoc_insertion_point(field_release:gate.GateMsg.wake_heartbeat_rsp)
  if (has_wake_heartbeat_rsp()) {
    clear_has_choice();
    ::gate::WakeHeartbeatRsp* temp = choice_.wake_heartbeat_rsp_;
    choice_.wake_heartbeat_rsp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GateMsg::set_allocated_wake_heartbeat_rsp(::gate::WakeHeartbeatRsp* wake_heartbeat_rsp) {
  clear_choice();
  if (wake_heartbeat_rsp) {
    set_has_wake_heartbeat_rsp();
    choice_.wake_heartbeat_rsp_ = wake_heartbeat_rsp;
  }
  // @@protoc_insertion_point(field_set_allocated:gate.GateMsg.wake_heartbeat_rsp)
}

// .gate.GetConnIdReq get_conn_id_req = 5;
inline bool GateMsg::has_get_conn_id_req() const {
  return choice_case() == kGetConnIdReq;
}
inline void GateMsg::set_has_get_conn_id_req() {
  _oneof_case_[0] = kGetConnIdReq;
}
inline void GateMsg::clear_get_conn_id_req() {
  if (has_get_conn_id_req()) {
    delete choice_.get_conn_id_req_;
    clear_has_choice();
  }
}
inline  const ::gate::GetConnIdReq& GateMsg::get_conn_id_req() const {
  // @@protoc_insertion_point(field_get:gate.GateMsg.get_conn_id_req)
  return has_get_conn_id_req()
      ? *choice_.get_conn_id_req_
      : ::gate::GetConnIdReq::default_instance();
}
inline ::gate::GetConnIdReq* GateMsg::mutable_get_conn_id_req() {
  if (!has_get_conn_id_req()) {
    clear_choice();
    set_has_get_conn_id_req();
    choice_.get_conn_id_req_ = new ::gate::GetConnIdReq;
  }
  // @@protoc_insertion_point(field_mutable:gate.GateMsg.get_conn_id_req)
  return choice_.get_conn_id_req_;
}
inline ::gate::GetConnIdReq* GateMsg::release_get_conn_id_req() {
  // @@protoc_insertion_point(field_release:gate.GateMsg.get_conn_id_req)
  if (has_get_conn_id_req()) {
    clear_has_choice();
    ::gate::GetConnIdReq* temp = choice_.get_conn_id_req_;
    choice_.get_conn_id_req_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GateMsg::set_allocated_get_conn_id_req(::gate::GetConnIdReq* get_conn_id_req) {
  clear_choice();
  if (get_conn_id_req) {
    set_has_get_conn_id_req();
    choice_.get_conn_id_req_ = get_conn_id_req;
  }
  // @@protoc_insertion_point(field_set_allocated:gate.GateMsg.get_conn_id_req)
}

// .gate.GetConnIdRsp get_conn_id_rsp = 6;
inline bool GateMsg::has_get_conn_id_rsp() const {
  return choice_case() == kGetConnIdRsp;
}
inline void GateMsg::set_has_get_conn_id_rsp() {
  _oneof_case_[0] = kGetConnIdRsp;
}
inline void GateMsg::clear_get_conn_id_rsp() {
  if (has_get_conn_id_rsp()) {
    delete choice_.get_conn_id_rsp_;
    clear_has_choice();
  }
}
inline  const ::gate::GetConnIdRsp& GateMsg::get_conn_id_rsp() const {
  // @@protoc_insertion_point(field_get:gate.GateMsg.get_conn_id_rsp)
  return has_get_conn_id_rsp()
      ? *choice_.get_conn_id_rsp_
      : ::gate::GetConnIdRsp::default_instance();
}
inline ::gate::GetConnIdRsp* GateMsg::mutable_get_conn_id_rsp() {
  if (!has_get_conn_id_rsp()) {
    clear_choice();
    set_has_get_conn_id_rsp();
    choice_.get_conn_id_rsp_ = new ::gate::GetConnIdRsp;
  }
  // @@protoc_insertion_point(field_mutable:gate.GateMsg.get_conn_id_rsp)
  return choice_.get_conn_id_rsp_;
}
inline ::gate::GetConnIdRsp* GateMsg::release_get_conn_id_rsp() {
  // @@protoc_insertion_point(field_release:gate.GateMsg.get_conn_id_rsp)
  if (has_get_conn_id_rsp()) {
    clear_has_choice();
    ::gate::GetConnIdRsp* temp = choice_.get_conn_id_rsp_;
    choice_.get_conn_id_rsp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GateMsg::set_allocated_get_conn_id_rsp(::gate::GetConnIdRsp* get_conn_id_rsp) {
  clear_choice();
  if (get_conn_id_rsp) {
    set_has_get_conn_id_rsp();
    choice_.get_conn_id_rsp_ = get_conn_id_rsp;
  }
  // @@protoc_insertion_point(field_set_allocated:gate.GateMsg.get_conn_id_rsp)
}

// .gate.CloseConnIdReq close_conn_id_req = 7;
inline bool GateMsg::has_close_conn_id_req() const {
  return choice_case() == kCloseConnIdReq;
}
inline void GateMsg::set_has_close_conn_id_req() {
  _oneof_case_[0] = kCloseConnIdReq;
}
inline void GateMsg::clear_close_conn_id_req() {
  if (has_close_conn_id_req()) {
    delete choice_.close_conn_id_req_;
    clear_has_choice();
  }
}
inline  const ::gate::CloseConnIdReq& GateMsg::close_conn_id_req() const {
  // @@protoc_insertion_point(field_get:gate.GateMsg.close_conn_id_req)
  return has_close_conn_id_req()
      ? *choice_.close_conn_id_req_
      : ::gate::CloseConnIdReq::default_instance();
}
inline ::gate::CloseConnIdReq* GateMsg::mutable_close_conn_id_req() {
  if (!has_close_conn_id_req()) {
    clear_choice();
    set_has_close_conn_id_req();
    choice_.close_conn_id_req_ = new ::gate::CloseConnIdReq;
  }
  // @@protoc_insertion_point(field_mutable:gate.GateMsg.close_conn_id_req)
  return choice_.close_conn_id_req_;
}
inline ::gate::CloseConnIdReq* GateMsg::release_close_conn_id_req() {
  // @@protoc_insertion_point(field_release:gate.GateMsg.close_conn_id_req)
  if (has_close_conn_id_req()) {
    clear_has_choice();
    ::gate::CloseConnIdReq* temp = choice_.close_conn_id_req_;
    choice_.close_conn_id_req_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GateMsg::set_allocated_close_conn_id_req(::gate::CloseConnIdReq* close_conn_id_req) {
  clear_choice();
  if (close_conn_id_req) {
    set_has_close_conn_id_req();
    choice_.close_conn_id_req_ = close_conn_id_req;
  }
  // @@protoc_insertion_point(field_set_allocated:gate.GateMsg.close_conn_id_req)
}

// .gate.CloseConnIdRsp close_conn_id_rsp = 8;
inline bool GateMsg::has_close_conn_id_rsp() const {
  return choice_case() == kCloseConnIdRsp;
}
inline void GateMsg::set_has_close_conn_id_rsp() {
  _oneof_case_[0] = kCloseConnIdRsp;
}
inline void GateMsg::clear_close_conn_id_rsp() {
  if (has_close_conn_id_rsp()) {
    delete choice_.close_conn_id_rsp_;
    clear_has_choice();
  }
}
inline  const ::gate::CloseConnIdRsp& GateMsg::close_conn_id_rsp() const {
  // @@protoc_insertion_point(field_get:gate.GateMsg.close_conn_id_rsp)
  return has_close_conn_id_rsp()
      ? *choice_.close_conn_id_rsp_
      : ::gate::CloseConnIdRsp::default_instance();
}
inline ::gate::CloseConnIdRsp* GateMsg::mutable_close_conn_id_rsp() {
  if (!has_close_conn_id_rsp()) {
    clear_choice();
    set_has_close_conn_id_rsp();
    choice_.close_conn_id_rsp_ = new ::gate::CloseConnIdRsp;
  }
  // @@protoc_insertion_point(field_mutable:gate.GateMsg.close_conn_id_rsp)
  return choice_.close_conn_id_rsp_;
}
inline ::gate::CloseConnIdRsp* GateMsg::release_close_conn_id_rsp() {
  // @@protoc_insertion_point(field_release:gate.GateMsg.close_conn_id_rsp)
  if (has_close_conn_id_rsp()) {
    clear_has_choice();
    ::gate::CloseConnIdRsp* temp = choice_.close_conn_id_rsp_;
    choice_.close_conn_id_rsp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GateMsg::set_allocated_close_conn_id_rsp(::gate::CloseConnIdRsp* close_conn_id_rsp) {
  clear_choice();
  if (close_conn_id_rsp) {
    set_has_close_conn_id_rsp();
    choice_.close_conn_id_rsp_ = close_conn_id_rsp;
  }
  // @@protoc_insertion_point(field_set_allocated:gate.GateMsg.close_conn_id_rsp)
}

inline bool GateMsg::has_choice() const {
  return choice_case() != CHOICE_NOT_SET;
}
inline void GateMsg::clear_has_choice() {
  _oneof_case_[0] = CHOICE_NOT_SET;
}
inline GateMsg::ChoiceCase GateMsg::choice_case() const {
  return GateMsg::ChoiceCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace gate

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_gate_2eproto__INCLUDED
