// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: navigate.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "navigate.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace navigate {
class TestReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TestReq>
     _instance;
} _TestReq_default_instance_;
class TestRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TestRsp>
     _instance;
} _TestRsp_default_instance_;
class GetAccessReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetAccessReq>
     _instance;
} _GetAccessReq_default_instance_;
class GetAccessRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetAccessRsp>
     _instance;
} _GetAccessRsp_default_instance_;
class PutLoadReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PutLoadReq>
     _instance;
} _PutLoadReq_default_instance_;
class PutLoadRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PutLoadRsp>
     _instance;
} _PutLoadRsp_default_instance_;
class NavigateMsgDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NavigateMsg>
     _instance;
  const ::navigate::TestReq* test_req_;
  const ::navigate::TestRsp* test_rsp_;
  const ::navigate::GetAccessReq* get_access_req_;
  const ::navigate::GetAccessRsp* get_access_rsp_;
  const ::navigate::PutLoadReq* put_load_req_;
  const ::navigate::PutLoadRsp* put_load_rsp_;
} _NavigateMsg_default_instance_;

namespace protobuf_navigate_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[7];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestReq, service_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestRsp, service_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccessReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccessReq, service_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccessReq, user_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccessRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccessRsp, access_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccessRsp, service_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccessRsp, proc_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccessRsp, out_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccessRsp, out_port_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutLoadReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutLoadReq, service_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutLoadReq, proc_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutLoadReq, load_val_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutLoadRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavigateMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavigateMsg, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(NavigateMsgDefaultTypeInternal, test_req_),
  offsetof(NavigateMsgDefaultTypeInternal, test_rsp_),
  offsetof(NavigateMsgDefaultTypeInternal, get_access_req_),
  offsetof(NavigateMsgDefaultTypeInternal, get_access_rsp_),
  offsetof(NavigateMsgDefaultTypeInternal, put_load_req_),
  offsetof(NavigateMsgDefaultTypeInternal, put_load_rsp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavigateMsg, choice_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(TestReq)},
  { 6, -1, sizeof(TestRsp)},
  { 12, -1, sizeof(GetAccessReq)},
  { 19, -1, sizeof(GetAccessRsp)},
  { 29, -1, sizeof(PutLoadReq)},
  { 37, -1, sizeof(PutLoadRsp)},
  { 42, -1, sizeof(NavigateMsg)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_TestReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TestRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetAccessReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetAccessRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PutLoadReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PutLoadRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NavigateMsg_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "navigate.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _TestReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TestReq_default_instance_);_TestRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TestRsp_default_instance_);_GetAccessReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetAccessReq_default_instance_);_GetAccessRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetAccessRsp_default_instance_);_PutLoadReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PutLoadReq_default_instance_);_PutLoadRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PutLoadRsp_default_instance_);_NavigateMsg_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NavigateMsg_default_instance_);_NavigateMsg_default_instance_.test_req_ = const_cast< ::navigate::TestReq*>(
      ::navigate::TestReq::internal_default_instance());
  _NavigateMsg_default_instance_.test_rsp_ = const_cast< ::navigate::TestRsp*>(
      ::navigate::TestRsp::internal_default_instance());
  _NavigateMsg_default_instance_.get_access_req_ = const_cast< ::navigate::GetAccessReq*>(
      ::navigate::GetAccessReq::internal_default_instance());
  _NavigateMsg_default_instance_.get_access_rsp_ = const_cast< ::navigate::GetAccessRsp*>(
      ::navigate::GetAccessRsp::internal_default_instance());
  _NavigateMsg_default_instance_.put_load_req_ = const_cast< ::navigate::PutLoadReq*>(
      ::navigate::PutLoadReq::internal_default_instance());
  _NavigateMsg_default_instance_.put_load_rsp_ = const_cast< ::navigate::PutLoadRsp*>(
      ::navigate::PutLoadRsp::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016navigate.proto\022\010navigate\"\035\n\007TestReq\022\022\n"
      "\nservice_id\030\001 \001(\005\"\037\n\007TestRsp\022\024\n\014service_"
      "name\030\001 \001(\014\"3\n\014GetAccessReq\022\022\n\nservice_id"
      "\030\001 \001(\005\022\017\n\007user_id\030\002 \001(\004\"i\n\014GetAccessRsp\022"
      "\022\n\naccess_key\030\001 \001(\004\022\022\n\nservice_id\030\002 \001(\005\022"
      "\017\n\007proc_id\030\003 \001(\r\022\016\n\006out_ip\030\004 \001(\014\022\020\n\010out_"
      "port\030\005 \001(\005\"C\n\nPutLoadReq\022\022\n\nservice_id\030\001"
      " \001(\005\022\017\n\007proc_id\030\002 \001(\r\022\020\n\010load_val\030\003 \001(\005\""
      "\014\n\nPutLoadRsp\"\245\002\n\013NavigateMsg\022%\n\010test_re"
      "q\030\001 \001(\0132\021.navigate.TestReqH\000\022%\n\010test_rsp"
      "\030\002 \001(\0132\021.navigate.TestRspH\000\0220\n\016get_acces"
      "s_req\030\003 \001(\0132\026.navigate.GetAccessReqH\000\0220\n"
      "\016get_access_rsp\030\004 \001(\0132\026.navigate.GetAcce"
      "ssRspH\000\022,\n\014put_load_req\030\005 \001(\0132\024.navigate"
      ".PutLoadReqH\000\022,\n\014put_load_rsp\030\006 \001(\0132\024.na"
      "vigate.PutLoadRspH\000B\010\n\006choiceb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 637);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "navigate.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_navigate_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestReq::kServiceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestReq::TestReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_navigate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:navigate.TestReq)
}
TestReq::TestReq(const TestReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_id_ = from.service_id_;
  // @@protoc_insertion_point(copy_constructor:navigate.TestReq)
}

void TestReq::SharedCtor() {
  service_id_ = 0;
  _cached_size_ = 0;
}

TestReq::~TestReq() {
  // @@protoc_insertion_point(destructor:navigate.TestReq)
  SharedDtor();
}

void TestReq::SharedDtor() {
}

void TestReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestReq::descriptor() {
  protobuf_navigate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_navigate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TestReq& TestReq::default_instance() {
  protobuf_navigate_2eproto::InitDefaults();
  return *internal_default_instance();
}

TestReq* TestReq::New(::google::protobuf::Arena* arena) const {
  TestReq* n = new TestReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TestReq::Clear() {
// @@protoc_insertion_point(message_clear_start:navigate.TestReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_id_ = 0;
  _internal_metadata_.Clear();
}

bool TestReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:navigate.TestReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 service_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &service_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:navigate.TestReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navigate.TestReq)
  return false;
#undef DO_
}

void TestReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navigate.TestReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 service_id = 1;
  if (this->service_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->service_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:navigate.TestReq)
}

::google::protobuf::uint8* TestReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:navigate.TestReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 service_id = 1;
  if (this->service_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->service_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navigate.TestReq)
  return target;
}

size_t TestReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navigate.TestReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 service_id = 1;
  if (this->service_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->service_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navigate.TestReq)
  GOOGLE_DCHECK_NE(&from, this);
  const TestReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navigate.TestReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navigate.TestReq)
    MergeFrom(*source);
  }
}

void TestReq::MergeFrom(const TestReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navigate.TestReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.service_id() != 0) {
    set_service_id(from.service_id());
  }
}

void TestReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navigate.TestReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestReq::CopyFrom(const TestReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navigate.TestReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestReq::IsInitialized() const {
  return true;
}

void TestReq::Swap(TestReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestReq::InternalSwap(TestReq* other) {
  using std::swap;
  swap(service_id_, other->service_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TestReq::GetMetadata() const {
  protobuf_navigate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_navigate_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TestReq

// int32 service_id = 1;
void TestReq::clear_service_id() {
  service_id_ = 0;
}
::google::protobuf::int32 TestReq::service_id() const {
  // @@protoc_insertion_point(field_get:navigate.TestReq.service_id)
  return service_id_;
}
void TestReq::set_service_id(::google::protobuf::int32 value) {
  
  service_id_ = value;
  // @@protoc_insertion_point(field_set:navigate.TestReq.service_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestRsp::kServiceNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestRsp::TestRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_navigate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:navigate.TestRsp)
}
TestRsp::TestRsp(const TestRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.service_name().size() > 0) {
    service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  // @@protoc_insertion_point(copy_constructor:navigate.TestRsp)
}

void TestRsp::SharedCtor() {
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TestRsp::~TestRsp() {
  // @@protoc_insertion_point(destructor:navigate.TestRsp)
  SharedDtor();
}

void TestRsp::SharedDtor() {
  service_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TestRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestRsp::descriptor() {
  protobuf_navigate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_navigate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TestRsp& TestRsp::default_instance() {
  protobuf_navigate_2eproto::InitDefaults();
  return *internal_default_instance();
}

TestRsp* TestRsp::New(::google::protobuf::Arena* arena) const {
  TestRsp* n = new TestRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TestRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:navigate.TestRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool TestRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:navigate.TestRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes service_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_service_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:navigate.TestRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navigate.TestRsp)
  return false;
#undef DO_
}

void TestRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navigate.TestRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes service_name = 1;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->service_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:navigate.TestRsp)
}

::google::protobuf::uint8* TestRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:navigate.TestRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes service_name = 1;
  if (this->service_name().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->service_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navigate.TestRsp)
  return target;
}

size_t TestRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navigate.TestRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes service_name = 1;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->service_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navigate.TestRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const TestRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navigate.TestRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navigate.TestRsp)
    MergeFrom(*source);
  }
}

void TestRsp::MergeFrom(const TestRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navigate.TestRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.service_name().size() > 0) {

    service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
}

void TestRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navigate.TestRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestRsp::CopyFrom(const TestRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navigate.TestRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestRsp::IsInitialized() const {
  return true;
}

void TestRsp::Swap(TestRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestRsp::InternalSwap(TestRsp* other) {
  using std::swap;
  service_name_.Swap(&other->service_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TestRsp::GetMetadata() const {
  protobuf_navigate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_navigate_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TestRsp

// bytes service_name = 1;
void TestRsp::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TestRsp::service_name() const {
  // @@protoc_insertion_point(field_get:navigate.TestRsp.service_name)
  return service_name_.GetNoArena();
}
void TestRsp::set_service_name(const ::std::string& value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:navigate.TestRsp.service_name)
}
#if LANG_CXX11
void TestRsp::set_service_name(::std::string&& value) {
  
  service_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:navigate.TestRsp.service_name)
}
#endif
void TestRsp::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:navigate.TestRsp.service_name)
}
void TestRsp::set_service_name(const void* value, size_t size) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:navigate.TestRsp.service_name)
}
::std::string* TestRsp::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:navigate.TestRsp.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TestRsp::release_service_name() {
  // @@protoc_insertion_point(field_release:navigate.TestRsp.service_name)
  
  return service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TestRsp::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:navigate.TestRsp.service_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetAccessReq::kServiceIdFieldNumber;
const int GetAccessReq::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetAccessReq::GetAccessReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_navigate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:navigate.GetAccessReq)
}
GetAccessReq::GetAccessReq(const GetAccessReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&service_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(service_id_));
  // @@protoc_insertion_point(copy_constructor:navigate.GetAccessReq)
}

void GetAccessReq::SharedCtor() {
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&service_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(service_id_));
  _cached_size_ = 0;
}

GetAccessReq::~GetAccessReq() {
  // @@protoc_insertion_point(destructor:navigate.GetAccessReq)
  SharedDtor();
}

void GetAccessReq::SharedDtor() {
}

void GetAccessReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAccessReq::descriptor() {
  protobuf_navigate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_navigate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetAccessReq& GetAccessReq::default_instance() {
  protobuf_navigate_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetAccessReq* GetAccessReq::New(::google::protobuf::Arena* arena) const {
  GetAccessReq* n = new GetAccessReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetAccessReq::Clear() {
// @@protoc_insertion_point(message_clear_start:navigate.GetAccessReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&service_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(service_id_));
  _internal_metadata_.Clear();
}

bool GetAccessReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:navigate.GetAccessReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 service_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &service_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 user_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:navigate.GetAccessReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navigate.GetAccessReq)
  return false;
#undef DO_
}

void GetAccessReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navigate.GetAccessReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 service_id = 1;
  if (this->service_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->service_id(), output);
  }

  // uint64 user_id = 2;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:navigate.GetAccessReq)
}

::google::protobuf::uint8* GetAccessReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:navigate.GetAccessReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 service_id = 1;
  if (this->service_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->service_id(), target);
  }

  // uint64 user_id = 2;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navigate.GetAccessReq)
  return target;
}

size_t GetAccessReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navigate.GetAccessReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 user_id = 2;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  // int32 service_id = 1;
  if (this->service_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->service_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAccessReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navigate.GetAccessReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAccessReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetAccessReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navigate.GetAccessReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navigate.GetAccessReq)
    MergeFrom(*source);
  }
}

void GetAccessReq::MergeFrom(const GetAccessReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navigate.GetAccessReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.service_id() != 0) {
    set_service_id(from.service_id());
  }
}

void GetAccessReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navigate.GetAccessReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAccessReq::CopyFrom(const GetAccessReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navigate.GetAccessReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccessReq::IsInitialized() const {
  return true;
}

void GetAccessReq::Swap(GetAccessReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetAccessReq::InternalSwap(GetAccessReq* other) {
  using std::swap;
  swap(user_id_, other->user_id_);
  swap(service_id_, other->service_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetAccessReq::GetMetadata() const {
  protobuf_navigate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_navigate_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetAccessReq

// int32 service_id = 1;
void GetAccessReq::clear_service_id() {
  service_id_ = 0;
}
::google::protobuf::int32 GetAccessReq::service_id() const {
  // @@protoc_insertion_point(field_get:navigate.GetAccessReq.service_id)
  return service_id_;
}
void GetAccessReq::set_service_id(::google::protobuf::int32 value) {
  
  service_id_ = value;
  // @@protoc_insertion_point(field_set:navigate.GetAccessReq.service_id)
}

// uint64 user_id = 2;
void GetAccessReq::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetAccessReq::user_id() const {
  // @@protoc_insertion_point(field_get:navigate.GetAccessReq.user_id)
  return user_id_;
}
void GetAccessReq::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:navigate.GetAccessReq.user_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetAccessRsp::kAccessKeyFieldNumber;
const int GetAccessRsp::kServiceIdFieldNumber;
const int GetAccessRsp::kProcIdFieldNumber;
const int GetAccessRsp::kOutIpFieldNumber;
const int GetAccessRsp::kOutPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetAccessRsp::GetAccessRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_navigate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:navigate.GetAccessRsp)
}
GetAccessRsp::GetAccessRsp(const GetAccessRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  out_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.out_ip().size() > 0) {
    out_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.out_ip_);
  }
  ::memcpy(&access_key_, &from.access_key_,
    static_cast<size_t>(reinterpret_cast<char*>(&out_port_) -
    reinterpret_cast<char*>(&access_key_)) + sizeof(out_port_));
  // @@protoc_insertion_point(copy_constructor:navigate.GetAccessRsp)
}

void GetAccessRsp::SharedCtor() {
  out_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&access_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&out_port_) -
      reinterpret_cast<char*>(&access_key_)) + sizeof(out_port_));
  _cached_size_ = 0;
}

GetAccessRsp::~GetAccessRsp() {
  // @@protoc_insertion_point(destructor:navigate.GetAccessRsp)
  SharedDtor();
}

void GetAccessRsp::SharedDtor() {
  out_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetAccessRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAccessRsp::descriptor() {
  protobuf_navigate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_navigate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetAccessRsp& GetAccessRsp::default_instance() {
  protobuf_navigate_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetAccessRsp* GetAccessRsp::New(::google::protobuf::Arena* arena) const {
  GetAccessRsp* n = new GetAccessRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetAccessRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:navigate.GetAccessRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  out_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&access_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&out_port_) -
      reinterpret_cast<char*>(&access_key_)) + sizeof(out_port_));
  _internal_metadata_.Clear();
}

bool GetAccessRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:navigate.GetAccessRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 access_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &access_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 service_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &service_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 proc_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proc_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes out_ip = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_out_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 out_port = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &out_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:navigate.GetAccessRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navigate.GetAccessRsp)
  return false;
#undef DO_
}

void GetAccessRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navigate.GetAccessRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 access_key = 1;
  if (this->access_key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->access_key(), output);
  }

  // int32 service_id = 2;
  if (this->service_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->service_id(), output);
  }

  // uint32 proc_id = 3;
  if (this->proc_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->proc_id(), output);
  }

  // bytes out_ip = 4;
  if (this->out_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->out_ip(), output);
  }

  // int32 out_port = 5;
  if (this->out_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->out_port(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:navigate.GetAccessRsp)
}

::google::protobuf::uint8* GetAccessRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:navigate.GetAccessRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 access_key = 1;
  if (this->access_key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->access_key(), target);
  }

  // int32 service_id = 2;
  if (this->service_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->service_id(), target);
  }

  // uint32 proc_id = 3;
  if (this->proc_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->proc_id(), target);
  }

  // bytes out_ip = 4;
  if (this->out_ip().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->out_ip(), target);
  }

  // int32 out_port = 5;
  if (this->out_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->out_port(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navigate.GetAccessRsp)
  return target;
}

size_t GetAccessRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navigate.GetAccessRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes out_ip = 4;
  if (this->out_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->out_ip());
  }

  // uint64 access_key = 1;
  if (this->access_key() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->access_key());
  }

  // int32 service_id = 2;
  if (this->service_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->service_id());
  }

  // uint32 proc_id = 3;
  if (this->proc_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->proc_id());
  }

  // int32 out_port = 5;
  if (this->out_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->out_port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAccessRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navigate.GetAccessRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAccessRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetAccessRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navigate.GetAccessRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navigate.GetAccessRsp)
    MergeFrom(*source);
  }
}

void GetAccessRsp::MergeFrom(const GetAccessRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navigate.GetAccessRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.out_ip().size() > 0) {

    out_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.out_ip_);
  }
  if (from.access_key() != 0) {
    set_access_key(from.access_key());
  }
  if (from.service_id() != 0) {
    set_service_id(from.service_id());
  }
  if (from.proc_id() != 0) {
    set_proc_id(from.proc_id());
  }
  if (from.out_port() != 0) {
    set_out_port(from.out_port());
  }
}

void GetAccessRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navigate.GetAccessRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAccessRsp::CopyFrom(const GetAccessRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navigate.GetAccessRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccessRsp::IsInitialized() const {
  return true;
}

void GetAccessRsp::Swap(GetAccessRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetAccessRsp::InternalSwap(GetAccessRsp* other) {
  using std::swap;
  out_ip_.Swap(&other->out_ip_);
  swap(access_key_, other->access_key_);
  swap(service_id_, other->service_id_);
  swap(proc_id_, other->proc_id_);
  swap(out_port_, other->out_port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetAccessRsp::GetMetadata() const {
  protobuf_navigate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_navigate_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetAccessRsp

// uint64 access_key = 1;
void GetAccessRsp::clear_access_key() {
  access_key_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetAccessRsp::access_key() const {
  // @@protoc_insertion_point(field_get:navigate.GetAccessRsp.access_key)
  return access_key_;
}
void GetAccessRsp::set_access_key(::google::protobuf::uint64 value) {
  
  access_key_ = value;
  // @@protoc_insertion_point(field_set:navigate.GetAccessRsp.access_key)
}

// int32 service_id = 2;
void GetAccessRsp::clear_service_id() {
  service_id_ = 0;
}
::google::protobuf::int32 GetAccessRsp::service_id() const {
  // @@protoc_insertion_point(field_get:navigate.GetAccessRsp.service_id)
  return service_id_;
}
void GetAccessRsp::set_service_id(::google::protobuf::int32 value) {
  
  service_id_ = value;
  // @@protoc_insertion_point(field_set:navigate.GetAccessRsp.service_id)
}

// uint32 proc_id = 3;
void GetAccessRsp::clear_proc_id() {
  proc_id_ = 0u;
}
::google::protobuf::uint32 GetAccessRsp::proc_id() const {
  // @@protoc_insertion_point(field_get:navigate.GetAccessRsp.proc_id)
  return proc_id_;
}
void GetAccessRsp::set_proc_id(::google::protobuf::uint32 value) {
  
  proc_id_ = value;
  // @@protoc_insertion_point(field_set:navigate.GetAccessRsp.proc_id)
}

// bytes out_ip = 4;
void GetAccessRsp::clear_out_ip() {
  out_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetAccessRsp::out_ip() const {
  // @@protoc_insertion_point(field_get:navigate.GetAccessRsp.out_ip)
  return out_ip_.GetNoArena();
}
void GetAccessRsp::set_out_ip(const ::std::string& value) {
  
  out_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:navigate.GetAccessRsp.out_ip)
}
#if LANG_CXX11
void GetAccessRsp::set_out_ip(::std::string&& value) {
  
  out_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:navigate.GetAccessRsp.out_ip)
}
#endif
void GetAccessRsp::set_out_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  out_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:navigate.GetAccessRsp.out_ip)
}
void GetAccessRsp::set_out_ip(const void* value, size_t size) {
  
  out_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:navigate.GetAccessRsp.out_ip)
}
::std::string* GetAccessRsp::mutable_out_ip() {
  
  // @@protoc_insertion_point(field_mutable:navigate.GetAccessRsp.out_ip)
  return out_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetAccessRsp::release_out_ip() {
  // @@protoc_insertion_point(field_release:navigate.GetAccessRsp.out_ip)
  
  return out_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetAccessRsp::set_allocated_out_ip(::std::string* out_ip) {
  if (out_ip != NULL) {
    
  } else {
    
  }
  out_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), out_ip);
  // @@protoc_insertion_point(field_set_allocated:navigate.GetAccessRsp.out_ip)
}

// int32 out_port = 5;
void GetAccessRsp::clear_out_port() {
  out_port_ = 0;
}
::google::protobuf::int32 GetAccessRsp::out_port() const {
  // @@protoc_insertion_point(field_get:navigate.GetAccessRsp.out_port)
  return out_port_;
}
void GetAccessRsp::set_out_port(::google::protobuf::int32 value) {
  
  out_port_ = value;
  // @@protoc_insertion_point(field_set:navigate.GetAccessRsp.out_port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PutLoadReq::kServiceIdFieldNumber;
const int PutLoadReq::kProcIdFieldNumber;
const int PutLoadReq::kLoadValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PutLoadReq::PutLoadReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_navigate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:navigate.PutLoadReq)
}
PutLoadReq::PutLoadReq(const PutLoadReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&service_id_, &from.service_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&load_val_) -
    reinterpret_cast<char*>(&service_id_)) + sizeof(load_val_));
  // @@protoc_insertion_point(copy_constructor:navigate.PutLoadReq)
}

void PutLoadReq::SharedCtor() {
  ::memset(&service_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&load_val_) -
      reinterpret_cast<char*>(&service_id_)) + sizeof(load_val_));
  _cached_size_ = 0;
}

PutLoadReq::~PutLoadReq() {
  // @@protoc_insertion_point(destructor:navigate.PutLoadReq)
  SharedDtor();
}

void PutLoadReq::SharedDtor() {
}

void PutLoadReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutLoadReq::descriptor() {
  protobuf_navigate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_navigate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PutLoadReq& PutLoadReq::default_instance() {
  protobuf_navigate_2eproto::InitDefaults();
  return *internal_default_instance();
}

PutLoadReq* PutLoadReq::New(::google::protobuf::Arena* arena) const {
  PutLoadReq* n = new PutLoadReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PutLoadReq::Clear() {
// @@protoc_insertion_point(message_clear_start:navigate.PutLoadReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&service_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&load_val_) -
      reinterpret_cast<char*>(&service_id_)) + sizeof(load_val_));
  _internal_metadata_.Clear();
}

bool PutLoadReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:navigate.PutLoadReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 service_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &service_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 proc_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proc_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 load_val = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &load_val_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:navigate.PutLoadReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navigate.PutLoadReq)
  return false;
#undef DO_
}

void PutLoadReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navigate.PutLoadReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 service_id = 1;
  if (this->service_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->service_id(), output);
  }

  // uint32 proc_id = 2;
  if (this->proc_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->proc_id(), output);
  }

  // int32 load_val = 3;
  if (this->load_val() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->load_val(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:navigate.PutLoadReq)
}

::google::protobuf::uint8* PutLoadReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:navigate.PutLoadReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 service_id = 1;
  if (this->service_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->service_id(), target);
  }

  // uint32 proc_id = 2;
  if (this->proc_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->proc_id(), target);
  }

  // int32 load_val = 3;
  if (this->load_val() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->load_val(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navigate.PutLoadReq)
  return target;
}

size_t PutLoadReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navigate.PutLoadReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 service_id = 1;
  if (this->service_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->service_id());
  }

  // uint32 proc_id = 2;
  if (this->proc_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->proc_id());
  }

  // int32 load_val = 3;
  if (this->load_val() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->load_val());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutLoadReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navigate.PutLoadReq)
  GOOGLE_DCHECK_NE(&from, this);
  const PutLoadReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PutLoadReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navigate.PutLoadReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navigate.PutLoadReq)
    MergeFrom(*source);
  }
}

void PutLoadReq::MergeFrom(const PutLoadReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navigate.PutLoadReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.service_id() != 0) {
    set_service_id(from.service_id());
  }
  if (from.proc_id() != 0) {
    set_proc_id(from.proc_id());
  }
  if (from.load_val() != 0) {
    set_load_val(from.load_val());
  }
}

void PutLoadReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navigate.PutLoadReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutLoadReq::CopyFrom(const PutLoadReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navigate.PutLoadReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutLoadReq::IsInitialized() const {
  return true;
}

void PutLoadReq::Swap(PutLoadReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PutLoadReq::InternalSwap(PutLoadReq* other) {
  using std::swap;
  swap(service_id_, other->service_id_);
  swap(proc_id_, other->proc_id_);
  swap(load_val_, other->load_val_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PutLoadReq::GetMetadata() const {
  protobuf_navigate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_navigate_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PutLoadReq

// int32 service_id = 1;
void PutLoadReq::clear_service_id() {
  service_id_ = 0;
}
::google::protobuf::int32 PutLoadReq::service_id() const {
  // @@protoc_insertion_point(field_get:navigate.PutLoadReq.service_id)
  return service_id_;
}
void PutLoadReq::set_service_id(::google::protobuf::int32 value) {
  
  service_id_ = value;
  // @@protoc_insertion_point(field_set:navigate.PutLoadReq.service_id)
}

// uint32 proc_id = 2;
void PutLoadReq::clear_proc_id() {
  proc_id_ = 0u;
}
::google::protobuf::uint32 PutLoadReq::proc_id() const {
  // @@protoc_insertion_point(field_get:navigate.PutLoadReq.proc_id)
  return proc_id_;
}
void PutLoadReq::set_proc_id(::google::protobuf::uint32 value) {
  
  proc_id_ = value;
  // @@protoc_insertion_point(field_set:navigate.PutLoadReq.proc_id)
}

// int32 load_val = 3;
void PutLoadReq::clear_load_val() {
  load_val_ = 0;
}
::google::protobuf::int32 PutLoadReq::load_val() const {
  // @@protoc_insertion_point(field_get:navigate.PutLoadReq.load_val)
  return load_val_;
}
void PutLoadReq::set_load_val(::google::protobuf::int32 value) {
  
  load_val_ = value;
  // @@protoc_insertion_point(field_set:navigate.PutLoadReq.load_val)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PutLoadRsp::PutLoadRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_navigate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:navigate.PutLoadRsp)
}
PutLoadRsp::PutLoadRsp(const PutLoadRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:navigate.PutLoadRsp)
}

void PutLoadRsp::SharedCtor() {
  _cached_size_ = 0;
}

PutLoadRsp::~PutLoadRsp() {
  // @@protoc_insertion_point(destructor:navigate.PutLoadRsp)
  SharedDtor();
}

void PutLoadRsp::SharedDtor() {
}

void PutLoadRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutLoadRsp::descriptor() {
  protobuf_navigate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_navigate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PutLoadRsp& PutLoadRsp::default_instance() {
  protobuf_navigate_2eproto::InitDefaults();
  return *internal_default_instance();
}

PutLoadRsp* PutLoadRsp::New(::google::protobuf::Arena* arena) const {
  PutLoadRsp* n = new PutLoadRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PutLoadRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:navigate.PutLoadRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool PutLoadRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:navigate.PutLoadRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:navigate.PutLoadRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navigate.PutLoadRsp)
  return false;
#undef DO_
}

void PutLoadRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navigate.PutLoadRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:navigate.PutLoadRsp)
}

::google::protobuf::uint8* PutLoadRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:navigate.PutLoadRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navigate.PutLoadRsp)
  return target;
}

size_t PutLoadRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navigate.PutLoadRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutLoadRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navigate.PutLoadRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const PutLoadRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PutLoadRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navigate.PutLoadRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navigate.PutLoadRsp)
    MergeFrom(*source);
  }
}

void PutLoadRsp::MergeFrom(const PutLoadRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navigate.PutLoadRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PutLoadRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navigate.PutLoadRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutLoadRsp::CopyFrom(const PutLoadRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navigate.PutLoadRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutLoadRsp::IsInitialized() const {
  return true;
}

void PutLoadRsp::Swap(PutLoadRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PutLoadRsp::InternalSwap(PutLoadRsp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PutLoadRsp::GetMetadata() const {
  protobuf_navigate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_navigate_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PutLoadRsp

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NavigateMsg::kTestReqFieldNumber;
const int NavigateMsg::kTestRspFieldNumber;
const int NavigateMsg::kGetAccessReqFieldNumber;
const int NavigateMsg::kGetAccessRspFieldNumber;
const int NavigateMsg::kPutLoadReqFieldNumber;
const int NavigateMsg::kPutLoadRspFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NavigateMsg::NavigateMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_navigate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:navigate.NavigateMsg)
}
NavigateMsg::NavigateMsg(const NavigateMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_choice();
  switch (from.choice_case()) {
    case kTestReq: {
      mutable_test_req()->::navigate::TestReq::MergeFrom(from.test_req());
      break;
    }
    case kTestRsp: {
      mutable_test_rsp()->::navigate::TestRsp::MergeFrom(from.test_rsp());
      break;
    }
    case kGetAccessReq: {
      mutable_get_access_req()->::navigate::GetAccessReq::MergeFrom(from.get_access_req());
      break;
    }
    case kGetAccessRsp: {
      mutable_get_access_rsp()->::navigate::GetAccessRsp::MergeFrom(from.get_access_rsp());
      break;
    }
    case kPutLoadReq: {
      mutable_put_load_req()->::navigate::PutLoadReq::MergeFrom(from.put_load_req());
      break;
    }
    case kPutLoadRsp: {
      mutable_put_load_rsp()->::navigate::PutLoadRsp::MergeFrom(from.put_load_rsp());
      break;
    }
    case CHOICE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:navigate.NavigateMsg)
}

void NavigateMsg::SharedCtor() {
  clear_has_choice();
  _cached_size_ = 0;
}

NavigateMsg::~NavigateMsg() {
  // @@protoc_insertion_point(destructor:navigate.NavigateMsg)
  SharedDtor();
}

void NavigateMsg::SharedDtor() {
  if (has_choice()) {
    clear_choice();
  }
}

void NavigateMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NavigateMsg::descriptor() {
  protobuf_navigate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_navigate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NavigateMsg& NavigateMsg::default_instance() {
  protobuf_navigate_2eproto::InitDefaults();
  return *internal_default_instance();
}

NavigateMsg* NavigateMsg::New(::google::protobuf::Arena* arena) const {
  NavigateMsg* n = new NavigateMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NavigateMsg::clear_choice() {
// @@protoc_insertion_point(one_of_clear_start:navigate.NavigateMsg)
  switch (choice_case()) {
    case kTestReq: {
      delete choice_.test_req_;
      break;
    }
    case kTestRsp: {
      delete choice_.test_rsp_;
      break;
    }
    case kGetAccessReq: {
      delete choice_.get_access_req_;
      break;
    }
    case kGetAccessRsp: {
      delete choice_.get_access_rsp_;
      break;
    }
    case kPutLoadReq: {
      delete choice_.put_load_req_;
      break;
    }
    case kPutLoadRsp: {
      delete choice_.put_load_rsp_;
      break;
    }
    case CHOICE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CHOICE_NOT_SET;
}


void NavigateMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:navigate.NavigateMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_choice();
  _internal_metadata_.Clear();
}

bool NavigateMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:navigate.NavigateMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .navigate.TestReq test_req = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_test_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .navigate.TestRsp test_rsp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_test_rsp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .navigate.GetAccessReq get_access_req = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_access_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .navigate.GetAccessRsp get_access_rsp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_access_rsp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .navigate.PutLoadReq put_load_req = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_put_load_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .navigate.PutLoadRsp put_load_rsp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_put_load_rsp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:navigate.NavigateMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navigate.NavigateMsg)
  return false;
#undef DO_
}

void NavigateMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navigate.NavigateMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .navigate.TestReq test_req = 1;
  if (has_test_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *choice_.test_req_, output);
  }

  // .navigate.TestRsp test_rsp = 2;
  if (has_test_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *choice_.test_rsp_, output);
  }

  // .navigate.GetAccessReq get_access_req = 3;
  if (has_get_access_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *choice_.get_access_req_, output);
  }

  // .navigate.GetAccessRsp get_access_rsp = 4;
  if (has_get_access_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *choice_.get_access_rsp_, output);
  }

  // .navigate.PutLoadReq put_load_req = 5;
  if (has_put_load_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *choice_.put_load_req_, output);
  }

  // .navigate.PutLoadRsp put_load_rsp = 6;
  if (has_put_load_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *choice_.put_load_rsp_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:navigate.NavigateMsg)
}

::google::protobuf::uint8* NavigateMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:navigate.NavigateMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .navigate.TestReq test_req = 1;
  if (has_test_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *choice_.test_req_, deterministic, target);
  }

  // .navigate.TestRsp test_rsp = 2;
  if (has_test_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *choice_.test_rsp_, deterministic, target);
  }

  // .navigate.GetAccessReq get_access_req = 3;
  if (has_get_access_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *choice_.get_access_req_, deterministic, target);
  }

  // .navigate.GetAccessRsp get_access_rsp = 4;
  if (has_get_access_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *choice_.get_access_rsp_, deterministic, target);
  }

  // .navigate.PutLoadReq put_load_req = 5;
  if (has_put_load_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *choice_.put_load_req_, deterministic, target);
  }

  // .navigate.PutLoadRsp put_load_rsp = 6;
  if (has_put_load_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *choice_.put_load_rsp_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navigate.NavigateMsg)
  return target;
}

size_t NavigateMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navigate.NavigateMsg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (choice_case()) {
    // .navigate.TestReq test_req = 1;
    case kTestReq: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *choice_.test_req_);
      break;
    }
    // .navigate.TestRsp test_rsp = 2;
    case kTestRsp: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *choice_.test_rsp_);
      break;
    }
    // .navigate.GetAccessReq get_access_req = 3;
    case kGetAccessReq: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *choice_.get_access_req_);
      break;
    }
    // .navigate.GetAccessRsp get_access_rsp = 4;
    case kGetAccessRsp: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *choice_.get_access_rsp_);
      break;
    }
    // .navigate.PutLoadReq put_load_req = 5;
    case kPutLoadReq: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *choice_.put_load_req_);
      break;
    }
    // .navigate.PutLoadRsp put_load_rsp = 6;
    case kPutLoadRsp: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *choice_.put_load_rsp_);
      break;
    }
    case CHOICE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NavigateMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navigate.NavigateMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const NavigateMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NavigateMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navigate.NavigateMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navigate.NavigateMsg)
    MergeFrom(*source);
  }
}

void NavigateMsg::MergeFrom(const NavigateMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navigate.NavigateMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.choice_case()) {
    case kTestReq: {
      mutable_test_req()->::navigate::TestReq::MergeFrom(from.test_req());
      break;
    }
    case kTestRsp: {
      mutable_test_rsp()->::navigate::TestRsp::MergeFrom(from.test_rsp());
      break;
    }
    case kGetAccessReq: {
      mutable_get_access_req()->::navigate::GetAccessReq::MergeFrom(from.get_access_req());
      break;
    }
    case kGetAccessRsp: {
      mutable_get_access_rsp()->::navigate::GetAccessRsp::MergeFrom(from.get_access_rsp());
      break;
    }
    case kPutLoadReq: {
      mutable_put_load_req()->::navigate::PutLoadReq::MergeFrom(from.put_load_req());
      break;
    }
    case kPutLoadRsp: {
      mutable_put_load_rsp()->::navigate::PutLoadRsp::MergeFrom(from.put_load_rsp());
      break;
    }
    case CHOICE_NOT_SET: {
      break;
    }
  }
}

void NavigateMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navigate.NavigateMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavigateMsg::CopyFrom(const NavigateMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navigate.NavigateMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigateMsg::IsInitialized() const {
  return true;
}

void NavigateMsg::Swap(NavigateMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NavigateMsg::InternalSwap(NavigateMsg* other) {
  using std::swap;
  swap(choice_, other->choice_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NavigateMsg::GetMetadata() const {
  protobuf_navigate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_navigate_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NavigateMsg

// .navigate.TestReq test_req = 1;
bool NavigateMsg::has_test_req() const {
  return choice_case() == kTestReq;
}
void NavigateMsg::set_has_test_req() {
  _oneof_case_[0] = kTestReq;
}
void NavigateMsg::clear_test_req() {
  if (has_test_req()) {
    delete choice_.test_req_;
    clear_has_choice();
  }
}
 const ::navigate::TestReq& NavigateMsg::test_req() const {
  // @@protoc_insertion_point(field_get:navigate.NavigateMsg.test_req)
  return has_test_req()
      ? *choice_.test_req_
      : ::navigate::TestReq::default_instance();
}
::navigate::TestReq* NavigateMsg::mutable_test_req() {
  if (!has_test_req()) {
    clear_choice();
    set_has_test_req();
    choice_.test_req_ = new ::navigate::TestReq;
  }
  // @@protoc_insertion_point(field_mutable:navigate.NavigateMsg.test_req)
  return choice_.test_req_;
}
::navigate::TestReq* NavigateMsg::release_test_req() {
  // @@protoc_insertion_point(field_release:navigate.NavigateMsg.test_req)
  if (has_test_req()) {
    clear_has_choice();
    ::navigate::TestReq* temp = choice_.test_req_;
    choice_.test_req_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void NavigateMsg::set_allocated_test_req(::navigate::TestReq* test_req) {
  clear_choice();
  if (test_req) {
    set_has_test_req();
    choice_.test_req_ = test_req;
  }
  // @@protoc_insertion_point(field_set_allocated:navigate.NavigateMsg.test_req)
}

// .navigate.TestRsp test_rsp = 2;
bool NavigateMsg::has_test_rsp() const {
  return choice_case() == kTestRsp;
}
void NavigateMsg::set_has_test_rsp() {
  _oneof_case_[0] = kTestRsp;
}
void NavigateMsg::clear_test_rsp() {
  if (has_test_rsp()) {
    delete choice_.test_rsp_;
    clear_has_choice();
  }
}
 const ::navigate::TestRsp& NavigateMsg::test_rsp() const {
  // @@protoc_insertion_point(field_get:navigate.NavigateMsg.test_rsp)
  return has_test_rsp()
      ? *choice_.test_rsp_
      : ::navigate::TestRsp::default_instance();
}
::navigate::TestRsp* NavigateMsg::mutable_test_rsp() {
  if (!has_test_rsp()) {
    clear_choice();
    set_has_test_rsp();
    choice_.test_rsp_ = new ::navigate::TestRsp;
  }
  // @@protoc_insertion_point(field_mutable:navigate.NavigateMsg.test_rsp)
  return choice_.test_rsp_;
}
::navigate::TestRsp* NavigateMsg::release_test_rsp() {
  // @@protoc_insertion_point(field_release:navigate.NavigateMsg.test_rsp)
  if (has_test_rsp()) {
    clear_has_choice();
    ::navigate::TestRsp* temp = choice_.test_rsp_;
    choice_.test_rsp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void NavigateMsg::set_allocated_test_rsp(::navigate::TestRsp* test_rsp) {
  clear_choice();
  if (test_rsp) {
    set_has_test_rsp();
    choice_.test_rsp_ = test_rsp;
  }
  // @@protoc_insertion_point(field_set_allocated:navigate.NavigateMsg.test_rsp)
}

// .navigate.GetAccessReq get_access_req = 3;
bool NavigateMsg::has_get_access_req() const {
  return choice_case() == kGetAccessReq;
}
void NavigateMsg::set_has_get_access_req() {
  _oneof_case_[0] = kGetAccessReq;
}
void NavigateMsg::clear_get_access_req() {
  if (has_get_access_req()) {
    delete choice_.get_access_req_;
    clear_has_choice();
  }
}
 const ::navigate::GetAccessReq& NavigateMsg::get_access_req() const {
  // @@protoc_insertion_point(field_get:navigate.NavigateMsg.get_access_req)
  return has_get_access_req()
      ? *choice_.get_access_req_
      : ::navigate::GetAccessReq::default_instance();
}
::navigate::GetAccessReq* NavigateMsg::mutable_get_access_req() {
  if (!has_get_access_req()) {
    clear_choice();
    set_has_get_access_req();
    choice_.get_access_req_ = new ::navigate::GetAccessReq;
  }
  // @@protoc_insertion_point(field_mutable:navigate.NavigateMsg.get_access_req)
  return choice_.get_access_req_;
}
::navigate::GetAccessReq* NavigateMsg::release_get_access_req() {
  // @@protoc_insertion_point(field_release:navigate.NavigateMsg.get_access_req)
  if (has_get_access_req()) {
    clear_has_choice();
    ::navigate::GetAccessReq* temp = choice_.get_access_req_;
    choice_.get_access_req_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void NavigateMsg::set_allocated_get_access_req(::navigate::GetAccessReq* get_access_req) {
  clear_choice();
  if (get_access_req) {
    set_has_get_access_req();
    choice_.get_access_req_ = get_access_req;
  }
  // @@protoc_insertion_point(field_set_allocated:navigate.NavigateMsg.get_access_req)
}

// .navigate.GetAccessRsp get_access_rsp = 4;
bool NavigateMsg::has_get_access_rsp() const {
  return choice_case() == kGetAccessRsp;
}
void NavigateMsg::set_has_get_access_rsp() {
  _oneof_case_[0] = kGetAccessRsp;
}
void NavigateMsg::clear_get_access_rsp() {
  if (has_get_access_rsp()) {
    delete choice_.get_access_rsp_;
    clear_has_choice();
  }
}
 const ::navigate::GetAccessRsp& NavigateMsg::get_access_rsp() const {
  // @@protoc_insertion_point(field_get:navigate.NavigateMsg.get_access_rsp)
  return has_get_access_rsp()
      ? *choice_.get_access_rsp_
      : ::navigate::GetAccessRsp::default_instance();
}
::navigate::GetAccessRsp* NavigateMsg::mutable_get_access_rsp() {
  if (!has_get_access_rsp()) {
    clear_choice();
    set_has_get_access_rsp();
    choice_.get_access_rsp_ = new ::navigate::GetAccessRsp;
  }
  // @@protoc_insertion_point(field_mutable:navigate.NavigateMsg.get_access_rsp)
  return choice_.get_access_rsp_;
}
::navigate::GetAccessRsp* NavigateMsg::release_get_access_rsp() {
  // @@protoc_insertion_point(field_release:navigate.NavigateMsg.get_access_rsp)
  if (has_get_access_rsp()) {
    clear_has_choice();
    ::navigate::GetAccessRsp* temp = choice_.get_access_rsp_;
    choice_.get_access_rsp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void NavigateMsg::set_allocated_get_access_rsp(::navigate::GetAccessRsp* get_access_rsp) {
  clear_choice();
  if (get_access_rsp) {
    set_has_get_access_rsp();
    choice_.get_access_rsp_ = get_access_rsp;
  }
  // @@protoc_insertion_point(field_set_allocated:navigate.NavigateMsg.get_access_rsp)
}

// .navigate.PutLoadReq put_load_req = 5;
bool NavigateMsg::has_put_load_req() const {
  return choice_case() == kPutLoadReq;
}
void NavigateMsg::set_has_put_load_req() {
  _oneof_case_[0] = kPutLoadReq;
}
void NavigateMsg::clear_put_load_req() {
  if (has_put_load_req()) {
    delete choice_.put_load_req_;
    clear_has_choice();
  }
}
 const ::navigate::PutLoadReq& NavigateMsg::put_load_req() const {
  // @@protoc_insertion_point(field_get:navigate.NavigateMsg.put_load_req)
  return has_put_load_req()
      ? *choice_.put_load_req_
      : ::navigate::PutLoadReq::default_instance();
}
::navigate::PutLoadReq* NavigateMsg::mutable_put_load_req() {
  if (!has_put_load_req()) {
    clear_choice();
    set_has_put_load_req();
    choice_.put_load_req_ = new ::navigate::PutLoadReq;
  }
  // @@protoc_insertion_point(field_mutable:navigate.NavigateMsg.put_load_req)
  return choice_.put_load_req_;
}
::navigate::PutLoadReq* NavigateMsg::release_put_load_req() {
  // @@protoc_insertion_point(field_release:navigate.NavigateMsg.put_load_req)
  if (has_put_load_req()) {
    clear_has_choice();
    ::navigate::PutLoadReq* temp = choice_.put_load_req_;
    choice_.put_load_req_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void NavigateMsg::set_allocated_put_load_req(::navigate::PutLoadReq* put_load_req) {
  clear_choice();
  if (put_load_req) {
    set_has_put_load_req();
    choice_.put_load_req_ = put_load_req;
  }
  // @@protoc_insertion_point(field_set_allocated:navigate.NavigateMsg.put_load_req)
}

// .navigate.PutLoadRsp put_load_rsp = 6;
bool NavigateMsg::has_put_load_rsp() const {
  return choice_case() == kPutLoadRsp;
}
void NavigateMsg::set_has_put_load_rsp() {
  _oneof_case_[0] = kPutLoadRsp;
}
void NavigateMsg::clear_put_load_rsp() {
  if (has_put_load_rsp()) {
    delete choice_.put_load_rsp_;
    clear_has_choice();
  }
}
 const ::navigate::PutLoadRsp& NavigateMsg::put_load_rsp() const {
  // @@protoc_insertion_point(field_get:navigate.NavigateMsg.put_load_rsp)
  return has_put_load_rsp()
      ? *choice_.put_load_rsp_
      : ::navigate::PutLoadRsp::default_instance();
}
::navigate::PutLoadRsp* NavigateMsg::mutable_put_load_rsp() {
  if (!has_put_load_rsp()) {
    clear_choice();
    set_has_put_load_rsp();
    choice_.put_load_rsp_ = new ::navigate::PutLoadRsp;
  }
  // @@protoc_insertion_point(field_mutable:navigate.NavigateMsg.put_load_rsp)
  return choice_.put_load_rsp_;
}
::navigate::PutLoadRsp* NavigateMsg::release_put_load_rsp() {
  // @@protoc_insertion_point(field_release:navigate.NavigateMsg.put_load_rsp)
  if (has_put_load_rsp()) {
    clear_has_choice();
    ::navigate::PutLoadRsp* temp = choice_.put_load_rsp_;
    choice_.put_load_rsp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void NavigateMsg::set_allocated_put_load_rsp(::navigate::PutLoadRsp* put_load_rsp) {
  clear_choice();
  if (put_load_rsp) {
    set_has_put_load_rsp();
    choice_.put_load_rsp_ = put_load_rsp;
  }
  // @@protoc_insertion_point(field_set_allocated:navigate.NavigateMsg.put_load_rsp)
}

bool NavigateMsg::has_choice() const {
  return choice_case() != CHOICE_NOT_SET;
}
void NavigateMsg::clear_has_choice() {
  _oneof_case_[0] = CHOICE_NOT_SET;
}
NavigateMsg::ChoiceCase NavigateMsg::choice_case() const {
  return NavigateMsg::ChoiceCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace navigate

// @@protoc_insertion_point(global_scope)
