// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace data {
class Body_MsgReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Body_MsgReq>
     _instance;
} _Body_MsgReq_default_instance_;
class Body_MsgRsqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Body_MsgRsq>
     _instance;
} _Body_MsgRsq_default_instance_;
class BodyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Body>
     _instance;
  const ::data::Body_MsgReq* msg_req_;
  const ::data::Body_MsgRsq* msg_rsp_;
} _Body_default_instance_;

namespace protobuf_data_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body_MsgReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body_MsgRsq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body_MsgRsq, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body_MsgRsq, info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(BodyDefaultTypeInternal, msg_req_),
  offsetof(BodyDefaultTypeInternal, msg_rsp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, service_msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, msg_type_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(Body_MsgReq)},
  { 5, -1, sizeof(Body_MsgRsq)},
  { 12, -1, sizeof(Body)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Body_MsgReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Body_MsgRsq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Body_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "data.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fany_2eproto::InitDefaults();
  _Body_MsgReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Body_MsgReq_default_instance_);_Body_MsgRsq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Body_MsgRsq_default_instance_);_Body_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Body_default_instance_);_Body_default_instance_.msg_req_ = const_cast< ::data::Body_MsgReq*>(
      ::data::Body_MsgReq::internal_default_instance());
  _Body_default_instance_.msg_rsp_ = const_cast< ::data::Body_MsgRsq*>(
      ::data::Body_MsgRsq::internal_default_instance());
  _Body_default_instance_._instance.get_mutable()->service_msg_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\ndata.proto\022\004data\032\031google/protobuf/any."
      "proto\"\271\001\n\004Body\022$\n\007msg_req\030\001 \001(\0132\021.data.B"
      "ody.MsgReqH\000\022$\n\007msg_rsp\030\002 \001(\0132\021.data.Bod"
      "y.MsgRsqH\000\022)\n\013service_msg\030\003 \001(\0132\024.google"
      ".protobuf.Any\032\010\n\006MsgReq\032$\n\006MsgRsq\022\014\n\004cod"
      "e\030\001 \001(\005\022\014\n\004info\030\002 \001(\014B\n\n\010msg_typeb\006proto"
      "3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 241);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "data.proto", &protobuf_RegisterTypes);
  ::google::protobuf::protobuf_google_2fprotobuf_2fany_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_data_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Body_MsgReq::Body_MsgReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_data_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:data.Body.MsgReq)
}
Body_MsgReq::Body_MsgReq(const Body_MsgReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:data.Body.MsgReq)
}

void Body_MsgReq::SharedCtor() {
  _cached_size_ = 0;
}

Body_MsgReq::~Body_MsgReq() {
  // @@protoc_insertion_point(destructor:data.Body.MsgReq)
  SharedDtor();
}

void Body_MsgReq::SharedDtor() {
}

void Body_MsgReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Body_MsgReq::descriptor() {
  protobuf_data_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_data_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Body_MsgReq& Body_MsgReq::default_instance() {
  protobuf_data_2eproto::InitDefaults();
  return *internal_default_instance();
}

Body_MsgReq* Body_MsgReq::New(::google::protobuf::Arena* arena) const {
  Body_MsgReq* n = new Body_MsgReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Body_MsgReq::Clear() {
// @@protoc_insertion_point(message_clear_start:data.Body.MsgReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool Body_MsgReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:data.Body.MsgReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:data.Body.MsgReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data.Body.MsgReq)
  return false;
#undef DO_
}

void Body_MsgReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data.Body.MsgReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:data.Body.MsgReq)
}

::google::protobuf::uint8* Body_MsgReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:data.Body.MsgReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.Body.MsgReq)
  return target;
}

size_t Body_MsgReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data.Body.MsgReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Body_MsgReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data.Body.MsgReq)
  GOOGLE_DCHECK_NE(&from, this);
  const Body_MsgReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Body_MsgReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data.Body.MsgReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data.Body.MsgReq)
    MergeFrom(*source);
  }
}

void Body_MsgReq::MergeFrom(const Body_MsgReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data.Body.MsgReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Body_MsgReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data.Body.MsgReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Body_MsgReq::CopyFrom(const Body_MsgReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data.Body.MsgReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Body_MsgReq::IsInitialized() const {
  return true;
}

void Body_MsgReq::Swap(Body_MsgReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Body_MsgReq::InternalSwap(Body_MsgReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Body_MsgReq::GetMetadata() const {
  protobuf_data_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_data_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Body_MsgReq

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Body_MsgRsq::kCodeFieldNumber;
const int Body_MsgRsq::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Body_MsgRsq::Body_MsgRsq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_data_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:data.Body.MsgRsq)
}
Body_MsgRsq::Body_MsgRsq(const Body_MsgRsq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.info().size() > 0) {
    info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:data.Body.MsgRsq)
}

void Body_MsgRsq::SharedCtor() {
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  _cached_size_ = 0;
}

Body_MsgRsq::~Body_MsgRsq() {
  // @@protoc_insertion_point(destructor:data.Body.MsgRsq)
  SharedDtor();
}

void Body_MsgRsq::SharedDtor() {
  info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Body_MsgRsq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Body_MsgRsq::descriptor() {
  protobuf_data_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_data_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Body_MsgRsq& Body_MsgRsq::default_instance() {
  protobuf_data_2eproto::InitDefaults();
  return *internal_default_instance();
}

Body_MsgRsq* Body_MsgRsq::New(::google::protobuf::Arena* arena) const {
  Body_MsgRsq* n = new Body_MsgRsq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Body_MsgRsq::Clear() {
// @@protoc_insertion_point(message_clear_start:data.Body.MsgRsq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  _internal_metadata_.Clear();
}

bool Body_MsgRsq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:data.Body.MsgRsq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data.Body.MsgRsq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data.Body.MsgRsq)
  return false;
#undef DO_
}

void Body_MsgRsq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data.Body.MsgRsq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // bytes info = 2;
  if (this->info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->info(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:data.Body.MsgRsq)
}

::google::protobuf::uint8* Body_MsgRsq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:data.Body.MsgRsq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // bytes info = 2;
  if (this->info().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->info(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.Body.MsgRsq)
  return target;
}

size_t Body_MsgRsq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data.Body.MsgRsq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes info = 2;
  if (this->info().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->info());
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Body_MsgRsq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data.Body.MsgRsq)
  GOOGLE_DCHECK_NE(&from, this);
  const Body_MsgRsq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Body_MsgRsq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data.Body.MsgRsq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data.Body.MsgRsq)
    MergeFrom(*source);
  }
}

void Body_MsgRsq::MergeFrom(const Body_MsgRsq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data.Body.MsgRsq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.info().size() > 0) {

    info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void Body_MsgRsq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data.Body.MsgRsq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Body_MsgRsq::CopyFrom(const Body_MsgRsq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data.Body.MsgRsq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Body_MsgRsq::IsInitialized() const {
  return true;
}

void Body_MsgRsq::Swap(Body_MsgRsq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Body_MsgRsq::InternalSwap(Body_MsgRsq* other) {
  using std::swap;
  info_.Swap(&other->info_);
  swap(code_, other->code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Body_MsgRsq::GetMetadata() const {
  protobuf_data_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_data_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Body_MsgRsq

// int32 code = 1;
void Body_MsgRsq::clear_code() {
  code_ = 0;
}
::google::protobuf::int32 Body_MsgRsq::code() const {
  // @@protoc_insertion_point(field_get:data.Body.MsgRsq.code)
  return code_;
}
void Body_MsgRsq::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:data.Body.MsgRsq.code)
}

// bytes info = 2;
void Body_MsgRsq::clear_info() {
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Body_MsgRsq::info() const {
  // @@protoc_insertion_point(field_get:data.Body.MsgRsq.info)
  return info_.GetNoArena();
}
void Body_MsgRsq::set_info(const ::std::string& value) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data.Body.MsgRsq.info)
}
#if LANG_CXX11
void Body_MsgRsq::set_info(::std::string&& value) {
  
  info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:data.Body.MsgRsq.info)
}
#endif
void Body_MsgRsq::set_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data.Body.MsgRsq.info)
}
void Body_MsgRsq::set_info(const void* value, size_t size) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data.Body.MsgRsq.info)
}
::std::string* Body_MsgRsq::mutable_info() {
  
  // @@protoc_insertion_point(field_mutable:data.Body.MsgRsq.info)
  return info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Body_MsgRsq::release_info() {
  // @@protoc_insertion_point(field_release:data.Body.MsgRsq.info)
  
  return info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Body_MsgRsq::set_allocated_info(::std::string* info) {
  if (info != NULL) {
    
  } else {
    
  }
  info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:data.Body.MsgRsq.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Body::kMsgReqFieldNumber;
const int Body::kMsgRspFieldNumber;
const int Body::kServiceMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Body::Body()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_data_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:data.Body)
}
Body::Body(const Body& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_service_msg()) {
    service_msg_ = new ::google::protobuf::Any(*from.service_msg_);
  } else {
    service_msg_ = NULL;
  }
  clear_has_msg_type();
  switch (from.msg_type_case()) {
    case kMsgReq: {
      mutable_msg_req()->::data::Body_MsgReq::MergeFrom(from.msg_req());
      break;
    }
    case kMsgRsp: {
      mutable_msg_rsp()->::data::Body_MsgRsq::MergeFrom(from.msg_rsp());
      break;
    }
    case MSG_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:data.Body)
}

void Body::SharedCtor() {
  service_msg_ = NULL;
  clear_has_msg_type();
  _cached_size_ = 0;
}

Body::~Body() {
  // @@protoc_insertion_point(destructor:data.Body)
  SharedDtor();
}

void Body::SharedDtor() {
  if (this != internal_default_instance()) delete service_msg_;
  if (has_msg_type()) {
    clear_msg_type();
  }
}

void Body::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Body::descriptor() {
  protobuf_data_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_data_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Body& Body::default_instance() {
  protobuf_data_2eproto::InitDefaults();
  return *internal_default_instance();
}

Body* Body::New(::google::protobuf::Arena* arena) const {
  Body* n = new Body;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Body::clear_msg_type() {
// @@protoc_insertion_point(one_of_clear_start:data.Body)
  switch (msg_type_case()) {
    case kMsgReq: {
      delete msg_type_.msg_req_;
      break;
    }
    case kMsgRsp: {
      delete msg_type_.msg_rsp_;
      break;
    }
    case MSG_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_TYPE_NOT_SET;
}


void Body::Clear() {
// @@protoc_insertion_point(message_clear_start:data.Body)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && service_msg_ != NULL) {
    delete service_msg_;
  }
  service_msg_ = NULL;
  clear_msg_type();
  _internal_metadata_.Clear();
}

bool Body::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:data.Body)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .data.Body.MsgReq msg_req = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .data.Body.MsgRsq msg_rsp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_rsp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any service_msg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_service_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data.Body)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data.Body)
  return false;
#undef DO_
}

void Body::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data.Body)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .data.Body.MsgReq msg_req = 1;
  if (has_msg_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *msg_type_.msg_req_, output);
  }

  // .data.Body.MsgRsq msg_rsp = 2;
  if (has_msg_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *msg_type_.msg_rsp_, output);
  }

  // .google.protobuf.Any service_msg = 3;
  if (this->has_service_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->service_msg_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:data.Body)
}

::google::protobuf::uint8* Body::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:data.Body)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .data.Body.MsgReq msg_req = 1;
  if (has_msg_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *msg_type_.msg_req_, deterministic, target);
  }

  // .data.Body.MsgRsq msg_rsp = 2;
  if (has_msg_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *msg_type_.msg_rsp_, deterministic, target);
  }

  // .google.protobuf.Any service_msg = 3;
  if (this->has_service_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->service_msg_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.Body)
  return target;
}

size_t Body::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data.Body)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.Any service_msg = 3;
  if (this->has_service_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->service_msg_);
  }

  switch (msg_type_case()) {
    // .data.Body.MsgReq msg_req = 1;
    case kMsgReq: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_type_.msg_req_);
      break;
    }
    // .data.Body.MsgRsq msg_rsp = 2;
    case kMsgRsp: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_type_.msg_rsp_);
      break;
    }
    case MSG_TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Body::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data.Body)
  GOOGLE_DCHECK_NE(&from, this);
  const Body* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Body>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data.Body)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data.Body)
    MergeFrom(*source);
  }
}

void Body::MergeFrom(const Body& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data.Body)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_service_msg()) {
    mutable_service_msg()->::google::protobuf::Any::MergeFrom(from.service_msg());
  }
  switch (from.msg_type_case()) {
    case kMsgReq: {
      mutable_msg_req()->::data::Body_MsgReq::MergeFrom(from.msg_req());
      break;
    }
    case kMsgRsp: {
      mutable_msg_rsp()->::data::Body_MsgRsq::MergeFrom(from.msg_rsp());
      break;
    }
    case MSG_TYPE_NOT_SET: {
      break;
    }
  }
}

void Body::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data.Body)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Body::CopyFrom(const Body& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data.Body)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Body::IsInitialized() const {
  return true;
}

void Body::Swap(Body* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Body::InternalSwap(Body* other) {
  using std::swap;
  swap(service_msg_, other->service_msg_);
  swap(msg_type_, other->msg_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Body::GetMetadata() const {
  protobuf_data_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_data_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Body

// .data.Body.MsgReq msg_req = 1;
bool Body::has_msg_req() const {
  return msg_type_case() == kMsgReq;
}
void Body::set_has_msg_req() {
  _oneof_case_[0] = kMsgReq;
}
void Body::clear_msg_req() {
  if (has_msg_req()) {
    delete msg_type_.msg_req_;
    clear_has_msg_type();
  }
}
 const ::data::Body_MsgReq& Body::msg_req() const {
  // @@protoc_insertion_point(field_get:data.Body.msg_req)
  return has_msg_req()
      ? *msg_type_.msg_req_
      : ::data::Body_MsgReq::default_instance();
}
::data::Body_MsgReq* Body::mutable_msg_req() {
  if (!has_msg_req()) {
    clear_msg_type();
    set_has_msg_req();
    msg_type_.msg_req_ = new ::data::Body_MsgReq;
  }
  // @@protoc_insertion_point(field_mutable:data.Body.msg_req)
  return msg_type_.msg_req_;
}
::data::Body_MsgReq* Body::release_msg_req() {
  // @@protoc_insertion_point(field_release:data.Body.msg_req)
  if (has_msg_req()) {
    clear_has_msg_type();
    ::data::Body_MsgReq* temp = msg_type_.msg_req_;
    msg_type_.msg_req_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Body::set_allocated_msg_req(::data::Body_MsgReq* msg_req) {
  clear_msg_type();
  if (msg_req) {
    set_has_msg_req();
    msg_type_.msg_req_ = msg_req;
  }
  // @@protoc_insertion_point(field_set_allocated:data.Body.msg_req)
}

// .data.Body.MsgRsq msg_rsp = 2;
bool Body::has_msg_rsp() const {
  return msg_type_case() == kMsgRsp;
}
void Body::set_has_msg_rsp() {
  _oneof_case_[0] = kMsgRsp;
}
void Body::clear_msg_rsp() {
  if (has_msg_rsp()) {
    delete msg_type_.msg_rsp_;
    clear_has_msg_type();
  }
}
 const ::data::Body_MsgRsq& Body::msg_rsp() const {
  // @@protoc_insertion_point(field_get:data.Body.msg_rsp)
  return has_msg_rsp()
      ? *msg_type_.msg_rsp_
      : ::data::Body_MsgRsq::default_instance();
}
::data::Body_MsgRsq* Body::mutable_msg_rsp() {
  if (!has_msg_rsp()) {
    clear_msg_type();
    set_has_msg_rsp();
    msg_type_.msg_rsp_ = new ::data::Body_MsgRsq;
  }
  // @@protoc_insertion_point(field_mutable:data.Body.msg_rsp)
  return msg_type_.msg_rsp_;
}
::data::Body_MsgRsq* Body::release_msg_rsp() {
  // @@protoc_insertion_point(field_release:data.Body.msg_rsp)
  if (has_msg_rsp()) {
    clear_has_msg_type();
    ::data::Body_MsgRsq* temp = msg_type_.msg_rsp_;
    msg_type_.msg_rsp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Body::set_allocated_msg_rsp(::data::Body_MsgRsq* msg_rsp) {
  clear_msg_type();
  if (msg_rsp) {
    set_has_msg_rsp();
    msg_type_.msg_rsp_ = msg_rsp;
  }
  // @@protoc_insertion_point(field_set_allocated:data.Body.msg_rsp)
}

// .google.protobuf.Any service_msg = 3;
bool Body::has_service_msg() const {
  return this != internal_default_instance() && service_msg_ != NULL;
}
void Body::clear_service_msg() {
  if (GetArenaNoVirtual() == NULL && service_msg_ != NULL) delete service_msg_;
  service_msg_ = NULL;
}
const ::google::protobuf::Any& Body::service_msg() const {
  const ::google::protobuf::Any* p = service_msg_;
  // @@protoc_insertion_point(field_get:data.Body.service_msg)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
::google::protobuf::Any* Body::mutable_service_msg() {
  
  if (service_msg_ == NULL) {
    service_msg_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:data.Body.service_msg)
  return service_msg_;
}
::google::protobuf::Any* Body::release_service_msg() {
  // @@protoc_insertion_point(field_release:data.Body.service_msg)
  
  ::google::protobuf::Any* temp = service_msg_;
  service_msg_ = NULL;
  return temp;
}
void Body::set_allocated_service_msg(::google::protobuf::Any* service_msg) {
  delete service_msg_;
  service_msg_ = service_msg;
  if (service_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:data.Body.service_msg)
}

bool Body::has_msg_type() const {
  return msg_type_case() != MSG_TYPE_NOT_SET;
}
void Body::clear_has_msg_type() {
  _oneof_case_[0] = MSG_TYPE_NOT_SET;
}
Body::MsgTypeCase Body::msg_type_case() const {
  return Body::MsgTypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace data

// @@protoc_insertion_point(global_scope)
