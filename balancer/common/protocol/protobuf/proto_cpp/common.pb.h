// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef PROTOBUF_common_2eproto__INCLUDED
#define PROTOBUF_common_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
namespace common {
}  // namespace common

namespace common {

namespace protobuf_common_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_common_2eproto

enum ErrorCode {
  SUCCESS = 0,
  ERR_SYS_BEGIN = 100,
  ERR_SYS_OVERLOAD = 101,
  ERR_SYS_REJECT_SERVICE = 102,
  ERR_SYS_SERVER_INNER = 103,
  ERR_SYS_TIMEOUT = 104,
  ERR_SYS_NO_INSERVICE_LIST = 105,
  ERR_SYS_TASK_STATE = 106,
  ERR_SYS_TASK_DISCARD = 107,
  ERR_SYS_END = 199,
  ERR_PACKET_BEGIN = 200,
  ERR_PACKET_ENCODE = 201,
  ERR_PACKET_DECODE = 202,
  ERR_PACKET_HEADER = 203,
  ERR_PACKET_LEN = 204,
  ERR_PACKET_VERSION = 205,
  ERR_PACKET_FROM_SERVICE_ID = 206,
  ERR_PACKET_TO_SERVICE_ID = 207,
  ERR_PACKET_APP_ID = 208,
  ERR_PACKET_APP_VERSION = 209,
  ERR_PACKET_CONN_SEQ_ID = 210,
  ERR_PACKET_MSG_SEQ_ID = 211,
  ERR_PACKET_DATA_FORMAT = 212,
  ERR_PACKET_DATA_FIELD_0 = 213,
  ERR_PACKET_DATA_FIELD_1 = 214,
  ERR_PACKET_DATA_FIELD_2 = 215,
  ERR_PACKET_DATA_FIELD_3 = 216,
  ERR_PACKET_CHECK_SUM = 217,
  ERR_PACKET_UNKNOWN_REQUEST = 218,
  ERR_PACKET_END = 299,
  ERR_INTERFACE_BEGIN = 300,
  ERR_INTERFACE_PARAM = 301,
  ERR_INTERFACE_PERM = 302,
  ERR_INTERFACE_END = 399,
  ERR_BUSINESS_BEGIN = 10000,
  ERR_BUSINESS_END = 99999,
  ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ErrorCode_IsValid(int value);
const ErrorCode ErrorCode_MIN = SUCCESS;
const ErrorCode ErrorCode_MAX = ERR_BUSINESS_END;
const int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor();
inline const ::std::string& ErrorCode_Name(ErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ErrorCode_descriptor(), value);
}
inline bool ErrorCode_Parse(
    const ::std::string& name, ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace common

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::common::ErrorCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::ErrorCode>() {
  return ::common::ErrorCode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_common_2eproto__INCLUDED
